<!-- FontAwesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<!-- Global Chat Widget -->
<div id="global-chat-widget" class="global-chat-widget">
    <!-- Chat Toggle Button -->
    <div id="chat-toggle" class="chat-toggle" title="Open Chat">
        <span class="chat-icon">üí¨</span>
        <span id="unread-count" class="unread-badge" style="display: none;">0</span>
        <span class="chat-arrow">‚ñ≤</span>
    </div>
    
    <!-- Chat Panel -->
    <div id="chat-panel" class="chat-panel">
        <div class="chat-panel-header">
            <h6><span>üí¨</span> Messages</h6>
            <button id="new-chat-btn" class="btn-new-chat" title="New Chat">
                <span>+</span>
            </button>
            <button id="refresh-chat-btn" class="btn-refresh" title="Refresh Messages" style="background: #28a745; margin-left: 5px;">
                <span>üîÑ</span>
            </button>
        </div>
        
        <div class="chat-conversations" id="chat-conversations">
            <div class="no-chats-message">
                <i class="fas fa-comments"></i>
                <p>No conversations yet</p>
                <small>Start a chat from the swap matcher</small>
            </div>
        </div>
    </div>
    
    <!-- Active Chat Window -->
    <div id="active-chat" class="active-chat">
        <div class="active-chat-header">
            <button id="back-to-list" class="btn-back">
                <span>‚Üê</span>
            </button>
            <div class="chat-user-info">
                <div class="user-avatar">
                    <span>üë§</span>
                </div>
                <div class="user-details">
                    <h6 id="active-chat-name">User</h6>
                    <small id="active-chat-context">Book swap chat</small>
                </div>
            </div>
            <button id="minimize-active-chat" class="btn-minimize">
                <i class="fas fa-minus"></i>
            </button>
        </div>
        
        <div class="active-chat-messages" id="active-chat-messages">
            <!-- Messages will be loaded here -->
        </div>
        
        <div class="active-chat-footer">
            <div class="message-input-group">
                <input type="text" id="global-chat-input" placeholder="Type a message..." maxlength="500">
                <button id="global-send-btn" disabled>
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<style>
/* Global Chat Widget Styles - Matching Website Theme */
.global-chat-widget {
    position: fixed !important;
    bottom: 25px !important;
    right: 25px !important;
    z-index: 999999 !important;
    font-family: 'Montserrat', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
    display: block !important;
    visibility: visible !important;
}

.chat-toggle {
    width: 65px !important;
    height: 65px !important;
    background: linear-gradient(135deg, #3BB7FB 0%, #2A9FE8 50%, #1E88D5 100%) !important;
    border-radius: 50% !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    cursor: pointer !important;
    box-shadow: 0 8px 25px rgba(59, 183, 251, 0.4), 0 4px 12px rgba(0, 0, 0, 0.3) !important;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
    position: relative !important;
    color: white !important;
    font-size: 26px !important;
    border: 3px solid rgba(255, 255, 255, 0.2) !important;
    z-index: 999999 !important;
    visibility: visible !important;
    opacity: 1 !important;
}

.chat-toggle:hover {
    transform: scale(1.1) translateY(-2px);
    box-shadow: 0 12px 30px rgba(59, 183, 251, 0.5), 0 6px 18px rgba(0, 0, 0, 0.4);
    background: linear-gradient(135deg, #4AC3FF 0%, #3BB7FB 50%, #2A9FE8 100%);
}

.chat-toggle.active {
    border-radius: 15px;
    width: 320px;
    height: 55px;
    justify-content: space-between;
    padding: 0 24px;
    font-size: 16px;
    background: linear-gradient(135deg, #2D2D2D 0%, #1E1E1E 100%);
    border: 2px solid #3BB7FB;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5), 0 0 20px rgba(59, 183, 251, 0.3);
}

.chat-icon {
    font-size: 28px;
    display: block;
}

.chat-toggle.active .chat-icon {
    font-size: 22px;
}

.chat-arrow {
    font-size: 18px !important;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0.9;
    position: absolute;
    right: 8px;
    display: none;
}

.chat-toggle.active .chat-arrow {
    display: block;
    transform: rotate(180deg);
    color: #3BB7FB;
}

.unread-badge {
    position: absolute;
    top: -8px;
    right: -8px;
    background: linear-gradient(135deg, #FF4444 0%, #CC3333 100%);
    color: white;
    border-radius: 50%;
    width: 26px;
    height: 26px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 13px;
    font-weight: 700;
    border: 3px solid white;
    box-shadow: 0 4px 12px rgba(204, 51, 51, 0.4);
    animation: pulseGlow 2s infinite;
}

@keyframes pulseGlow {
    0% { 
        transform: scale(1); 
        box-shadow: 0 4px 12px rgba(204, 51, 51, 0.4);
    }
    50% { 
        transform: scale(1.15); 
        box-shadow: 0 6px 20px rgba(204, 51, 51, 0.7);
    }
    100% { 
        transform: scale(1); 
        box-shadow: 0 4px 12px rgba(204, 51, 51, 0.4);
    }
}

@keyframes messageSlideIn {
    0% {
        opacity: 0;
        transform: translateY(10px);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

.chat-panel {
    position: absolute;
    bottom: 85px;
    right: 0;
    width: 380px;
    height: 450px;
    background: linear-gradient(145deg, #2D2D2D 0%, #1E1E1E 100%);
    border-radius: 20px;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.6), 0 0 30px rgba(59, 183, 251, 0.1);
    border: 2px solid rgba(59, 183, 251, 0.3);
    transform: translateY(30px) scale(0.9);
    opacity: 0;
    visibility: hidden;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    flex-direction: column;
    backdrop-filter: blur(10px);
}

.chat-panel.show {
    transform: translateY(0) scale(1);
    opacity: 1;
    visibility: visible;
}

.chat-panel-header {
    padding: 20px 24px;
    background: linear-gradient(135deg, #3BB7FB 0%, #2A9FE8 100%);
    border-radius: 20px 20px 0 0;
    border-bottom: 2px solid rgba(255, 255, 255, 0.1);
    display: flex;
    align-items: center;
    justify-content: space-between;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

.chat-panel-header h6 {
    margin: 0;
    color: white;
    font-weight: 700;
    font-size: 16px;
    display: flex;
    align-items: center;
    gap: 10px;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.btn-new-chat {
    width: 36px;
    height: 36px;
    border: none;
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-size: 16px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    backdrop-filter: blur(5px);
}

.btn-new-chat:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1) rotate(90deg);
    box-shadow: 0 4px 12px rgba(255, 255, 255, 0.2);
}

.chat-conversations {
    flex: 1;
    overflow-y: auto;
    padding: 8px;
}

.no-chats-message {
    text-align: center;
    padding: 50px 24px;
    color: #B0B0B0;
}

.no-chats-message i {
    font-size: 52px;
    color: #3BB7FB;
    margin-bottom: 20px;
    opacity: 0.7;
}

.no-chats-message p {
    margin: 12px 0 6px 0;
    font-weight: 600;
    color: #E0E0E0;
    font-size: 16px;
}

.no-chats-message small {
    color: #888;
    font-size: 14px;
}

.conversation-item {
    padding: 16px 20px;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border-bottom: 1px solid rgba(59, 183, 251, 0.1);
    position: relative;
    margin: 4px 8px;
    background: rgba(255, 255, 255, 0.02);
}

.conversation-item:hover {
    background: rgba(59, 183, 251, 0.1);
    transform: translateX(4px);
    box-shadow: 0 4px 12px rgba(59, 183, 251, 0.2);
}

.conversation-item.unread {
    background: rgba(59, 183, 251, 0.15);
    border-left: 4px solid #3BB7FB;
    box-shadow: 0 2px 8px rgba(59, 183, 251, 0.3);
}

.conversation-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 4px;
}

.conversation-avatar {
    width: 44px;
    height: 44px;
    background: linear-gradient(135deg, #3BB7FB 0%, #2A9FE8 100%);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 18px;
    box-shadow: 0 4px 12px rgba(59, 183, 251, 0.3);
    border: 2px solid rgba(255, 255, 255, 0.2);
}

.conversation-details {
    flex: 1;
}

.conversation-name {
    font-weight: 700;
    color: #E0E0E0;
    font-size: 15px;
    margin: 0;
}

.conversation-last-message {
    color: #B0B0B0;
    font-size: 13px;
    margin: 4px 0 0 0;
    display: -webkit-box;
    -webkit-line-clamp: 1;
    line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.conversation-time {
    font-size: 12px;
    color: #888;
    position: absolute;
    top: 16px;
    right: 20px;
    opacity: 0.8;
}

.conversation-unread-count {
    position: absolute;
    bottom: 16px;
    right: 20px;
    background: linear-gradient(135deg, #FF4444 0%, #CC3333 100%);
    color: white;
    border-radius: 12px;
    padding: 4px 8px;
    font-size: 11px;
    font-weight: 700;
    min-width: 20px;
    text-align: center;
    box-shadow: 0 2px 6px rgba(204, 51, 51, 0.4);
    border: 1px solid rgba(255, 255, 255, 0.2);
}

/* Active Chat Styles */
.active-chat {
    position: fixed !important;
    bottom: 85px !important;
    right: 20px !important;
    width: 420px !important;
    height: 550px !important;
    background: linear-gradient(145deg, #2D2D2D 0%, #1E1E1E 100%) !important;
    border-radius: 20px !important;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.7), 0 0 30px rgba(59, 183, 251, 0.15) !important;
    border: 2px solid rgba(59, 183, 251, 0.3) !important;
    transform: translateY(30px) scale(0.9) !important;
    opacity: 0 !important;
    visibility: hidden !important;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1) !important;
    display: flex !important;
    flex-direction: column !important;
    backdrop-filter: blur(15px) !important;
    z-index: 10001 !important;
}

.active-chat.show {
    transform: translateY(0) scale(1) !important;
    opacity: 1 !important;
    visibility: visible !important;
}

.active-chat-header {
    padding: 16px 20px;
    background: linear-gradient(135deg, #3BB7FB 0%, #2A9FE8 100%);
    color: white;
    border-radius: 20px 20px 0 0;
    display: flex;
    align-items: center;
    gap: 15px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4);
}

.btn-back, .btn-minimize {
    width: 32px;
    height: 32px;
    border: none;
    background: rgba(255,255,255,0.1);
    color: white;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.2s;
}

.btn-back:hover, .btn-minimize:hover {
    background: rgba(255,255,255,0.2);
}

.chat-user-info {
    flex: 1;
    display: flex;
    align-items: center;
    gap: 12px;
}

.user-avatar {
    width: 36px;
    height: 36px;
    background: rgba(255,255,255,0.2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
}

.user-details h6 {
    margin: 0;
    font-size: 14px;
    font-weight: 600;
}

.user-details small {
    font-size: 12px;
    opacity: 0.9;
}

.active-chat-messages {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 15px;
    background: rgba(0, 0, 0, 0.1);
}

.chat-message {
    max-width: 75%;
    word-wrap: break-word;
    animation: messageSlideIn 0.3s ease-out;
}

.chat-message.sent {
    align-self: flex-end;
}

.chat-message.received {
    align-self: flex-start;
}

.message-content {
    background: rgba(255, 255, 255, 0.1);
    padding: 12px 16px;
    border-radius: 18px;
    font-size: 14px;
    line-height: 1.5;
    color: #E0E0E0;
    border: 1px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(5px);
}

.chat-message.sent .message-content {
    background: linear-gradient(135deg, #3BB7FB 0%, #2A9FE8 100%);
    color: white;
    box-shadow: 0 4px 12px rgba(59, 183, 251, 0.3);
}

.message-time {
    font-size: 11px;
    color: #888;
    margin-top: 6px;
    text-align: center;
    opacity: 0.8;
}

.system-message {
    text-align: center;
    font-size: 13px;
    color: #B0B0B0;
    font-style: italic;
    background: rgba(59, 183, 251, 0.15);
    padding: 10px 16px;
    border-radius: 15px;
    margin: 12px 0;
    align-self: center;
    border: 1px solid rgba(59, 183, 251, 0.2);
    backdrop-filter: blur(5px);
}

.active-chat-footer {
    border-top: 2px solid rgba(59, 183, 251, 0.2);
    padding: 16px 20px;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 0 0 20px 20px;
}

.message-input-group {
    display: flex;
    gap: 12px;
    align-items: center;
}

#global-chat-input {
    flex: 1;
    border: 2px solid rgba(59, 183, 251, 0.3);
    border-radius: 25px;
    padding: 12px 18px;
    font-size: 14px;
    outline: none;
    background: rgba(255, 255, 255, 0.05);
    color: #E0E0E0;
    backdrop-filter: blur(5px);
    transition: all 0.3s ease;
}

#global-chat-input::placeholder {
    color: #B0B0B0;
}

#global-chat-input:focus {
    border-color: #3BB7FB;
    box-shadow: 0 0 0 3px rgba(59, 183, 251, 0.2);
    background: rgba(255, 255, 255, 0.08);
}

#global-send-btn {
    width: 44px;
    height: 44px;
    border: none;
    background: linear-gradient(135deg, #3BB7FB 0%, #2A9FE8 100%);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-size: 16px;
    box-shadow: 0 4px 12px rgba(59, 183, 251, 0.3);
}

#global-send-btn:hover:not(:disabled) {
    background: linear-gradient(135deg, #4AC3FF 0%, #3BB7FB 100%);
    transform: scale(1.1) rotate(5deg);
    box-shadow: 0 6px 18px rgba(59, 183, 251, 0.4);
}

#global-send-btn:disabled {
    background: #555;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.active-chat-messages::-webkit-scrollbar,
.chat-conversations::-webkit-scrollbar {
    width: 6px;
}

.active-chat-messages::-webkit-scrollbar-track,
.chat-conversations::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.1);
    border-radius: 3px;
}

.active-chat-messages::-webkit-scrollbar-thumb,
.chat-conversations::-webkit-scrollbar-thumb {
    background: linear-gradient(180deg, #3BB7FB 0%, #2A9FE8 100%);
    border-radius: 3px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.active-chat-messages::-webkit-scrollbar-thumb:hover,
.chat-conversations::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(180deg, #4AC3FF 0%, #3BB7FB 100%);
}

@media (max-width: 768px) {
    .global-chat-widget {
        right: 15px;
        bottom: 15px;
    }
    
    .chat-panel, .active-chat {
        width: calc(100vw - 30px);
        right: -15px;
        height: calc(100vh - 150px);
        bottom: 90px;
    }
    
    .chat-toggle.active {
        width: calc(100vw - 30px);
    }
    
    .chat-panel {
        border-radius: 15px;
    }
    
    .active-chat {
        border-radius: 15px;
    }
    
    .chat-panel-header, .active-chat-header {
        border-radius: 15px 15px 0 0;
    }
    
    .active-chat-footer {
        border-radius: 0 0 15px 15px;
    }
}
</style>

<script>
// Global Chat System JavaScript
let globalChatWidget = {
    isOpen: false,
    activeChat: null,
    conversations: [],
    unreadCount: 0,
    currentUser: null,
    pollInterval: null,
    
    init() {
        console.log('üöÄ Global chat widget initializing...');
        this.bindEvents();
        this.getCurrentUser();
        this.loadConversations();
        this.startPolling();
        console.log('‚úÖ Global chat widget initialized successfully');
    },
    
    bindEvents() {
        console.log('üîó Binding chat widget events...');
        
        // Use event delegation to ensure events work even if elements are added later
        $(document).on('click', '#chat-toggle', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log('üñ±Ô∏è Chat toggle clicked');
            this.toggleChatPanel();
        });
        
        // Back to conversations list
        $(document).on('click', '#back-to-list', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log('üîô Back to list clicked');
            this.showConversationsList();
        });
        
        // Minimize active chat
        $(document).on('click', '#minimize-active-chat', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log('‚ûñ Minimize chat clicked');
            this.showConversationsList();
        });
        
        // Send message
        $(document).on('click', '#global-send-btn', (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.sendMessage();
        });
        
        // Enter key to send message
        $(document).on('keypress', '#global-chat-input', (e) => {
            if (e.which === 13 && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });
        
        // Enable/disable send button
        $(document).on('input', '#global-chat-input', () => {
            const hasText = $('#global-chat-input').val().trim().length > 0;
            $('#global-send-btn').prop('disabled', !hasText);
        });
        
        // New chat button
        $(document).on('click', '#new-chat-btn', (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.showNewChatOptions();
        });
        
        // Refresh button
        $(document).on('click', '#refresh-chat-btn', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log('üîÑ Manual refresh button clicked');
            const button = $(e.target).closest('button');
            const span = button.find('span');
            span.text('‚è≥');
            this.forceRefresh().then(() => {
                span.text('üîÑ');
            }).catch(() => {
                span.text('‚ùå');
                setTimeout(() => span.text('üîÑ'), 2000);
            });
        });
        
        console.log('‚úÖ Chat widget events bound successfully');
    },
    
    async getCurrentUser() {
        try {
            console.log('üîç Global chat: Getting current user...');
            const response = await $.get('/api/users/profile');
            this.currentUser = response.user || response;
            console.log('üë§ Global chat: Current user:', this.currentUser);
        } catch (error) {
            console.log('‚ùå Global chat: User not logged in:', error);
        }
    },
    
    toggleChatPanel() {
        console.log('üîÑ Toggling chat panel. Current state:', this.isOpen);
        
        this.isOpen = !this.isOpen;
        
        const toggle = $('#chat-toggle');
        const panel = $('#chat-panel');
        const activeChat = $('#active-chat');
        
        console.log('üìä Elements found:', {
            toggle: toggle.length > 0,
            panel: panel.length > 0,
            activeChat: activeChat.length > 0
        });
        
        if (this.isOpen) {
            console.log('üìÇ Opening chat panel');
            toggle.addClass('active');
            panel.addClass('show');
            // Hide active chat when showing panel
            activeChat.removeClass('show');
        } else {
            console.log('üìÅ Closing chat panel');
            toggle.removeClass('active');
            panel.removeClass('show');
            activeChat.removeClass('show');
            this.activeChat = null;
        }
        
        console.log('‚úÖ Chat panel toggled. New state:', this.isOpen);
    },
    
    showConversationsList() {
        console.log('üìã Showing conversations list');
        
        // Hide active chat
        $('#active-chat').removeClass('show').hide();
        
        // Show chat panel
        $('#chat-panel').show().addClass('show');
        
        this.activeChat = null;
    },
    
    showActiveChat(conversation) {
        console.log('üì± Showing active chat for:', conversation);
        
        if (!conversation) {
            console.error('‚ùå No conversation provided to showActiveChat');
            return;
        }
        
        this.activeChat = conversation;
        
        // Get elements
        const chatPanel = $('#chat-panel');
        const activeChat = $('#active-chat');
        
        console.log('üîÑ Switching from panel to active chat');
        console.log('üìã Chat panel found:', chatPanel.length);
        console.log('üìã Active chat found:', activeChat.length);
        
        // Hide chat panel first
        chatPanel.removeClass('show');
        
        // Update chat header with conversation info
        const otherUser = conversation.otherUser || conversation.participants?.find(p => p !== this.currentUser) || 'User';
        $('#active-chat-name').text(otherUser);
        $('#active-chat-context').text(conversation.context || 'Book swap chat');
        
        // Show active chat with animation
        setTimeout(() => {
            activeChat.addClass('show');
            console.log('‚úÖ Active chat displayed with class:', activeChat.hasClass('show'));
        }, 100);
        
        // Load messages
        this.loadChatMessages(conversation.id);
        
        // Mark as read
        this.markAsRead(conversation.id);
    },
    
    async loadConversations() {
        if (!this.currentUser) {
            console.warn('‚ùå Cannot load conversations: No current user');
            return;
        }
        
        try {
            console.log('üîÑ Loading conversations for user:', this.currentUser.username || this.currentUser.name);
            const response = await $.get('/api/global-chat/conversations');
            console.log('üìã Raw conversations response:', response);
            
            const oldCount = this.conversations.length;
            this.conversations = response.conversations || [];
            const newCount = this.conversations.length;
            
            console.log(`üìä Conversations loaded: ${newCount} (was ${oldCount})`);
            
            if (newCount !== oldCount) {
                console.log('üîÑ Conversation count changed, re-rendering...');
            }
            
            this.renderConversations();
            this.updateUnreadCount();
        } catch (error) {
            console.error('‚ùå Failed to load conversations:', error);
            console.error('Error details:', error.responseJSON || error.responseText || error.message);
            this.renderEmptyState();
        }
    },
    
    renderConversations() {
        const container = $('#chat-conversations');
        
        if (this.conversations.length === 0) {
            this.renderEmptyState();
            return;
        }
        
        let html = '';
        this.conversations.forEach(conv => {
            const lastMessage = conv.lastMessage || 'No messages yet';
            const unreadCount = conv.unreadCount || 0;
            const time = conv.lastMessageTime ? this.formatTime(new Date(conv.lastMessageTime)) : '';
            
            html += `
                <div class="conversation-item ${unreadCount > 0 ? 'unread' : ''}" data-conversation-id="${conv.id}">
                    <div class="conversation-header">
                        <div class="conversation-avatar">
                            <i class="fas fa-user"></i>
                        </div>
                        <div class="conversation-details">
                            <h6 class="conversation-name">${conv.otherUser}</h6>
                            <p class="conversation-last-message">${lastMessage}</p>
                        </div>
                    </div>
                    ${time ? `<div class="conversation-time">${time}</div>` : ''}
                    ${unreadCount > 0 ? `<div class="conversation-unread-count">${unreadCount}</div>` : ''}
                </div>
            `;
        });
        
        container.html(html);
        
        // Bind click events using event delegation
        $(document).off('click', '.conversation-item');
        $(document).on('click', '.conversation-item', (e) => {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            console.log('üñ±Ô∏è Conversation item clicked');
            
            const conversationId = $(e.currentTarget).data('conversation-id');
            console.log('üìã Conversation ID:', conversationId);
            
            if (!conversationId) {
                console.error('‚ùå No conversation ID found');
                return;
            }
            
            const conversation = this.conversations.find(c => c.id === conversationId);
            if (conversation) {
                console.log('‚úÖ Found conversation, opening:', conversation);
                setTimeout(() => {
                    this.showActiveChat(conversation);
                }, 50);
            } else {
                console.error('‚ùå Conversation not found for ID:', conversationId);
            }
        });
    },
    
    renderEmptyState() {
        $('#chat-conversations').html(`
            <div class="no-chats-message">
                <i class="fas fa-comments"></i>
                <p>No conversations yet</p>
                <small>Start a chat from the swap matcher</small>
            </div>
        `);
    },
    
    async loadChatMessages(conversationId) {
        try {
            console.log('üîÑ Loading messages for conversation:', conversationId);
            const response = await $.get(`/api/global-chat/${conversationId}/messages`);
            const messages = response.messages || [];
            console.log('üì® Loaded messages:', messages.length);
            this.renderMessages(messages);
        } catch (error) {
            console.error('‚ùå Failed to load messages:', error);
        }
    },
    
    renderMessages(messages) {
        const container = $('#active-chat-messages');
        let html = '';
        
        console.log('üîÑ Rendering messages:', messages.length);
        console.log('üë§ Current user:', this.currentUser);
        
        messages.forEach((msg, index) => {
            const currentUserName = this.currentUser?.username || this.currentUser?.name || this.currentUser?.email || 'Unknown';
            const isSent = msg.sender === currentUserName;
            const time = this.formatTime(new Date(msg.timestamp));
            
            console.log(`üìù Message ${index + 1}: "${msg.content}" from "${msg.sender}" - isSent: ${isSent} (comparing with "${currentUserName}")`);
            
            html += `
                <div class="chat-message ${isSent ? 'sent' : 'received'}">
                    <div class="message-content">${msg.content}</div>
                    <div class="message-time">${time}</div>
                    <div class="message-sender" style="font-size: 10px; opacity: 0.7;">${msg.sender}</div>
                </div>
            `;
        });
        
        if (html === '') {
            html = '<div class="system-message">üí¨ Start your conversation here!</div>';
        }
        
        container.html(html);
        console.log('‚úÖ Messages rendered successfully');
        this.scrollToBottom();
    },
    
    async sendMessage() {
        if (!this.activeChat) {
            console.error('‚ùå No active chat to send message to');
            return;
        }
        
        const input = $('#global-chat-input');
        const message = input.val().trim();
        
        if (!message) {
            console.warn('‚ö†Ô∏è Empty message, not sending');
            return;
        }
        
        console.log('üì§ Sending message:', message);
        
        // Disable send button and show loading
        const sendBtn = $('#global-send-btn');
        sendBtn.prop('disabled', true).html('‚è≥');
        
        try {
            const response = await $.post(`/api/global-chat/${this.activeChat.id}/message`, {
                sender: this.currentUser?.username || this.currentUser?.name || this.currentUser?.email,
                content: message
            });
            
            console.log('‚úÖ Message sent successfully:', response);
            
            // Clear input immediately
            input.val('');
            
            // Reload messages to get the latest (including the one we just sent)
            await this.loadChatMessages(this.activeChat.id);
            
            // Update conversations list to show latest activity
            this.loadConversations();
            
        } catch (error) {
            console.error('‚ùå Failed to send message:', error);
            alert('Failed to send message. Please try again.');
        } finally {
            // Re-enable send button
            sendBtn.prop('disabled', false).html('üì§');
        }
    },
    
    addMessageToUI(sender, content, isSent) {
        const time = this.formatTime(new Date());
        const messageHTML = `
            <div class="chat-message ${isSent ? 'sent' : 'received'}">
                <div class="message-content">${content}</div>
                <div class="message-time">${time}</div>
            </div>
        `;
        
        $('#active-chat-messages').append(messageHTML);
    },
    
    addSystemMessage(content) {
        const messageHTML = `<div class="system-message">${content}</div>`;
        $('#active-chat-messages').append(messageHTML);
    },
    
    scrollToBottom() {
        const container = $('#active-chat-messages');
        container.scrollTop(container[0].scrollHeight);
    },
    
    updateUnreadCount() {
        const totalUnread = this.conversations.reduce((sum, conv) => sum + (conv.unreadCount || 0), 0);
        this.unreadCount = totalUnread;
        
        const badge = $('#unread-count');
        if (totalUnread > 0) {
            badge.text(totalUnread > 99 ? '99+' : totalUnread).show();
        } else {
            badge.hide();
        }
    },
    
    async markAsRead(conversationId) {
        try {
            await $.post(`/api/global-chat/${conversationId}/mark-read`);
            // Update local conversation
            const conv = this.conversations.find(c => c.id === conversationId);
            if (conv) {
                conv.unreadCount = 0;
            }
            this.updateUnreadCount();
            this.renderConversations();
        } catch (error) {
            console.error('Failed to mark as read:', error);
        }
    },
    
    startPolling() {
        console.log('üöÄ Starting message polling every 2 seconds...');
        // Clear any existing interval
        if (this.pollInterval) {
            clearInterval(this.pollInterval);
        }
        
        // Poll for new messages every 2 seconds for better real-time experience
        this.pollInterval = setInterval(() => {
            const now = new Date().toLocaleTimeString();
            console.log(`üîÑ [${now}] Polling for updates... User:`, this.currentUser?.username || this.currentUser?.name || 'Unknown');
            
            if (this.currentUser) {
                // Always load conversations to check for new chats
                this.loadConversations();
                
                // If we have an active chat, refresh its messages
                if (this.activeChat && this.activeChat.id) {
                    console.log(`üí¨ [${now}] Refreshing active chat messages for:`, this.activeChat.id);
                    this.loadChatMessages(this.activeChat.id);
                } else {
                    console.log(`‚ÑπÔ∏è [${now}] No active chat to refresh`);
                }
            } else {
                console.warn(`‚ö†Ô∏è [${now}] No current user found for polling`);
            }
        }, 2000); // Poll every 2 seconds
        
        console.log('‚úÖ Message polling started successfully');
    },
    
    // Manual refresh function for testing
    async forceRefresh() {
        console.log('üîÑ MANUAL REFRESH TRIGGERED');
        await this.loadConversations();
        if (this.activeChat) {
            await this.loadChatMessages(this.activeChat.id);
        }
        console.log('‚úÖ Manual refresh completed');
    },
    
    formatTime(date) {
        const now = new Date();
        const diffMs = now - date;
        const diffMins = Math.floor(diffMs / 60000);
        const diffHours = Math.floor(diffMs / 3600000);
        const diffDays = Math.floor(diffMs / 86400000);
        
        if (diffMins < 1) return 'now';
        if (diffMins < 60) return `${diffMins}m`;
        if (diffHours < 24) return `${diffHours}h`;
        if (diffDays < 7) return `${diffDays}d`;
        
        return date.toLocaleDateString();
    },
    
    showNewChatOptions() {
        alert('To start a new chat, go to the Swap Matcher and select books to swap, then click "Chat Now"');
    },
    
    // Method to be called from swap matcher
    createNewChat(chatData) {
        console.log('üöÄ Global chat: Creating new chat with data:', chatData);
        
        return $.post('/api/global-chat/create', chatData)
            .done((response) => {
                console.log('‚úÖ Global chat: Chat creation response:', response);
                
                // Create conversation object
                const newConv = {
                    id: response.chatId,
                    otherUser: chatData.user2,
                    context: `${chatData.offeredBook} ‚Üî ${chatData.requestedBook}`
                };
                
                console.log('üìñ Global chat: Opening new conversation immediately:', newConv);
                
                // Ensure chat widget is visible and open
                if (!this.isOpen) {
                    console.log('üìÇ Opening chat widget first');
                    this.isOpen = true;
                    $('#chat-toggle').addClass('active');
                }
                
                // Directly show the active chat (skip conversation list)
                this.showActiveChat(newConv);
                
                // Update conversations list in background
                setTimeout(() => {
                    this.loadConversations();
                }, 1000);
            })
            .fail((xhr, status, error) => {
                console.error('‚ùå Global chat: Failed to create chat:', {
                    status: xhr.status,
                    statusText: xhr.statusText,
                    responseText: xhr.responseText,
                    error: error
                });
            });
    }
};

// Initialize when DOM is ready
$(document).ready(() => {
    console.log('üéØ DOM ready, initializing global chat widget...');
    
    try {
        // Make chat widget available globally for debugging
        window.chatWidget = globalChatWidget;
        console.log('üîß Chat widget available as window.chatWidget for debugging');
        console.log('üîß Manual commands: window.chatWidget.forceRefresh(), window.chatWidget.loadConversations()');
        
        globalChatWidget.init();
        console.log('‚úÖ Global chat widget initialized successfully');
        
        // Test visibility
        setTimeout(() => {
            const widget = $('#global-chat-widget');
            const toggle = $('#chat-toggle');
            console.log('üîç Chat widget element found:', widget.length > 0);
            console.log('üîç Chat widget visibility:', widget.is(':visible'));
            console.log('üîç Chat toggle button found:', toggle.length > 0);
            console.log('üîç Chat toggle visibility:', toggle.is(':visible'));
            
            if (widget.length === 0) {
                console.error('‚ùå Chat widget element not found in DOM');
            }
            if (toggle.length === 0) {
                console.error('‚ùå Chat toggle button not found in DOM');
            }
            
            // Test API connectivity
            console.log('üîó Testing API connectivity...');
            $.get('/api/global-chat/conversations')
                .done((data) => {
                    console.log('‚úÖ API connection successful:', data);
                })
                .fail((error) => {
                    console.error('‚ùå API connection failed:', error);
                });
        }, 2000);
        
    } catch (error) {
        console.error('‚ùå Error initializing global chat widget:', error);
    }
});

// Make it globally accessible
window.globalChatWidget = globalChatWidget;

console.log('üì¶ Global chat widget script loaded');
</script>
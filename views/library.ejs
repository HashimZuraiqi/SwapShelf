<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
  <title>My Library | BookSwap</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
   <link rel="stylesheet" href="/css/style.css">
   <link href="https://fonts.googleapis.com/css?family=Montserrat:700,600,400&display=swap" rel="stylesheet">
   
   <!-- Navbar Chat System CSS -->
   <link rel="stylesheet" href="/css/navbar-chat.css">
   
   <!-- Remove button styles for high visibility -->
   <style>
     .remove-book-btn {
       opacity: 1 !important;
       visibility: visible !important;
       display: block !important;
       position: relative !important;
       z-index: 9999 !important;
       background-color: #dc3545 !important;
       border-color: #dc3545 !important;
       color: white !important;
       transition: all 0.2s ease;
     }
     .remove-book-btn:hover {
       background-color: #c82333 !important;
       border-color: #bd2130 !important;
       transform: scale(1.02);
     }
     .book-card:hover .remove-book-btn {
       opacity: 1 !important;
       visibility: visible !important;
     }
     .card-dark {
       position: relative;
       overflow: visible !important;
     }
     .card-dark .card-body {
       position: relative !important;
     }
     /* Force the remove button container to be visible */
     .remove-button-container {
       display: block !important;
       visibility: visible !important;
       opacity: 1 !important;
       margin-top: 0.5rem !important;
       text-align: center !important;
     }

     /* Clean & Stylish Library Header with Rounded Design */
     .library-header {
       position: relative;
       overflow: hidden;
       backdrop-filter: blur(20px);
       transition: all 0.3s ease;
     }
     
     .library-header:hover {
       transform: translateY(-2px);
       box-shadow: 0 12px 40px rgba(0,0,0,0.4) !important;
       border-color: rgba(59, 183, 251, 0.2) !important;
     }
     
     .title-icon-wrapper:hover {
       transform: scale(1.08) rotate(5deg);
       box-shadow: 0 12px 40px rgba(59, 183, 251, 0.5);
       transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
     }
     
     .header-action .btn:hover {
       transform: translateY(-2px);
       box-shadow: 0 8px 35px rgba(59, 183, 251, 0.6);
     }
     
     .header-action .btn:hover div {
       opacity: 1;
     }
     
     .count-badge:hover {
       transform: scale(1.05);
       border-color: rgba(59, 183, 251, 0.4);
       transition: all 0.3s ease;
     }
     
     .library-content {
       position: relative;
       z-index: 1;
     }
     
     .content-controls {
       background: rgba(35, 36, 42, 0.4);
       border: 1px solid rgba(120,130,150,.15);
       border-radius: 18px;
       padding: 1.8rem;
       backdrop-filter: blur(15px);
       margin-bottom: 2.5rem;
       box-shadow: 0 4px 20px rgba(0,0,0,0.1);
     }
     
     .search-container {
       position: relative;
     }
     
     .search-box {
       transition: all 0.3s ease;
     }
     
     .search-box:focus-within {
       border-color: rgba(59, 183, 251, 0.6);
       box-shadow: 0 0 0 4px rgba(59, 183, 251, 0.15);
       transform: translateY(-1px);
     }
     
     .view-options {
       gap: 1.2rem;
     }
     
     .view-options .btn:hover {
       border-color: rgba(59, 183, 251, 0.7);
       background: rgba(59, 183, 251, 0.1);
       transform: translateY(-1px);
     }
     
     /* Enhanced Search Container Styling */
     .search-container {
       position: relative;
     }
     
     .search-wrapper {
       display: flex;
       align-items: center;
     }
     
     .search-wrapper .btn:hover {
       background: linear-gradient(135deg, #34a0e0, #e6a03c) !important;
       color: #fff !important;
       transform: translateY(-2px) scale(1.05);
       box-shadow: 0 6px 20px rgba(59, 183, 251, 0.4);
     }
     
     .form-control:focus {
       border-color: rgba(59, 183, 251, 0.6) !important;
       box-shadow: 0 0 0 4px rgba(59, 183, 251, 0.15) !important;
       transform: translateY(-1px);
     }
     
     .form-control:hover {
       border-color: rgba(59, 183, 251, 0.4) !important;
       transform: translateY(-1px);
     }
     
     .btn-gradient:hover {
       transform: translateY(-2px);
       box-shadow: 0 6px 20px rgba(59, 183, 251, 0.4);
     }
     
     /* Enhanced Book Cards - Wishlist Style */
     .book-card-professional {
       display: flex;
       flex-direction: column;
       min-height: 320px;
       transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
     }
     
     .book-card-professional:hover {
       background: linear-gradient(135deg, #2A2D35, #23242a) !important;
       border-color: rgba(59, 183, 251, 0.4) !important;
       transform: translateY(-6px);
       box-shadow: 0 15px 45px rgba(0,0,0,0.5);
     }
     
     .book-card-professional:hover .book-cover-professional {
       transform: scale(1.05);
     }
     
     .book-card-professional:hover .quick-actions-overlay {
       opacity: 1 !important;
     }
     
     .book-info-professional {
       flex-grow: 1;
       display: flex;
       flex-direction: column;
     }
     
     .book-actions {
       margin-top: auto;
     }
     
     .book-card-professional .btn-outline-primary:hover {
       background: linear-gradient(135deg, #3BB7FB, #34a0e0) !important;
       border-color: #3BB7FB !important;
       color: #fff !important;
       transform: translateY(-2px);
       box-shadow: 0 6px 20px rgba(59, 183, 251, 0.4);
     }
     
     /* Book cover styling */
     .book-cover-professional,
     .book-cover-placeholder {
       transition: transform 0.3s ease;
     }
     
     /* Make sure images load properly */
     .book-cover-professional {
       background: #2a2d35;
     }
     
     /* Enhanced Empty State */
     .empty-library-container {
       padding: 5rem 0;
       position: relative;
     }
     
     .empty-state-card {
       position: relative;
       overflow: hidden;
       transition: all 0.3s ease;
     }
     
     .empty-state-card:hover {
       transform: translateY(-3px);
       box-shadow: 0 12px 40px rgba(0,0,0,0.3);
     }
     
     .empty-state-card::before {
       content: '';
       position: absolute;
       top: 0;
       left: 0;
       right: 0;
       bottom: 0;
       background: linear-gradient(135deg, rgba(59, 183, 251, 0.05), rgba(246, 180, 67, 0.05));
       pointer-events: none;
     }
     
     .empty-state-card > * {
       position: relative;
       z-index: 2;
     }
     
     .empty-icon-wrapper:hover {
       transform: scale(1.15) rotate(10deg);
       box-shadow: 0 15px 40px rgba(59, 183, 251, 0.5);
     }
     
     .empty-features .col-4:hover i {
       transform: scale(1.3);
       transition: transform 0.3s ease;
     }

     /* Google Books Search Styles - MAXIMUM Z-INDEX */
     .search-input-container {
       position: relative;
       z-index: 9999999 !important;
     }
     
     .search-results-dropdown,
     #search-results {
       position: fixed !important;
       top: 100%;
       left: 0;
       right: 0;
       background: #1a1b21 !important;
       border: 1px solid rgba(120,130,150,.2);
       border-radius: 8px;
       max-height: 300px;
       overflow-y: auto;
       z-index: 999999999 !important;
       display: none;
       box-shadow: 0 8px 32px rgba(0,0,0,0.5);
       backdrop-filter: blur(10px);
       pointer-events: auto !important;
     }
     
     /* Force search dropdown above everything */
     #search-results {
       z-index: 2147483647 !important; /* Maximum possible z-index */
       position: fixed !important;
     }
     
     .search-result-item {
       padding: 0.75rem;
       cursor: pointer;
       border-bottom: 1px solid rgba(120,130,150,.1);
       transition: background-color 0.2s ease;
       display: flex;
       align-items: center;
       gap: 0.75rem;
     }
     
     .search-result-item:hover {
       background-color: rgba(59, 183, 251, 0.1);
     }
     
     .search-result-item:last-child {
       border-bottom: none;
     }
     
     .search-result-cover {
       width: 40px;
       height: 60px;
       object-fit: cover;
       border-radius: 4px;
       flex-shrink: 0;
       background: #2a2d35;
       display: flex;
       align-items: center;
       justify-content: center;
       color: #666;
       font-size: 0.8rem;
     }
     
     /* Override ALL potential z-index conflicts */
     .navbar,
     .navbar-nav,
     .nav-item,
     .dropdown-menu,
     .dropdown,
     .nav-item.dropdown,
     .modal,
     .modal-backdrop {
       z-index: 1000 !important;
     }
     
     /* Force position for dropdown elements */
     .dropdown-menu.show {
       z-index: 1000 !important;
       position: absolute !important;
     }
     
     /* Override Bootstrap and any other dropdown conflicts */
     .navbar .dropdown-menu,
     .nav .dropdown-menu,
     .dropdown-menu {
       z-index: 1000 !important;
       position: absolute !important;
     }
     
     /* Search input container positioning */
     .search-input-container {
       position: relative !important;
       z-index: 999997 !important;
     }
     
     .search-result-info {
       flex-grow: 1;
       min-width: 0;
     }
     
     .search-result-title {
       color: #fff;
       font-weight: 600;
       font-size: 0.9rem;
       margin-bottom: 0.25rem;
       white-space: nowrap;
       overflow: hidden;
       text-overflow: ellipsis;
     }
     
     .search-result-author {
       color: #3BB7FB;
       font-size: 0.8rem;
       margin-bottom: 0.25rem;
       white-space: nowrap;
       overflow: hidden;
       text-overflow: ellipsis;
     }
     
     .search-result-year {
       color: #b0b3b8;
       font-size: 0.7rem;
     }
     
     .search-loading {
       padding: 1rem;
       text-align: center;
       color: #b0b3b8;
       font-size: 0.9rem;
     }
     
     .search-no-results {
       padding: 1rem;
       text-align: center;
       color: #b0b3b8;
       font-size: 0.9rem;
     }
     
     #cover-preview.visible {
       display: block !important;
     }
     
     #upload-placeholder.hidden {
       display: none !important;
     }

     /* Enhanced Modal Styling */
     .condition-option:hover {
       background: rgba(59, 183, 251, 0.1) !important;
       border-color: rgba(59, 183, 251, 0.3) !important;
     }
     
     .condition-option input:checked + span {
       color: #3BB7FB !important;
     }
     
     .upload-area:hover {
       border-color: rgba(59, 183, 251, 0.5) !important;
       background: rgba(59, 183, 251, 0.05) !important;
     }
     
     .form-control:focus {
       border-color: rgba(59, 183, 251, 0.6) !important;
       box-shadow: 0 0 0 3px rgba(59, 183, 251, 0.1) !important;
     }
     
     .modal-content button[type="submit"]:hover {
       background: linear-gradient(135deg, #34a0e0, #2b8bc7) !important;
       transform: translateY(-1px);
       box-shadow: 0 6px 20px rgba(59, 183, 251, 0.4) !important;
     }
     
     /* Ensure modal appears above everything */
     .modal {
       z-index: 99999 !important;
     }
     
     .modal-backdrop {
       z-index: 99998 !important;
     }

     /* Responsive adjustments */
     @media (max-width: 768px) {
       .library-header {
         padding: 2.5rem 1.5rem 2rem !important;
         margin: 1rem !important;
         border-radius: 16px !important;
       }
       
       .page-title {
         font-size: 2.2rem !important;
       }
       
       .subtitle {
         font-size: 1rem !important;
       }
       
       .header-action .btn {
         padding: 0.8rem 2rem !important;
         font-size: 0.9rem !important;
       }
       
       .title-icon-wrapper {
         width: 60px !important;
         height: 60px !important;
       }
       
       .title-icon-wrapper i {
         font-size: 1.5rem !important;
       }
       
       .content-controls {
         padding: 1.2rem !important;
       }
       
       .empty-state-card {
         padding: 2.5rem 1.5rem !important;
       }
     }
     
     @media (max-width: 576px) {
       .library-header {
         padding: 2rem 1rem 1.5rem !important;
         margin: 0.75rem !important;
         border-radius: 12px !important;
       }
       
       .page-title {
         font-size: 1.8rem !important;
       }
       
       .count-badge {
         padding: 0.5rem 1rem !important;
         font-size: 0.85rem !important;
       }
     }
   </style>
</head>
<body>
<!-- Include Standard Navbar -->
<%- include('partials/navbar') %>

<main class="main-content">
    <!-- Clean & Stylish Header Section with Rounded Design -->
    <div class="library-header" style="background: linear-gradient(135deg, #1a1b21 0%, #23242a 50%, #1e1f24 100%); border: 1px solid rgba(59, 183, 251, 0.1); border-radius: 20px; padding: 3rem 2rem 2.5rem; position: relative; overflow: hidden; margin: 1.5rem; box-shadow: 0 8px 32px rgba(0,0,0,0.3);">
        <!-- Subtle Background Pattern -->
        <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-image: radial-gradient(circle at 25% 25%, rgba(59, 183, 251, 0.05) 0%, transparent 50%), radial-gradient(circle at 75% 75%, rgba(246, 180, 67, 0.05) 0%, transparent 50%); pointer-events: none; border-radius: 20px;"></div>
        
        <div class="container-fluid px-4">
            <div class="row justify-content-center">
                <div class="col-lg-10 col-xl-8">
                    <div class="header-content" style="position: relative; z-index: 2; text-align: center; width: 100%;">
                        <!-- All elements in single container, stacked vertically -->
                        <div style="display: block; width: 100%;">
                            <!-- Icon -->
                            <div class="title-icon-wrapper" style="background: linear-gradient(135deg, #3BB7FB, #34a0e0); border-radius: 50%; width: 70px; height: 70px; margin: 0 auto 1.5rem auto; display: flex; align-items: center; justify-content: center; box-shadow: 0 8px 32px rgba(59, 183, 251, 0.3); position: relative;">
                                <i class="bi bi-book-fill" style="color: #fff; font-size: 1.8rem;"></i>
                                <!-- Glow effect -->
                                <div style="position: absolute; top: -2px; left: -2px; right: -2px; bottom: -2px; background: linear-gradient(135deg, #3BB7FB, #34a0e0); border-radius: 50%; opacity: 0.3; filter: blur(8px); z-index: -1;"></div>
                            </div>
                            
                            <!-- Title -->
                            <h1 class="page-title" style="font-size: 3rem; font-weight: 900; color: #fff; margin: 0 0 1rem 0; letter-spacing: -1px; background: linear-gradient(135deg, #fff, #e6e9ee); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; display: block; width: 100%;">
                                My Library
                            </h1>
                            
                            <!-- Book Count Badge -->
                            <div style="display: block; width: 100%; margin-bottom: 1.5rem;">
                                <div class="count-badge" style="display: inline-flex; align-items: center; gap: 0.5rem; background: rgba(35, 36, 42, 0.8); border: 1px solid rgba(59, 183, 251, 0.2); border-radius: 50px; padding: 0.6rem 1.2rem; backdrop-filter: blur(20px); box-shadow: 0 4px 20px rgba(0,0,0,0.2);">
                                    <div style="background: linear-gradient(135deg, #3BB7FB, #F6B443); border-radius: 50%; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center;">
                                        <i class="bi bi-collection" style="color: #fff; font-size: 0.7rem;"></i>
                                    </div>
                                    <span style="color: #fff; font-weight: 700; font-size: 0.95rem;">
                                        <%= (books && books.length) ? books.length : 0 %> 
                                        <span style="color: #b0b3b8; font-weight: 500; margin-left: 0.2rem;">
                                            <%= (books && books.length === 1) ? 'Book' : 'Books' %>
                                        </span>
                                    </span>
                                </div>
                            </div>
                            
                            <!-- Subtitle -->
                            <div style="display: block; width: 100%; margin-bottom: 1.5rem;">
                                <p class="subtitle" style="font-size: 1.2rem; color: #b0b3b8; line-height: 1.7; margin: 0; max-width: 560px; opacity: 0.9; display: block; margin-left: auto; margin-right: auto;">
                                    Manage your book collection and share with fellow readers
                                </p>
                            </div>
                            
                            <!-- Action Button -->
                            <div style="display: block; width: 100%;">
                                <a href="/add-book" class="btn btn-gradient btn-lg" 
                                        style="font-size: 1rem; font-weight: 700; border-radius: 50px; padding: 1rem 2.5rem; box-shadow: 0 6px 25px rgba(59, 183, 251, 0.4); transition: all 0.3s ease; border: none; position: relative; overflow: hidden; text-decoration: none; display: inline-block;">
                                    <span style="position: relative; z-index: 2; display: flex; align-items: center; gap: 0.6rem;">
                                        <i class="bi bi-plus-circle"></i>
                                        Add Book
                                    </span>
                                    <!-- Button glow effect -->
                                    <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: linear-gradient(135deg, rgba(255,255,255,0.1), transparent); opacity: 0; transition: opacity 0.3s ease; border-radius: 50px;"></div>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Content Section -->
    <div class="library-content" style="padding: 2rem 0;">
        <div class="container-fluid px-4">
            <!-- Search and Filter Bar -->
            <div class="content-controls mb-4">
                <div class="row align-items-center">
                        <div class="col-md-8">
                            <div class="history-style-search-container">
                                <input
                                    id="library-search"
                                    type="text"
                                    class="history-style-search-input"
                                    placeholder="Search your library by title or author..."
                                    autocomplete="off"
                                />
                                <div class="history-style-search-icon">
                                    <i class="bi bi-search"></i>
                                </div>
                            </div>
                        </div>
                    <div class="col-md-4 text-md-right">
                        <div class="view-options d-flex align-items-center justify-content-md-end justify-content-start mt-3 mt-md-0">
                            <small class="text-muted me-3" style="font-size: 0.85rem;">
                                <i class="bi bi-grid-3x3-gap me-1"></i> Grid View
                            </small>
                            <a href="/add-book" class="btn btn-outline-primary btn-sm" 
                                    style="border-color: rgba(59, 183, 251, 0.4); color: #3BB7FB; padding: 0.4rem 0.8rem; border-radius: 6px; font-size: 0.8rem; text-decoration: none;">
                                <i class="bi bi-plus me-1"></i> Add Books
                            </a>
                        </div>
                    </div>
                </div>
            </div>

        <!-- My Library Content -->
        <div id="library-content" data-books='<%- JSON.stringify(books || []) %>'>
            <% if (!books || books.length === 0) { %>
                <!-- Enhanced Empty State -->
                <div id="empty-state" class="empty-library-container">
                    <div class="container-fluid px-0">
                        <div class="row justify-content-center">
                            <div class="col-lg-6 col-md-8">
                                <div class="empty-state-card" style="background: linear-gradient(135deg, #23242a, #1E1F23); border: 1px solid rgba(120,130,150,.15); border-radius: 20px; padding: 3rem 2rem; text-align: center; box-shadow: 0 8px 32px rgba(0,0,0,0.2);">
                                    <div class="empty-icon-wrapper" style="background: linear-gradient(135deg, #3BB7FB, #34a0e0); border-radius: 50%; width: 80px; height: 80px; margin: 0 auto 2rem; display: flex; align-items: center; justify-content: center; box-shadow: 0 8px 24px rgba(59, 183, 251, 0.3);">
                                        <i class="bi bi-book" style="font-size: 2.5rem; color: #fff;"></i>
                                    </div>
                                    <h3 class="empty-title" style="color: #fff; font-weight: 700; margin-bottom: 1rem; font-size: 1.5rem;">
                                        Your Library Awaits
                                    </h3>
                                    <p class="empty-description" style="color: #b0b3b8; font-size: 1rem; margin-bottom: 2rem; line-height: 1.6; max-width: 400px; margin-left: auto; margin-right: auto;">
                                        Start building your personal book collection. Add your first book and begin sharing with fellow readers.
                                    </p>
                                    <div class="empty-actions">
                                        <a href="/add-book" class="btn btn-gradient btn-lg" 
                                                style="font-weight: 600; border-radius: 12px; padding: 0.8rem 2rem; font-size: 1rem; box-shadow: 0 4px 16px rgba(59, 183, 251, 0.3); text-decoration: none;">
                                            <i class="bi bi-plus me-2"></i> Add Your First Book
                                        </a>
                                    </div>
                                    <div class="empty-features mt-4">
                                        <div class="row text-center">
                                            <div class="col-4">
                                                <i class="bi bi-plus-circle" style="color: #3BB7FB; font-size: 1.5rem; margin-bottom: 0.5rem;"></i>
                                                <small style="color: #b0b3b8; font-size: 0.8rem; display: block;">Add Books</small>
                                            </div>
                                            <div class="col-4">
                                                <i class="bi bi-people-fill" style="color: #F6B443; font-size: 1.5rem; margin-bottom: 0.5rem;"></i>
                                                <small style="color: #b0b3b8; font-size: 0.8rem; display: block;">Share</small>
                                            </div>
                                            <div class="col-4">
                                                <i class="bi bi-arrow-left-right" style="color: #059669; font-size: 1.5rem; margin-bottom: 0.5rem;"></i>
                                                <small style="color: #b0b3b8; font-size: 0.8rem; display: block;">Swap</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            <% } else { %>
                <div class="wishlist-grid-container">
                    <div class="row">
                        <% books.forEach(book => { %>
                            <div class="col-6 col-sm-6 col-md-4 col-lg-3 col-xl-2 mb-4">
                                <div class="book-card-professional h-100" style="background: linear-gradient(135deg, #23242a, #1E1F23); border: 1px solid rgba(120,130,150,.1); border-radius: 16px; padding: 1.25rem; transition: all 0.3s ease; position: relative; overflow: hidden;">
                                    <div class="book-cover-container text-center mb-3" style="position: relative;">
                                        <!-- Show placeholder initially, JavaScript will replace with Google Books image -->
                                        <div class="book-cover-placeholder" style="width: 120px; height: 160px; background: linear-gradient(135deg, #3BB7FB, #34a0e0); border-radius: 10px; display: flex; align-items: center; justify-content: center; margin: 0 auto; box-shadow: 0 6px 20px rgba(0,0,0,0.4);">
                                            <i class="bi bi-book text-white" style="font-size: 2.5rem;"></i>
                                        </div>
                                        <div class="quick-actions-overlay" style="position: absolute; top: 8px; right: 8px; opacity: 0; transition: opacity 0.3s ease;">
                                            <button class="btn btn-sm remove-book-btn" 
                                                    data-book-id="<%= book._id || book.id %>" 
                                                    data-book-title="<%= book.title %>"
                                                    style="background: rgba(220, 53, 69, 0.9); border: none; border-radius: 50%; width: 28px; height: 28px; padding: 0; color: white; backdrop-filter: blur(10px);">
                                                <i class="bi bi-x" style="font-size: 0.8rem;"></i>
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <div class="book-info-professional">
                                        <h6 class="book-title-professional" style="color: #fff; font-weight: 600; font-size: 0.9rem; line-height: 1.3; margin-bottom: 0.5rem; height: 2.6rem; overflow: hidden; text-align: center; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; line-clamp: 2;">
                                            <%= book.title %>
                                        </h6>
                                        <p class="book-author-professional" style="color: #3BB7FB; font-size: 0.75rem; font-weight: 500; text-align: center; margin-bottom: 1rem; opacity: 0.9;">
                                            <%= book.author %>
                                        </p>
                                        
                                        <div class="book-meta text-center mb-3">
                                            <small class="date-added" style="color: #b0b3b8; font-size: 0.7rem; background: rgba(120,130,150,.1); padding: 0.2rem 0.6rem; border-radius: 8px; display: inline-block;">
                                                <i class="bi bi-calendar3 me-1"></i> 
                                                <%= book.dateAdded ? new Date(book.dateAdded).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) : new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) %>
                                            </small>
                                        </div>
                                        
                                        <div class="book-actions mt-auto">
                                            <a href="/books/<%= book._id || book.id %>" class="btn btn-outline-primary w-100" 
                                                    style="padding: 0.6rem; border-radius: 10px; font-weight: 600; font-size: 0.8rem; transition: all 0.3s ease; border-color: rgba(59, 183, 251, 0.5); background: transparent; text-decoration: none;">
                                                <i class="bi bi-eye me-1"></i> View Details
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
            <% } %>
        </div>
        </div>
    </div>
</main>

  <!-- Enhanced Add Book Modal with Modern Design -->
  <div class="modal fade" id="addBookModal" tabindex="-1" role="dialog" aria-labelledby="addBookModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
      <div class="modal-content" style="background: linear-gradient(135deg, #1a1b21, #23242a); border: 1px solid rgba(120,130,150,.2); border-radius: 20px; box-shadow: 0 20px 60px rgba(0,0,0,0.5); overflow: hidden;">
        <!-- Enhanced Modal Header -->
        <div class="modal-header" style="background: linear-gradient(135deg, #23242a, #1E1F23); border-bottom: 1px solid rgba(120,130,150,.15); padding: 2rem 2rem 1.5rem; position: relative;">
          <!-- Background Pattern -->
          <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-image: radial-gradient(circle at 25% 25%, rgba(59, 183, 251, 0.05) 0%, transparent 50%); pointer-events: none;"></div>
          
          <div style="position: relative; z-index: 2; width: 100%;">
            <div class="d-flex align-items-center">
              <!-- Icon -->
              <div style="background: linear-gradient(135deg, #3BB7FB, #34a0e0); border-radius: 50%; width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; margin-right: 1rem; box-shadow: 0 8px 24px rgba(59, 183, 251, 0.3);">
                <i class="bi bi-book-fill" style="color: #fff; font-size: 1.2rem;"></i>
              </div>
              
              <!-- Title -->
              <div class="flex-grow-1">
                <h4 class="modal-title" style="color: #fff; font-weight: 800; font-size: 1.5rem; margin: 0; letter-spacing: -0.5px;">
                  Add Your Book
                </h4>
                <p style="color: #b0b3b8; font-size: 0.85rem; margin: 0.3rem 0 0; opacity: 0.9;">
                  Search for your book to auto-fill details, or add manually
                </p>
              </div>
              
              <!-- Close Button -->
              <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="color: #b0b3b8; font-size: 1.5rem; opacity: 0.8; background: none; border: none; padding: 0.5rem; margin: -0.5rem; transition: all 0.2s ease;">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
          </div>
        </div>
        
        <form id="add-book-form" method="POST" action="/api/books" enctype="multipart/form-data">
          <div class="modal-body" style="padding: 2rem; background: linear-gradient(135deg, #1a1b21, #23242a);">
            <!-- Enhanced Search Section -->
            <div class="search-section" style="background: rgba(35, 36, 42, 0.6); border: 1px solid rgba(120,130,150,.15); border-radius: 16px; padding: 1.5rem; margin-bottom: 2rem; backdrop-filter: blur(15px);">
              <div class="d-flex align-items-center mb-3">
                <div style="background: linear-gradient(135deg, #F6B443, #e09f3e); border-radius: 50%; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; margin-right: 0.75rem;">
                  <i class="bi bi-search" style="color: #fff; font-size: 0.9rem;"></i>
                </div>
                <h6 style="color: #fff; font-weight: 700; margin: 0; font-size: 1rem;">Smart Book Search</h6>
              </div>
              
              <div class="search-input-container" style="position: relative;">
                <div style="position: relative;">
                  <input type="text" id="book-search" class="form-control" placeholder="Search by title, author, or ISBN..." autocomplete="off"
                         style="background: rgba(35, 36, 42, 0.8); border: 1px solid rgba(120,130,150,.2); border-radius: 12px; padding: 0.8rem 1rem 0.8rem 3rem; color: #fff; font-size: 0.95rem; transition: all 0.3s ease;">
                  <i class="bi bi-search" style="position: absolute; left: 1rem; top: 50%; transform: translateY(-50%); color: #3BB7FB; font-size: 0.9rem;"></i>
                </div>
                <div id="search-results" class="search-results-dropdown"></div>
              </div>
              <small style="color: #b0b3b8; font-size: 0.8rem; margin-top: 0.5rem; display: block;">
                <i class="bi bi-lightbulb me-1"></i>
                Search to instantly fill book details from our database
              </small>
            </div>

            <!-- Book Details Form -->
            <div class="book-details-section">
              <div class="form-row">
                <div class="form-group col-md-8">
                  <label style="color: #fff; font-weight: 600; margin-bottom: 0.5rem; display: block;">
                    <i class="bi bi-bookmark me-1" style="color: #3BB7FB;"></i>
                    Book Title *
                  </label>
                  <input type="text" id="book-title" class="form-control" placeholder="Enter book title" name="title" required
                         style="background: rgba(35, 36, 42, 0.8); border: 1px solid rgba(120,130,150,.2); border-radius: 10px; padding: 0.75rem 1rem; color: #fff; font-size: 0.9rem;">
                </div>
                <div class="form-group col-md-4">
                  <label style="color: #fff; font-weight: 600; margin-bottom: 0.5rem; display: block; text-align: center;">
                    <i class="bi bi-image me-1" style="color: #F6B443;"></i>
                    Book Cover
                  </label>
                  <div class="upload-area" style="background: rgba(35, 36, 42, 0.6); border: 2px dashed rgba(120,130,150,.3); border-radius: 12px; padding: 1rem; text-align: center; transition: all 0.3s ease; cursor: pointer; position: relative; height: 120px; display: flex; align-items: center; justify-content: center;">
                    <img id="cover-preview" src="" alt="Book Cover" style="display: none; width: 100%; height: 100%; object-fit: cover; border-radius: 8px; position: absolute; top: 0; left: 0;">
                    <div id="upload-placeholder" style="color: #b0b3b8; text-align: center;">
                      <i class="bi bi-cloud-upload" style="font-size: 1.5rem; color: #3BB7FB; margin-bottom: 0.5rem; display: block;"></i>
                      <small style="font-size: 0.75rem;">Drop image or click</small>
                    </div>
                    <input type="file" accept="image/*" class="upload-input" name="cover" id="book-cover" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; cursor: pointer;">
                    <input type="hidden" id="book-image-url" name="imageUrl">
                  </div>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group col-md-6">
                  <label style="color: #fff; font-weight: 600; margin-bottom: 0.5rem; display: block;">
                    <i class="bi bi-person me-1" style="color: #3BB7FB;"></i>
                    Author *
                  </label>
                  <input type="text" class="form-control" placeholder="Author name" name="author" id="book-author" required
                         style="background: rgba(35, 36, 42, 0.8); border: 1px solid rgba(120,130,150,.2); border-radius: 10px; padding: 0.75rem 1rem; color: #fff; font-size: 0.9rem;">
                </div>
                <div class="form-group col-md-3">
                  <label style="color: #fff; font-weight: 600; margin-bottom: 0.5rem; display: block;">
                    <i class="bi bi-tag me-1" style="color: #F6B443;"></i>
                    Genre
                  </label>
                  <select class="form-control" name="genre" id="book-genre"
                          style="background: rgba(35, 36, 42, 0.8); border: 1px solid rgba(120,130,150,.2); border-radius: 10px; padding: 0.75rem 0.75rem; color: #b0b3b8; font-size: 0.85rem; height: 45px; line-height: 1.2; appearance: none; -webkit-appearance: none; -moz-appearance: none; background-image: url('data:image/svg+xml;charset=UTF-8,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%2712%27 height=%278%27 viewBox=%270 0 12 8%27%3e%3cpath fill=%27%233BB7FB%27 d=%27M6 8L0 0h12z%27/%3e%3c/svg%3e'); background-repeat: no-repeat; background-position: right 0.75rem center; background-size: 8px 6px; padding-right: 2rem;">
                    <option value="" selected>Choose...</option>
                    <option>Fiction</option>
                    <option>Non-fiction</option>
                    <option>Science</option>
                    <option>History</option>
                    <option>Biography</option>
                    <option>Mystery</option>
                    <option>Romance</option>
                    <option>Thriller</option>
                    <option>Fantasy</option>
                    <option>Self-Help</option>
                    <option>Business</option>
                    <option>Other</option>
                  </select>
                </div>
                <div class="form-group col-md-3">
                  <label style="color: #fff; font-weight: 600; margin-bottom: 0.5rem; display: block;">
                    <i class="bi bi-globe me-1" style="color: #059669;"></i>
                    Language
                  </label>
                  <select class="form-control" name="language" id="book-language"
                          style="background: rgba(35, 36, 42, 0.8); border: 1px solid rgba(120,130,150,.2); border-radius: 10px; padding: 0.75rem 0.75rem; color: #b0b3b8; font-size: 0.85rem; height: 45px; line-height: 1.2; appearance: none; -webkit-appearance: none; -moz-appearance: none; background-image: url('data:image/svg+xml;charset=UTF-8,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%2712%27 height=%278%27 viewBox=%270 0 12 8%27%3e%3cpath fill=%27%2359B259%27 d=%27M6 8L0 0h12z%27/%3e%3c/svg%3e'); background-repeat: no-repeat; background-position: right 0.75rem center; background-size: 8px 6px; padding-right: 2rem;">
                    <option value="" selected>Choose...</option>
                    <option>English</option>
                    <option>Arabic</option>
                    <option>French</option>
                    <option>Spanish</option>
                    <option>German</option>
                    <option>Italian</option>
                    <option>Other</option>
                  </select>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group col-md-4">
                  <label style="color: #fff; font-weight: 600; margin-bottom: 0.5rem; display: block;">
                    <i class="bi bi-calendar3 me-1" style="color: #3BB7FB;"></i>
                    Publication Year
                  </label>
                  <input type="number" class="form-control" placeholder="Year" name="year" id="book-year" min="1450" max="<%= new Date().getFullYear() %>"
                         style="background: rgba(35, 36, 42, 0.8); border: 1px solid rgba(120,130,150,.2); border-radius: 10px; padding: 0.75rem 1rem; color: #fff; font-size: 0.9rem;">
                </div>
                <div class="form-group col-md-4">
                  <label style="color: #fff; font-weight: 600; margin-bottom: 0.5rem; display: block;">
                    <i class="bi bi-upc me-1" style="color: #F6B443;"></i>
                    ISBN
                  </label>
                  <input type="text" class="form-control" placeholder="ISBN" name="isbn" id="book-isbn"
                         style="background: rgba(35, 36, 42, 0.8); border: 1px solid rgba(120,130,150,.2); border-radius: 10px; padding: 0.75rem 1rem; color: #fff; font-size: 0.9rem;">
                </div>
                <div class="form-group col-md-4">
                  <label style="color: #fff; font-weight: 600; margin-bottom: 0.5rem; display: block;">
                    <i class="bi bi-building me-1" style="color: #059669;"></i>
                    Publisher
                  </label>
                  <input type="text" class="form-control" placeholder="Publisher" name="publisher" id="book-publisher"
                         style="background: rgba(35, 36, 42, 0.8); border: 1px solid rgba(120,130,150,.2); border-radius: 10px; padding: 0.75rem 1rem; color: #fff; font-size: 0.9rem;">
                </div>
              </div>

              <div class="form-row">
                <div class="form-group col-md-6">
                  <label style="color: #fff; font-weight: 600; margin-bottom: 0.75rem; display: block;">
                    <i class="bi bi-star me-1" style="color: #F6B443;"></i>
                    Condition *
                  </label>
                  <div class="condition-options" style="background: rgba(35, 36, 42, 0.4); border-radius: 12px; padding: 1rem;">
                    <div class="d-flex flex-column gap-2">
                      <label class="condition-option" style="background: rgba(120,130,150,.1); border-radius: 8px; padding: 0.6rem 1rem; cursor: pointer; transition: all 0.2s ease; display: flex; align-items: center;">
                        <input type="radio" name="condition" value="New" checked style="margin-right: 0.75rem;">
                        <span style="color: #fff; font-weight: 500; flex-grow: 1;">New</span>
                        <span style="font-size: 1rem;">😀</span>
                      </label>
                      <label class="condition-option" style="background: rgba(120,130,150,.1); border-radius: 8px; padding: 0.6rem 1rem; cursor: pointer; transition: all 0.2s ease; display: flex; align-items: center;">
                        <input type="radio" name="condition" value="Excellent" style="margin-right: 0.75rem;">
                        <span style="color: #fff; font-weight: 500; flex-grow: 1;">Excellent</span>
                        <span style="font-size: 1rem;">🙂</span>
                      </label>
                      <label class="condition-option" style="background: rgba(120,130,150,.1); border-radius: 8px; padding: 0.6rem 1rem; cursor: pointer; transition: all 0.2s ease; display: flex; align-items: center;">
                        <input type="radio" name="condition" value="Good" style="margin-right: 0.75rem;">
                        <span style="color: #fff; font-weight: 500; flex-grow: 1;">Good</span>
                        <span style="font-size: 1rem;">😐</span>
                      </label>
                      <label class="condition-option" style="background: rgba(120,130,150,.1); border-radius: 8px; padding: 0.6rem 1rem; cursor: pointer; transition: all 0.2s ease; display: flex; align-items: center;">
                        <input type="radio" name="condition" value="Fair" style="margin-right: 0.75rem;">
                        <span style="color: #fff; font-weight: 500; flex-grow: 1;">Fair</span>
                        <span style="font-size: 1rem;">🙁</span>
                      </label>
                      <label class="condition-option" style="background: rgba(120,130,150,.1); border-radius: 8px; padding: 0.6rem 1rem; cursor: pointer; transition: all 0.2s ease; display: flex; align-items: center;">
                        <input type="radio" name="condition" value="Poor" style="margin-right: 0.75rem;">
                        <span style="color: #fff; font-weight: 500; flex-grow: 1;">Poor</span>
                        <span style="font-size: 1rem;">😢</span>
                      </label>
                    </div>
                  </div>
                </div>
                <div class="form-group col-md-6">
                  <label style="color: #fff; font-weight: 600; margin-bottom: 0.5rem; display: block;">
                    <i class="bi bi-chat-text me-1" style="color: #3BB7FB;"></i>
                    Description (Optional)
                  </label>
                  <textarea class="form-control" id="book-description" name="description" rows="6" placeholder="Brief description of the book..."
                            style="background: rgba(35, 36, 42, 0.8); border: 1px solid rgba(120,130,150,.2); border-radius: 10px; padding: 0.75rem 1rem; color: #fff; font-size: 0.9rem; resize: vertical;"></textarea>
                </div>
              </div>
            </div>
          </div>

          <!-- Enhanced Modal Footer -->
          <div class="modal-footer" style="background: linear-gradient(135deg, #23242a, #1E1F23); border-top: 1px solid rgba(120,130,150,.15); padding: 1.5rem 2rem; justify-content: space-between;">
            <button type="button" class="btn" data-dismiss="modal" 
                    style="background: rgba(120,130,150,.1); border: 1px solid rgba(120,130,150,.2); color: #b0b3b8; padding: 0.75rem 1.5rem; border-radius: 10px; font-weight: 600; transition: all 0.2s ease;">
              <i class="bi bi-x me-1"></i> Cancel
            </button>
            <button type="submit" class="btn" 
                    style="background: linear-gradient(135deg, #3BB7FB, #34a0e0); border: none; color: #fff; padding: 0.75rem 2rem; border-radius: 10px; font-weight: 700; box-shadow: 0 4px 16px rgba(59, 183, 251, 0.3); transition: all 0.3s ease;">
              <i class="bi bi-plus-circle me-1"></i> Add to Library
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

<!-- existing scripts -->
<script>
  // Pass server-side books to client
  window.initialBooks = (function(){
    try {
      var raw = document.getElementById('library-content').dataset.books || '[]';
      return JSON.parse(raw);
    } catch (e) { return []; }
  })();

  function renderBooks(bookList) {
    const grid = document.querySelector('.wishlist-grid-container .row');
    const empty = document.getElementById('empty-state');
    if (grid) grid.innerHTML = '';
    if (!bookList || bookList.length === 0) {
      if (empty) empty.style.display = 'block';
      return;
    }
    if (empty) empty.style.display = 'none';

    bookList.forEach(function(book){
      const col = document.createElement('div');
      col.className = 'col-6 col-sm-6 col-md-4 col-lg-3 col-xl-2 mb-4 book-card';
      col.setAttribute('data-title', (book.title || '').toLowerCase());
      col.setAttribute('data-author', (book.author || '').toLowerCase());

      const cardProfessional = document.createElement('div');
      cardProfessional.className = 'book-card-professional h-100';
      cardProfessional.style.cssText = 'background: linear-gradient(135deg, #23242a, #1E1F23); border: 1px solid rgba(120,130,150,.1); border-radius: 16px; padding: 1.25rem; transition: all 0.3s ease; position: relative; overflow: hidden;';

      // Book Cover Container
      const coverContainer = document.createElement('div');
      coverContainer.className = 'book-cover-container text-center mb-3';
      coverContainer.style.cssText = 'position: relative;';

      // Image or placeholder with better error handling and path processing
      let hasImage = null;
      if (book.coverUrl) {
        hasImage = book.coverUrl;
      } else if (book.imageUrl) {
        hasImage = book.imageUrl;
      } else if (book.image) {
        hasImage = book.image;
      } else if (book.cover) {
        // Handle uploaded files
        if (book.cover.startsWith('/uploads')) {
          hasImage = book.cover;
        } else if (book.cover.startsWith('uploads/')) {
          hasImage = '/' + book.cover;
        } else if (!book.cover.startsWith('http')) {
          hasImage = '/uploads/books/' + book.cover;
        } else {
          hasImage = book.cover;
        }
      }
      if (hasImage) {
        const img = document.createElement('img');
        img.className = 'book-cover-professional';
        img.alt = book.title || '';
        img.src = hasImage;
        img.style.cssText = 'width: 100%; max-width: 120px; height: 160px; object-fit: cover; border-radius: 10px; box-shadow: 0 6px 20px rgba(0,0,0,0.4); transition: transform 0.3s ease;';
        
        // Better error handling
        img.onerror = function() { 
          this.style.display = 'none'; 
          const placeholder = document.createElement('div');
          placeholder.className = 'book-cover-placeholder';
          placeholder.style.cssText = 'width: 120px; height: 160px; background: linear-gradient(135deg, #3BB7FB, #34a0e0); border-radius: 10px; display: flex; align-items: center; justify-content: center; margin: 0 auto; box-shadow: 0 6px 20px rgba(0,0,0,0.4);';
          placeholder.innerHTML = '<i class="bi bi-book text-white" style="font-size: 2.5rem;"></i>';
          this.parentNode.appendChild(placeholder);
        };
        coverContainer.appendChild(img);
      } else {
        const placeholder = document.createElement('div');
        placeholder.className = 'book-cover-placeholder';
        placeholder.style.cssText = 'width: 120px; height: 160px; background: linear-gradient(135deg, #3BB7FB, #34a0e0); border-radius: 10px; display: flex; align-items: center; justify-content: center; margin: 0 auto; box-shadow: 0 6px 20px rgba(0,0,0,0.4);';
        placeholder.innerHTML = '<i class="bi bi-book text-white" style="font-size: 2.5rem;"></i>';
        coverContainer.appendChild(placeholder);
      }

      // Quick Actions Overlay
      const quickActions = document.createElement('div');
      quickActions.className = 'quick-actions-overlay';
      quickActions.style.cssText = 'position: absolute; top: 8px; right: 8px; opacity: 0; transition: opacity 0.3s ease;';

      const removeBtn = document.createElement('button');
      removeBtn.className = 'btn btn-sm remove-book-btn';
      removeBtn.setAttribute('data-book-id', book._id || book.id || '');
      removeBtn.setAttribute('data-book-title', book.title || '');
      removeBtn.style.cssText = 'background: rgba(220, 53, 69, 0.9); border: none; border-radius: 50%; width: 28px; height: 28px; padding: 0; color: white; backdrop-filter: blur(10px);';
      removeBtn.innerHTML = '<i class="bi bi-x" style="font-size: 0.8rem;"></i>';

      quickActions.appendChild(removeBtn);
      coverContainer.appendChild(quickActions);

      // Book Info Container
      const infoContainer = document.createElement('div');
      infoContainer.className = 'book-info-professional';

      const h6 = document.createElement('h6');
      h6.className = 'book-title-professional';
      h6.style.cssText = 'color: #fff; font-weight: 600; font-size: 0.9rem; line-height: 1.3; margin-bottom: 0.5rem; height: 2.6rem; overflow: hidden; text-align: center; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; line-clamp: 2;';
      h6.textContent = book.title || 'Untitled';

      const author = document.createElement('p');
      author.className = 'book-author-professional';
      author.style.cssText = 'color: #3BB7FB; font-size: 0.75rem; font-weight: 500; text-align: center; margin-bottom: 1rem; opacity: 0.9;';
      author.textContent = book.author || 'Unknown';

      // Book Meta
      const meta = document.createElement('div');
      meta.className = 'book-meta text-center mb-3';
      const conditionBadge = document.createElement('small');
      conditionBadge.className = 'condition-badge';
      conditionBadge.style.cssText = 'color: #b0b3b8; font-size: 0.7rem; background: rgba(120,130,150,.1); padding: 0.2rem 0.6rem; border-radius: 8px; display: inline-block;';
      conditionBadge.innerHTML = '<i class="bi bi-star me-1"></i> ' + (book.condition || 'Good');
      meta.appendChild(conditionBadge);

      // Action Button
      const actionContainer = document.createElement('div');
      actionContainer.className = 'book-actions mt-auto';
      const details = document.createElement('a');
      details.className = 'btn btn-outline-primary w-100';
      details.href = '/books/' + (book._id || book.id || '');
      details.style.cssText = 'padding: 0.6rem; border-radius: 10px; font-weight: 600; font-size: 0.8rem; transition: all 0.3s ease; border-color: rgba(59, 183, 251, 0.5); background: transparent; text-decoration: none;';
      details.innerHTML = '<i class="bi bi-eye me-1"></i> View Details';
      actionContainer.appendChild(details);

      infoContainer.appendChild(h6);
      infoContainer.appendChild(author);
      infoContainer.appendChild(meta);
      infoContainer.appendChild(actionContainer);

      cardProfessional.appendChild(coverContainer);
      cardProfessional.appendChild(infoContainer);
      col.appendChild(cardProfessional);
      grid.appendChild(col);
    });

    // Update count badge
    const countBadge = document.querySelector('.count-badge span');
    if (countBadge) {
      const count = bookList.length;
      countBadge.innerHTML = `${count} <span style="color: #b0b3b8; font-weight: 500; margin-left: 0.2rem;">${count === 1 ? 'Book' : 'Books'}</span>`;
    }
  }

  // initial render + search
  document.addEventListener('DOMContentLoaded', function(){
    // Don't re-render books on load since they're already server-rendered
    // renderBooks(window.initialBooks);

    const input = document.getElementById('library-search');
    if (input) {
      input.addEventListener('input', function(){
        const q = this.value.trim().toLowerCase();
        const allCards = document.querySelectorAll('.wishlist-grid-container .col-6');
        
        if (!q) { 
          // Show all books when search is empty
          allCards.forEach(card => card.style.display = 'block');
          return; 
        }
        
        // Filter existing cards based on title and author text content
        allCards.forEach(card => {
          const titleElement = card.querySelector('.book-title-professional');
          const authorElement = card.querySelector('.book-author-professional');
          const title = titleElement ? titleElement.textContent.toLowerCase() : '';
          const author = authorElement ? authorElement.textContent.toLowerCase() : '';
          
          if (title.includes(q) || author.includes(q)) {
            card.style.display = 'block';
          } else {
            card.style.display = 'none';
          }
        });
      });
    }
  });

    // Add Book modal trigger and form submission
    document.addEventListener('DOMContentLoaded', function(){
      function showAddBookModal(e){
        e.preventDefault();
        $('#addBookModal').modal('show');
      }
      
      // Handle all add book buttons
      document.addEventListener('click', function(e) {
        const target = e.target.closest('a[href="/add-book"]');
        if (target) {
          e.preventDefault();
          showAddBookModal(e);
        }
      });

      // Google Books API Integration
      let searchTimeout;
      const bookSearchInput = document.getElementById('book-search');
      const searchResults = document.getElementById('search-results');
      
      // Ensure search results are appended to body for maximum z-index
      if (searchResults && searchResults.parentNode) {
        document.body.appendChild(searchResults);
      }
      
      if (bookSearchInput) {
        bookSearchInput.addEventListener('input', function() {
          const query = this.value.trim();
          
          clearTimeout(searchTimeout);
          
          if (query.length < 2) {
            hideSearchResults();
            return;
          }
          
          searchTimeout = setTimeout(() => {
            searchGoogleBooks(query);
          }, 300);
        });
        
        // Hide results when clicking outside
        document.addEventListener('click', function(e) {
          if (!e.target.closest('.search-input-container')) {
            hideSearchResults();
          }
        });
        
        // Reposition dropdown on scroll
        window.addEventListener('scroll', function() {
          if (searchResults.style.display === 'block') {
            const searchInput = document.getElementById('book-search');
            if (searchInput) {
              const rect = searchInput.getBoundingClientRect();
              searchResults.style.top = (rect.bottom + 5) + 'px';
              searchResults.style.left = rect.left + 'px';
              searchResults.style.zIndex = '2147483647';
            }
          }
        });
        
        // Reposition dropdown on window resize
        window.addEventListener('resize', function() {
          if (searchResults.style.display === 'block') {
            const searchInput = document.getElementById('book-search');
            if (searchInput) {
              const rect = searchInput.getBoundingClientRect();
              searchResults.style.top = (rect.bottom + 5) + 'px';
              searchResults.style.left = rect.left + 'px';
              searchResults.style.width = rect.width + 'px';
              searchResults.style.zIndex = '2147483647';
            }
          }
        });
      }
      
      async function searchGoogleBooks(query) {
        try {
          showSearchLoading();
          
          const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(query)}&maxResults=8&fields=items(id,volumeInfo(title,authors,publishedDate,publisher,description,imageLinks,industryIdentifiers,categories,language))`);
          const data = await response.json();
          
          if (data.items && data.items.length > 0) {
            displaySearchResults(data.items);
          } else {
            showNoResults();
          }
        } catch (error) {
          console.error('Error searching books:', error);
          showSearchError();
        }
      }
      
      function showSearchLoading() {
        searchResults.innerHTML = '<div class="search-loading"><i class="bi bi-hourglass-split me-2"></i>Searching books...</div>';
        
        // Position dropdown using getBoundingClientRect for accurate positioning
        const searchInput = document.getElementById('book-search');
        if (searchInput) {
          const rect = searchInput.getBoundingClientRect();
          
          // Force positioning and MAXIMUM z-index
          searchResults.style.position = 'fixed';
          searchResults.style.top = (rect.bottom + 5) + 'px';
          searchResults.style.left = rect.left + 'px';
          searchResults.style.width = rect.width + 'px';
          searchResults.style.zIndex = '2147483647'; // Maximum possible z-index
          searchResults.style.pointerEvents = 'auto';
          searchResults.style.background = '#1a1b21';
          searchResults.style.border = '1px solid rgba(120,130,150,.2)';
        }
        
        searchResults.style.display = 'block';
      }
      
      function showNoResults() {
        searchResults.innerHTML = '<div class="search-no-results"><i class="bi bi-search me-2"></i>No books found. Try a different search term.</div>';
        
        // Position dropdown using getBoundingClientRect for accurate positioning
        const searchInput = document.getElementById('book-search');
        if (searchInput) {
          const rect = searchInput.getBoundingClientRect();
          
          // Force positioning and MAXIMUM z-index
          searchResults.style.position = 'fixed';
          searchResults.style.top = (rect.bottom + 5) + 'px';
          searchResults.style.left = rect.left + 'px';
          searchResults.style.width = rect.width + 'px';
          searchResults.style.zIndex = '2147483647'; // Maximum possible z-index
          searchResults.style.pointerEvents = 'auto';
          searchResults.style.background = '#1a1b21';
          searchResults.style.border = '1px solid rgba(120,130,150,.2)';
        }
        
        searchResults.style.display = 'block';
      }
      
      function showSearchError() {
        searchResults.innerHTML = '<div class="search-no-results"><i class="bi bi-exclamation-triangle me-2"></i>Error searching books. Please try again.</div>';
        
        // Position dropdown using getBoundingClientRect for accurate positioning
        const searchInput = document.getElementById('book-search');
        if (searchInput) {
          const rect = searchInput.getBoundingClientRect();
          
          // Force positioning and MAXIMUM z-index
          searchResults.style.position = 'fixed';
          searchResults.style.top = (rect.bottom + 5) + 'px';
          searchResults.style.left = rect.left + 'px';
          searchResults.style.width = rect.width + 'px';
          searchResults.style.zIndex = '2147483647'; // Maximum possible z-index
          searchResults.style.pointerEvents = 'auto';
          searchResults.style.background = '#1a1b21';
          searchResults.style.border = '1px solid rgba(120,130,150,.2)';
        }
        
        searchResults.style.display = 'block';
      }
      
      function hideSearchResults() {
        searchResults.style.display = 'none';
      }
      
      function displaySearchResults(books) {
        const resultsHtml = books.map(book => {
          const volumeInfo = book.volumeInfo;
          const title = volumeInfo.title || 'Unknown Title';
          const authors = volumeInfo.authors ? volumeInfo.authors.join(', ') : 'Unknown Author';
          const publishedDate = volumeInfo.publishedDate ? volumeInfo.publishedDate.substring(0, 4) : '';
          const thumbnail = volumeInfo.imageLinks?.thumbnail || volumeInfo.imageLinks?.smallThumbnail;
          
          return `
            <div class="search-result-item" data-book='${JSON.stringify(book).replace(/'/g, "&#39;")}'>
              <div class="search-result-cover">
                ${thumbnail ? `<img src="${thumbnail}" alt="${title}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 4px;">` : '<i class="bi bi-book"></i>'}
              </div>
              <div class="search-result-info">
                <div class="search-result-title">${title}</div>
                <div class="search-result-author">${authors}</div>
                ${publishedDate ? `<div class="search-result-year">${publishedDate}</div>` : ''}
              </div>
            </div>
          `;
        }).join('');
        
        searchResults.innerHTML = resultsHtml;
        
        // Position dropdown using getBoundingClientRect for accurate positioning
        const searchInput = document.getElementById('book-search');
        if (searchInput) {
          const rect = searchInput.getBoundingClientRect();
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          
          // Force positioning and MAXIMUM z-index
          searchResults.style.position = 'fixed';
          searchResults.style.top = (rect.bottom + 5) + 'px';
          searchResults.style.left = rect.left + 'px';
          searchResults.style.width = rect.width + 'px';
          searchResults.style.zIndex = '2147483647'; // Maximum possible z-index
          searchResults.style.pointerEvents = 'auto';
          searchResults.style.background = '#1a1b21';
          searchResults.style.border = '1px solid rgba(120,130,150,.2)';
        }
        
        searchResults.style.display = 'block';
        
        // Add click handlers for search results
        searchResults.querySelectorAll('.search-result-item').forEach(item => {
          item.addEventListener('click', function() {
            const bookData = JSON.parse(this.getAttribute('data-book').replace(/&#39;/g, "'"));
            populateBookForm(bookData);
            hideSearchResults();
            bookSearchInput.value = '';
          });
        });
      }
      
      function populateBookForm(book) {
        const volumeInfo = book.volumeInfo;
        
        // Fill form fields
        document.getElementById('book-title').value = volumeInfo.title || '';
        document.getElementById('book-author').value = volumeInfo.authors ? volumeInfo.authors.join(', ') : '';
        document.getElementById('book-publisher').value = volumeInfo.publisher || '';
        document.getElementById('book-year').value = volumeInfo.publishedDate ? volumeInfo.publishedDate.substring(0, 4) : '';
        document.getElementById('book-description').value = volumeInfo.description ? volumeInfo.description.substring(0, 500) : '';
        
        // Set language
        const languageSelect = document.getElementById('book-language');
        if (volumeInfo.language) {
          const languageMap = {
            'en': 'English',
            'ar': 'Arabic',
            'fr': 'French',
            'es': 'Spanish',
            'de': 'German',
            'it': 'Italian'
          };
          const language = languageMap[volumeInfo.language] || 'Other';
          const option = Array.from(languageSelect.options).find(opt => opt.value === language);
          if (option) {
            languageSelect.value = language;
          }
        }
        
        // Set genre based on categories
        const genreSelect = document.getElementById('book-genre');
        if (volumeInfo.categories && volumeInfo.categories.length > 0) {
          const category = volumeInfo.categories[0].toLowerCase();
          const genreMap = {
            'fiction': 'Fiction',
            'biography': 'Biography',
            'history': 'History',
            'science': 'Science',
            'business': 'Business',
            'self-help': 'Self-Help',
            'mystery': 'Mystery',
            'romance': 'Romance',
            'thriller': 'Thriller',
            'fantasy': 'Fantasy'
          };
          
          for (const [key, value] of Object.entries(genreMap)) {
            if (category.includes(key)) {
              const option = Array.from(genreSelect.options).find(opt => opt.value === value);
              if (option) {
                genreSelect.value = value;
                break;
              }
            }
          }
        }
        
        // Set ISBN
        if (volumeInfo.industryIdentifiers) {
          const isbn = volumeInfo.industryIdentifiers.find(id => id.type === 'ISBN_13') || 
                      volumeInfo.industryIdentifiers.find(id => id.type === 'ISBN_10');
          if (isbn) {
            document.getElementById('book-isbn').value = isbn.identifier;
          }
        }
        
        // Set cover image
        const imageUrl = volumeInfo.imageLinks?.thumbnail || volumeInfo.imageLinks?.smallThumbnail;
        if (imageUrl) {
          // Convert http to https for security
          const httpsImageUrl = imageUrl.replace('http://', 'https://');
          document.getElementById('book-image-url').value = httpsImageUrl;
          showImagePreview(httpsImageUrl);
        }
        
        // Show success message
        showFormMessage('✅ Book information auto-filled successfully!', 'success');
      }
      
      function showImagePreview(imageUrl) {
        const preview = document.getElementById('cover-preview');
        const placeholder = document.getElementById('upload-placeholder');
        
        preview.src = imageUrl;
        preview.classList.add('visible');
        placeholder.classList.add('hidden');
      }
      
      function hideImagePreview() {
        const preview = document.getElementById('cover-preview');
        const placeholder = document.getElementById('upload-placeholder');
        
        preview.classList.remove('visible');
        placeholder.classList.remove('hidden');
        document.getElementById('book-image-url').value = '';
      }
      
      // Handle manual file upload
      const fileInput = document.getElementById('book-cover');
      if (fileInput) {
        fileInput.addEventListener('change', function(e) {
          if (e.target.files && e.target.files[0]) {
            const file = e.target.files[0];
            const reader = new FileReader();
            
            reader.onload = function(e) {
              showImagePreview(e.target.result);
              // Clear the Google Books image URL since user is uploading their own
              document.getElementById('book-image-url').value = '';
            };
            
            reader.readAsDataURL(file);
          } else {
            hideImagePreview();
          }
        });
      }
      
      function showFormMessage(message, type = 'info') {
        // Remove existing messages
        const existingMessage = document.querySelector('.form-message');
        if (existingMessage) {
          existingMessage.remove();
        }
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `form-message alert alert-${type === 'success' ? 'success' : 'info'} mt-2`;
        messageDiv.style.cssText = 'font-size: 0.85rem; padding: 0.5rem 0.75rem; margin-bottom: 0;';
        messageDiv.textContent = message;
        
        const searchContainer = document.querySelector('.search-input-container');
        searchContainer.appendChild(messageDiv);
        
        // Auto-remove after 3 seconds
        setTimeout(() => {
          if (messageDiv.parentNode) {
            messageDiv.remove();
          }
        }, 3000);
      }

      // Handle form submission
      const addBookForm = document.getElementById('add-book-form');
      if (addBookForm) {
        addBookForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          const submitBtn = addBookForm.querySelector('button[type="submit"]');
          const originalText = submitBtn.innerHTML;
          
          // Show loading state
          submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm mr-2"></span>Adding Book...';
          submitBtn.disabled = true;
          
          try {
            const formData = new FormData(addBookForm);
            
            // If there's a Google Books image URL and no file upload, use the URL
            const imageUrl = document.getElementById('book-image-url').value;
            const fileInput = document.getElementById('book-cover');
            
            if (imageUrl && (!fileInput.files || fileInput.files.length === 0)) {
              formData.append('imageUrl', imageUrl);
            }
            
            const response = await fetch('/api/books', {
              method: 'POST',
              body: formData
            });
            
            const result = await response.json();
            
            if (result.success) {
              // Show success message
              showMessage('success', result.message || 'Book added successfully!');
              
              // Close modal
              $('#addBookModal').modal('hide');
              
              // Reset form
              addBookForm.reset();
              hideImagePreview();
              
              // Reload page to show the new book
              setTimeout(() => {
                window.location.reload();
              }, 1000);
              
            } else {
              showMessage('error', result.message || 'Failed to add book');
            }
            
          } catch (error) {
            console.error('Error adding book:', error);
            showMessage('error', 'Failed to add book. Please try again.');
          } finally {
            // Reset button state
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
          }
        });
      }
      
      // Reset form when modal is closed
      $('#addBookModal').on('hidden.bs.modal', function() {
        const form = document.getElementById('add-book-form');
        if (form) {
          form.reset();
          hideImagePreview();
          hideSearchResults();
          document.getElementById('book-search').value = '';
          
          // Remove any form messages
          const existingMessage = document.querySelector('.form-message');
          if (existingMessage) {
            existingMessage.remove();
          }
        }
      });
    });

    // Message display function
    function showMessage(type, message) {
      // Create message container if it doesn't exist
      let messageContainer = document.getElementById('messageContainer');
      if (!messageContainer) {
        messageContainer = document.createElement('div');
        messageContainer.id = 'messageContainer';
        messageContainer.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 9999; max-width: 400px;';
        document.body.appendChild(messageContainer);
      }
      
      const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
      const icon = type === 'success' ? '✅' : '❌';
      
      const messageHtml = `
        <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
          ${icon} ${message}
          <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
      `;
      
      messageContainer.innerHTML = messageHtml;
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        const alert = messageContainer.querySelector('.alert');
        if (alert) {
          $(alert).alert('close');
        }
      }, 5000);
    }

    // Remove book functionality
    document.addEventListener('click', function(e) {
      if (e.target.closest('.remove-book-btn')) {
        e.preventDefault();
        const btn = e.target.closest('.remove-book-btn');
        const bookId = btn.getAttribute('data-book-id');
        const bookTitle = btn.getAttribute('data-book-title');
        
        // Confirm deletion
        if (confirm(`Are you sure you want to remove "${bookTitle}" from your library?`)) {
          removeBook(bookId, btn);
        }
      }
    });

    // Remove book function
    async function removeBook(bookId, buttonElement) {
      try {
        // Show loading state
        const originalHTML = buttonElement.innerHTML;
        buttonElement.innerHTML = '<i class="bi bi-hourglass-split"></i>';
        buttonElement.disabled = true;

        const response = await fetch(`/api/books/${bookId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const result = await response.json();
        
        if (response.ok && result.success) {
          // Remove the book card from the DOM
          const bookCard = buttonElement.closest('.book-card');
          if (bookCard) {
            bookCard.style.transition = 'opacity 0.3s ease';
            bookCard.style.opacity = '0';
            setTimeout(() => {
              bookCard.remove();
              updateLibraryStats();
              
              // Check if library is now empty
              const remainingBooks = document.querySelectorAll('.book-card');
              if (remainingBooks.length === 0) {
                location.reload(); // Reload to show empty state
              }
            }, 300);
          }
          
          showMessage('success', `"${result.bookTitle || 'Book'}" has been removed from your library`);
        } else {
          showMessage('error', result.message || 'Failed to remove book');
          // Reset button state on error
          buttonElement.innerHTML = originalHTML;
          buttonElement.disabled = false;
        }
        
      } catch (error) {
        console.error('Error removing book:', error);
        showMessage('error', 'Failed to remove book. Please try again.');
        // Reset button state on error
        buttonElement.innerHTML = originalHTML;
        buttonElement.disabled = false;
      }
    }

    // Update library statistics after book removal
    function updateLibraryStats() {
      const totalBooks = document.querySelectorAll('.book-card').length;
      const totalStat = document.getElementById('stat-total');
      if (totalStat) {
        totalStat.textContent = totalBooks;
      }
    }
  </script>

<!-- Submit handler: Enhanced form submission with proper image handling -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const addBookForm = document.getElementById('add-book-form');
  addBookForm.addEventListener('submit', async function(e) {
    e.preventDefault();

    const submitBtn = addBookForm.querySelector('button[type="submit"]');
    const originalText = submitBtn.innerHTML;
    
    // Show loading state
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Adding Book...';
    submitBtn.disabled = true;

    try {
      const fd = new FormData(addBookForm);
      let payload = Object.fromEntries(fd.entries());

      // Handle image - either from Google Books or file upload
      const hasFileUpload = payload.cover && payload.cover.size > 0;
      const hasGoogleBooksImage = payload.imageUrl && payload.imageUrl.trim();

      if (hasFileUpload) {
        // File upload case - send FormData
        const response = await fetch('/books', {
          method: 'POST',
          body: fd
        });
        
        const json = await response.json();
        if (json.ok || response.ok) {
          showMessage('success', '✅ Book added successfully with your uploaded image!');
          $('#addBookModal').modal('hide');
          setTimeout(() => location.reload(), 1000);
        } else {
          throw new Error(json.message || 'Failed to add book');
        }
      } else {
        // Google Books image or no image case - send JSON
        delete payload.cover; // Remove empty file field
        if (payload.year) payload.year = Number(payload.year);

        const response = await fetch('/books', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const json = await response.json();
        if (json.ok || response.ok) {
          const imageSource = hasGoogleBooksImage ? 'from Google Books' : '';
          showMessage('success', `✅ Book added successfully ${imageSource}!`);
          $('#addBookModal').modal('hide');
          setTimeout(() => location.reload(), 1000);
        } else {
          throw new Error(json.message || 'Failed to add book');
        }
      }
    } catch (error) {
      console.error('Error adding book:', error);
      showMessage('error', '❌ ' + (error.message || 'Failed to add book. Please try again.'));
    } finally {
      // Restore button state
      submitBtn.innerHTML = originalText;
      submitBtn.disabled = false;
    }
  });
});
</script>

<script>
  document.querySelectorAll('input[name="condition"]').forEach(function(radio){
    radio.addEventListener('change', function(){
      document.querySelectorAll('.condition-emoji').forEach(function(emoji){ emoji.style.opacity = '0.5'; });
      var selected = this.parentElement.querySelector('.condition-emoji');
      if(selected) selected.style.opacity = '1';
    });
  });
</script>

<!-- Google Books API Image Fetching for Library -->
<script>
async function loadLibraryBookImages() {
    const bookCards = document.querySelectorAll('.book-card-professional');
    
    for (const card of bookCards) {
        const title = card.querySelector('.book-title-professional')?.textContent?.trim();
        const author = card.querySelector('.book-author-professional')?.textContent?.trim();
        const coverContainer = card.querySelector('.book-cover-container');
        
        if (!title || !author || !coverContainer) continue;
        
        try {
            // Search for book using title + author
            const searchQuery = (title + ' ' + author).replace(/[^\w\s]/g, '').trim();
            const response = await fetch('https://www.googleapis.com/books/v1/volumes?q=' + encodeURIComponent(searchQuery) + '&maxResults=1');
            const data = await response.json();
            
            if (data.items && data.items.length > 0) {
                const book = data.items[0].volumeInfo;
                const imageUrl = book.imageLinks?.thumbnail || book.imageLinks?.smallThumbnail;
                
                if (imageUrl) {
                    const bookId = card.querySelector('.remove-book-btn')?.dataset.bookId || '';
                    
                    // Replace placeholder with real image
                    coverContainer.innerHTML = 
                        '<img src="' + imageUrl + '" class="book-cover-professional" alt="' + title.replace(/"/g, '&quot;') + '" ' +
                        'style="width: 100%; max-width: 120px; height: 160px; object-fit: cover; border-radius: 10px; box-shadow: 0 6px 20px rgba(0,0,0,0.4); transition: transform 0.3s ease;">' +
                        '<div class="quick-actions-overlay" style="position: absolute; top: 8px; right: 8px; opacity: 0; transition: opacity 0.3s ease;">' +
                            '<button class="btn btn-sm remove-book-btn" ' +
                                    'data-book-id="' + bookId + '" ' +
                                    'data-book-title="' + title.replace(/"/g, '&quot;') + '"' +
                                    'style="background: rgba(220, 53, 69, 0.9); border: none; border-radius: 50%; width: 28px; height: 28px; padding: 0; color: white; backdrop-filter: blur(10px);">' +
                                '<i class="bi bi-x" style="font-size: 0.8rem;"></i>' +
                            '</button>' +
                        '</div>';
                }
            }
        } catch (error) {
            console.error('Error fetching book image for:', title, error);
        }
        
        // Small delay to avoid overwhelming the API
        await new Promise(resolve => setTimeout(resolve, 100));
    }
}

// Load images when page is ready
document.addEventListener('DOMContentLoaded', function() {
    loadLibraryBookImages();
});
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>

<!-- Include Navbar Chat System -->
<script src="/socket.io/socket.io.js"></script>
<script src="/js/navbar-chat.js"></script>

</body>
</html>

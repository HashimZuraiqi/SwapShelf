<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Swap Matcher | BookSwap</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <!-- Navbar Chat System CSS -->
    <link rel="stylesheet" href="/css/navbar-chat.css">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:700,600,400&display=swap" rel="stylesheet">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <style>
        /* ================== MODERN SWAP MATCHER STYLES ================== */
        
        /* Root Variables for Consistency */
        :root {
            --primary-color: #3BB7FB;
            --primary-dark: #2A9FE8;
            --secondary-color: #F6B443;
            --background-dark: #18191E;
            --card-background: #232529;
            --border-color: rgba(59, 183, 251, 0.15);
            --text-primary: #ffffff;
            --text-secondary: #b0b3b8;
            --text-muted: #8a8e94;
            --success-color: #28a745;
            --warning-color: #F6B443;
            --danger-color: #dc3545;
            --shadow-light: 0 2px 10px rgba(0, 0, 0, 0.1);
            --shadow-medium: 0 4px 20px rgba(0, 0, 0, 0.15);
            --shadow-heavy: 0 8px 30px rgba(0, 0, 0, 0.25);
            --border-radius: 12px;
            --border-radius-lg: 20px;
            --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        /* Global Reset and Base Styles */
        * {
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #18191E, #15181D, #0D0E10);
            background-repeat: no-repeat;
            background-attachment: fixed;
            color: var(--text-primary);
            font-family: 'Montserrat', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
        }

        /* Main Container - Only for main content, not navbar */
        .swap-matcher-main {
            min-height: 100vh;
            padding: 1rem 0;
        }

        main.container-fluid {
            max-width: 1400px;
            margin: 0 auto;
            padding-left: 1rem;
            padding-right: 1rem;
        }

        /* Hero Section */
        .welcome-hero {
            background: linear-gradient(135deg, #1E1F23 0%, #2A2D35 100%);
            border: 1px solid rgba(59, 183, 251, 0.15);
            border-radius: var(--border-radius-lg);
            padding: 2.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
        }

        .welcome-hero::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(59, 183, 251, 0.08) 0%, rgba(246, 180, 67, 0.05) 100%);
            opacity: 1;
            pointer-events: none;
        }

        .welcome-hero .container {
            position: relative;
            z-index: 1;
        }

        .hero-title {
            font-size: 2.5rem;
            font-weight: 700;
            color: #ffffff;
            line-height: 1.2;
        }

        .hero-subtitle {
            font-size: 1.125rem;
            color: rgba(255, 255, 255, 0.9);
            line-height: 1.6;
        }

        .gradient-text {
            background: linear-gradient(135deg, var(--primary-color) 0%, rgba(59, 183, 251, 0.8) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .swap-stats {
            background: rgba(35, 37, 41, 0.6);
            border-radius: var(--border-radius);
            padding: 1.5rem;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(59, 183, 251, 0.2);
        }

        /* Navigation Tabs */
        .swap-tabs-container {
            margin-bottom: 0;
            padding: 0;
        }

        /* Swap Tabs Styling - Scoped to swap tabs only */
        .swap-tabs-container .nav-pills {
            background: var(--card-background);
            border-radius: var(--border-radius);
            padding: 0.5rem;
            margin-bottom: 1rem;
            box-shadow: var(--shadow-light);
            border: 1px solid var(--border-color);
        }
        
        .swap-tabs-container .nav-pills .nav-link {
            border-radius: var(--border-radius) !important;
            margin: 0 0.25rem !important;
            padding: 0.75rem 1.25rem !important;
            transition: var(--transition-smooth) !important;
            color: var(--text-secondary) !important;
            background: transparent !important;
            border: 1px solid transparent !important;
            font-weight: 500;
            font-size: 0.9rem;
            white-space: nowrap;
        }
        
        .swap-tabs-container .nav-pills .nav-link:hover {
            background: rgba(59, 183, 251, 0.1) !important;
            color: var(--primary-color) !important;
            transform: translateY(-1px);
            border-color: rgba(59, 183, 251, 0.2) !important;
        }
        
        .swap-tabs-container .nav-pills .nav-link.active {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark)) !important;
            border-color: var(--primary-color) !important;
            color: white !important;
            box-shadow: 0 4px 15px rgba(59, 183, 251, 0.3);
            transform: translateY(-1px);
        }

        .swap-tabs-container .nav-pills .nav-link .badge {
            background: rgba(59, 183, 251, 0.2);
            color: inherit;
            padding: 0.2rem 0.5rem;
            border-radius: 10px;
            font-size: 0.7rem;
            font-weight: 600;
            margin-left: 0.5rem;
        }
        
        .swap-tabs-container .nav-pills .nav-link.active .badge {
            background: rgba(59, 183, 251, 0.4);
        }

        /* Tab Content */
        .tab-content {
            margin-top: 0 !important;
            padding-top: 0 !important;
        }
        
        .tab-pane {
            display: none !important;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.3s ease-in-out;
            padding-top: 0 !important;
        }

        .tab-pane.show.active {
            display: block !important;
            opacity: 1;
            transform: translateY(0);
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Sub Tabs (My Requests) */
        .sub-tabs-nav {
            background: rgba(35, 37, 41, 0.6);
            border-radius: var(--border-radius);
            padding: 0.5rem;
            margin-bottom: 1.5rem;
            border: 1px solid var(--border-color);
        }

        .sub-tabs-nav .nav-link {
            background: transparent !important;
            color: var(--text-secondary) !important;
            border-radius: var(--border-radius) !important;
            padding: 0.6rem 1rem !important;
            margin: 0 0.25rem !important;
            transition: var(--transition-smooth) !important;
            border: 1px solid transparent !important;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .sub-tabs-nav .nav-link:hover {
            background: rgba(59, 183, 251, 0.08) !important;
            color: var(--primary-color) !important;
            border-color: rgba(59, 183, 251, 0.2) !important;
        }

        .sub-tabs-nav .nav-link.active {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark)) !important;
            color: white !important;
            border-color: transparent !important;
            box-shadow: 0 2px 8px rgba(59, 183, 251, 0.3);
        }

        /* Cards and Sections */
        .card-modern {
            background: linear-gradient(135deg, #1E1F23 0%, #2A2D35 100%);
            backdrop-filter: blur(10px);
            border-radius: var(--border-radius);
            border: 1px solid rgba(59, 183, 251, 0.15);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: var(--transition-smooth);
            overflow: hidden;
            margin-bottom: 1rem;
        }

        .card-modern:hover {
            border-color: rgba(59, 183, 251, 0.3);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
            transform: translateY(-2px);
        }

        .card-modern .card-header {
            background: rgba(59, 183, 251, 0.05);
            border-bottom: 1px solid rgba(59, 183, 251, 0.15);
            padding: 1.25rem 1.5rem;
        }

        .card-modern .card-body {
            padding: 1.5rem;
        }

        /* Buttons */
        .btn-modern {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            border: none;
            color: white;
            padding: 0.6rem 1.2rem;
            border-radius: var(--border-radius);
            font-weight: 600;
            font-size: 0.875rem;
            transition: var(--transition-smooth);
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }

        .btn-modern:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(59, 183, 251, 0.4);
            color: white;
            text-decoration: none;
        }

        .btn-modern:focus {
            box-shadow: 0 0 0 3px rgba(59, 183, 251, 0.25);
            outline: none;
        }

        .btn-modern-outline {
            background: transparent;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
            padding: 0.75rem 1.5rem;
            border-radius: var(--border-radius);
            font-weight: 600;
            font-size: 0.875rem;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: var(--transition-smooth);
            cursor: pointer;
        }

        .btn-modern-outline:hover {
            background: var(--primary-color);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(59, 183, 251, 0.4);
            text-decoration: none;
        }

        .btn-modern-outline:focus {
            box-shadow: 0 0 0 3px rgba(59, 183, 251, 0.25);
            outline: none;
        }

        .btn-outline-modern {
            background: transparent;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius);
            font-weight: 500;
            font-size: 0.875rem;
            transition: var(--transition-smooth);
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-outline-modern:hover {
            background: var(--primary-color);
            color: white;
            transform: translateY(-1px);
        }

        /* Search and Form Controls */
        .search-input-group {
            position: relative;
            display: flex;
            align-items: center;
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            color: var(--text-muted);
            z-index: 2;
            font-size: 1rem;
        }

        .form-control-modern {
            background: rgba(35, 37, 41, 0.6);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            color: var(--text-primary);
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            font-size: 0.875rem;
            transition: var(--transition-smooth);
            width: 100%;
        }

        .form-control-modern::placeholder {
            color: var(--text-muted);
        }

        .form-control-modern:focus {
            outline: none;
            border-color: var(--primary-color);
            background: rgba(35, 37, 41, 0.8);
            box-shadow: 0 0 0 3px rgba(59, 183, 251, 0.15);
        }

        .form-control-modern:hover {
            border-color: rgba(59, 183, 251, 0.3);
            background: rgba(35, 37, 41, 0.7);
        }

        /* Tab Content Layout */
        .tab-content {
            margin-top: 1.5rem;
            padding-top: 0;
        }

        .tab-pane {
            padding: 0;
            margin: 0;
        }

        .discovery-section {
            margin-bottom: 2rem;
        }

        /* Enhanced spacing for sections */
        .card-modern + .card-modern {
            margin-top: 1.5rem;
        }

        .section-spacing {
            margin-bottom: 2rem;
        }

        /* Prevent unwanted gaps */
        .swap-tabs-container .nav-tabs {
            margin-bottom: 0;
        }

        .swap-tabs-container .nav-pills {
            margin-bottom: 1rem;
        }

        /* Grid improvements */
        .books-grid, .swap-cards-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
            padding: 1rem 0;
        }

        .row.align-items-center {
            margin-bottom: 1rem;
        }

        /* Swap Cards */
        .swap-card {
            background: linear-gradient(135deg, #1E1F23 0%, #2A2D35 100%);
            border-radius: var(--border-radius);
            border: 1px solid rgba(59, 183, 251, 0.15);
            transition: var(--transition-smooth);
            overflow: hidden;
            margin-bottom: 1rem;
        }

        .swap-card:hover {
            border-color: rgba(59, 183, 251, 0.3);
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .swap-card-header {
            background: rgba(59, 183, 251, 0.05);
            padding: 1rem 1.25rem;
            border-bottom: 1px solid rgba(59, 183, 251, 0.15);
        }

        .swap-card-body {
            padding: 1.25rem;
        }

        /* Status Badges */
        .status-badge {
            padding: 0.4rem 0.8rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-pending {
            background: rgba(255, 193, 7, 0.15);
            color: var(--warning-color);
            border: 1px solid rgba(255, 193, 7, 0.3);
        }

        .status-accepted,
        .status-completed {
            background: rgba(40, 167, 69, 0.15);
            color: var(--success-color);
            border: 1px solid rgba(40, 167, 69, 0.3);
        }

        .status-cancelled,
        .status-declined {
            background: rgba(220, 53, 69, 0.15);
            color: var(--danger-color);
            border: 1px solid rgba(220, 53, 69, 0.3);
        }

        .status-in-progress {
            background: rgba(23, 162, 184, 0.15);
            color: #17a2b8;
            border: 1px solid rgba(23, 162, 184, 0.3);
        }

        /* Book Swap Cards */
        .book-swap-card {
            background: linear-gradient(135deg, #1E1F23 0%, #2A2D35 100%);
            border-radius: var(--border-radius);
            border: 1px solid rgba(59, 183, 251, 0.15);
            transition: var(--transition-smooth);
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .book-swap-card:hover {
            border-color: rgba(59, 183, 251, 0.3);
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .book-swap-card.canceled {
            opacity: 0.7;
            border-color: rgba(220, 53, 69, 0.2);
        }

        .swap-book-images {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1.5rem;
            background: rgba(59, 183, 251, 0.03);
            border-bottom: 1px solid rgba(59, 183, 251, 0.15);
        }

        .book-image-wrapper {
            position: relative;
            text-align: center;
            flex: 1;
        }

        .swap-book-img {
            width: 80px;
            height: 120px;
            object-fit: cover;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transition: var(--transition-smooth);
        }

        .book-swap-card:hover .swap-book-img {
            transform: scale(1.05);
        }

        .book-label {
            position: absolute;
            bottom: -8px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--primary-color);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.7rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            box-shadow: 0 2px 8px rgba(59, 183, 251, 0.3);
        }

        .book-label.success {
            background: var(--success-color);
            box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
        }

        .swap-arrow {
            margin: 0 1rem;
            color: var(--primary-color);
            font-size: 1.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .swap-card-body {
            padding: 1.25rem;
        }

        .swap-partner {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .swap-partner i {
            font-size: 1.2rem;
        }

        .swap-actions {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .swap-actions .btn {
            border-radius: var(--border-radius);
            font-weight: 500;
            transition: var(--transition-smooth);
        }

        .swap-actions .btn:hover {
            transform: translateY(-1px);
        }

        /* Discovery Books Grid */
        .discovery-books-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1.5rem;
            padding: 1rem 0;
        }

        .discovery-book-card {
            background: linear-gradient(135deg, #1E1F23 0%, #2A2D35 100%);
            border-radius: var(--border-radius);
            border: 1px solid rgba(59, 183, 251, 0.15);
            transition: var(--transition-smooth);
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .discovery-book-card:hover {
            border-color: rgba(59, 183, 251, 0.3);
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .discovery-book-image {
            position: relative;
            padding: 1rem;
            text-align: center;
            background: rgba(59, 183, 251, 0.03);
        }

        .discovery-book-cover {
            width: 100%;
            max-width: 120px;
            height: 160px;
            object-fit: cover;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transition: var(--transition-smooth);
        }

        .discovery-book-card:hover .discovery-book-cover {
            transform: scale(1.05);
        }

        .discovery-book-info {
            padding: 1.25rem;
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }

        .discovery-book-title {
            font-size: 1rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
            line-height: 1.3;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .discovery-book-author {
            color: var(--text-secondary);
            font-size: 0.85rem;
            margin-bottom: 1rem;
        }

        .discovery-book-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .discovery-genre-badge {
            background: rgba(59, 183, 251, 0.15);
            color: var(--primary-color);
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.7rem;
            font-weight: 500;
        }

        .discovery-condition {
            color: var(--success-color);
            font-size: 0.75rem;
            font-weight: 600;
        }

        .discovery-owner {
            color: var(--text-secondary);
            font-size: 0.8rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .discovery-swap-btn {
            width: 100%;
            background: linear-gradient(135deg, #3BB7FB, #2A9FE8);
            border: none;
            color: white !important;
            padding: 0.75rem;
            border-radius: var(--border-radius);
            font-weight: 600;
            font-size: 0.85rem;
            transition: var(--transition-smooth);
            margin-top: auto;
            cursor: pointer;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .discovery-swap-btn:hover {
            background: linear-gradient(135deg, #2A9FE8, #F6B443);
            transform: translateY(-2px);
            color: white !important;
            box-shadow: 0 4px 15px rgba(59, 183, 251, 0.4);
        }

        .discovery-swap-btn.btn-secondary {
            background: rgba(108, 117, 125, 0.6);
            cursor: not-allowed;
        }

        .discovery-swap-btn.btn-secondary:hover {
            background: rgba(108, 117, 125, 0.6);
            transform: none;
            box-shadow: none;
        }

        /* Empty States */
        .empty-state {
            text-align: center;
            padding: 3rem 1rem;
            color: var(--text-muted);
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
            color: var(--primary-color);
        }

        .empty-state h6 {
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
        }

        /* Empty Library State in Modal */
        .empty-library {
            min-height: 400px;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 3rem 2rem;
        }

        .empty-state-modern {
            text-align: center;
            max-width: 450px;
            margin: 0 auto;
        }

        .empty-state-modern .empty-icon {
            width: 100px;
            height: 100px;
            margin: 0 auto 1.5rem;
            background: linear-gradient(135deg, rgba(59, 183, 251, 0.15) 0%, rgba(59, 183, 251, 0.05) 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            animation: pulse 2s infinite;
        }

        .empty-state-modern .empty-icon i {
            font-size: 3rem;
            color: var(--primary-color);
        }

        .empty-state-modern .empty-title {
            color: var(--text-primary);
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .empty-state-modern .empty-description {
            color: var(--text-muted);
            font-size: 1rem;
            line-height: 1.6;
            margin-bottom: 2rem;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.05); opacity: 0.9; }
        }

        /* Loading States */
        /* Loading States and Animations */
        .loading-state {
            text-align: center;
            padding: 3rem 1rem;
            color: var(--text-secondary);
            animation: fadeIn 0.5s ease-in-out;
        }

        .loading-spinner {
            margin-bottom: 1rem;
        }

        .loading-spinner .spinner-border {
            width: 3rem;
            height: 3rem;
            border-width: 0.3rem;
            border-color: var(--primary-color);
            border-right-color: transparent;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Button Loading States */
        .btn-loading {
            position: relative;
            color: transparent !important;
        }

        .btn-loading::after {
            content: '';
            position: absolute;
            width: 16px;
            height: 16px;
            top: 50%;
            left: 50%;
            margin-left: -8px;
            margin-top: -8px;
            border: 2px solid #ffffff;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s ease-in-out infinite;
        }

        /* Toast Notifications */
        .notification-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--card-background);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-heavy);
            padding: 1rem 1.25rem;
            z-index: 10000;
            transform: translateX(400px);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            max-width: 400px;
            border-left: 4px solid var(--primary-color);
        }

        .notification-toast.show {
            transform: translateX(0);
        }

        .notification-toast.success {
            border-left-color: var(--success-color);
        }

        .notification-toast.error {
            border-left-color: var(--danger-color);
        }

        .notification-toast.warning {
            border-left-color: var(--warning-color);
        }

        .toast-content {
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
        }

        .toast-icon {
            font-size: 1.5rem;
            flex-shrink: 0;
            margin-top: 0.1rem;
        }

        .toast-message h6 {
            color: var(--text-primary);
            margin: 0 0 0.25rem 0;
            font-weight: 600;
            font-size: 0.95rem;
        }

        .toast-message p {
            color: var(--text-secondary);
            margin: 0;
            font-size: 0.85rem;
            line-height: 1.4;
        }

        .toast-close {
            position: absolute;
            top: 0.75rem;
            right: 0.75rem;
            background: none;
            border: none;
            color: var(--text-secondary);
            font-size: 1.2rem;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 4px;
            transition: var(--transition-smooth);
        }

        .toast-close:hover {
            color: var(--text-primary);
            background: rgba(59, 183, 251, 0.2);
        }

        /* Modern Modal Styles */
        .modal-modern {
            background: linear-gradient(135deg, #1E1F23 0%, #2A2D35 100%);
            border: 1px solid rgba(59, 183, 251, 0.2);
            border-radius: var(--border-radius-lg);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.5);
            overflow: hidden;
        }

        .modal-header-modern {
            background: rgba(59, 183, 251, 0.05);
            border-bottom: 1px solid rgba(59, 183, 251, 0.2);
            padding: 2rem 2.5rem;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .modal-title-section h4 {
            color: var(--text-primary);
            font-weight: 700;
            font-size: 1.5rem;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .modal-subtitle {
            color: var(--text-secondary);
            font-size: 0.95rem;
            margin: 0.5rem 0 0 0;
            font-weight: 400;
        }

        .btn-close-modern {
            background: rgba(35, 37, 41, 0.8);
            border: none;
            color: var(--text-secondary);
            width: 44px;
            height: 44px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: var(--transition-smooth);
            cursor: pointer;
            font-size: 1.25rem;
        }

        .btn-close-modern:hover {
            background: rgba(220, 53, 69, 0.2);
            color: var(--danger-color);
            transform: scale(1.1);
        }

        .modal-body-modern {
            padding: 2.5rem;
        }

        .modal-footer-modern {
            background: rgba(35, 37, 41, 0.5);
            border-top: 1px solid rgba(59, 183, 251, 0.2);
            padding: 2rem 2.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        /* Step Indicator */
        .step-indicator {
            display: flex;
            align-items: center;
            justify-content: center;
            max-width: 600px;
            margin: 0 auto;
            gap: 1rem;
        }

        .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            opacity: 0.5;
            transition: var(--transition-smooth);
        }

        .step.active {
            opacity: 1;
        }

        .step-number {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: rgba(59, 183, 251, 0.15);
            border: 2px solid rgba(59, 183, 251, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 0.75rem;
            transition: var(--transition-smooth);
            font-size: 1.1rem;
        }

        .step.active .step-number {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            border-color: transparent;
            color: white;
            box-shadow: 0 8px 25px rgba(59, 183, 251, 0.4);
            transform: scale(1.1);
        }

        .step-label {
            font-size: 0.85rem;
            color: var(--text-secondary);
            font-weight: 500;
            text-align: center;
            line-height: 1.2;
        }

        .step.active .step-label {
            color: var(--text-primary);
            font-weight: 600;
        }

        .step-line {
            flex: 1;
            height: 2px;
            background: rgba(59, 183, 251, 0.2);
            border-radius: 1px;
            position: relative;
        }

        /* Swap Steps Content */
        .swap-step {
            display: none;
            animation: fadeIn 0.4s ease;
        }

        .swap-step.active {
            display: block;
        }

        /* Book Display Cards */
        .book-display-card,
        .library-selection-card {
            background: rgba(30, 31, 35, 0.6);
            border-radius: var(--border-radius);
            border: 1px solid rgba(59, 183, 251, 0.15);
            padding: 1.5rem;
            height: 100%;
        }

        .book-display-header h6,
        .library-header h6 {
            color: var(--text-primary);
            font-weight: 600;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .book-display-content {
            min-height: 300px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
        }

        /* User Books Grid in Modal */
        .user-books-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
            gap: 1rem;
            max-height: 400px;
            overflow-y: auto;
            padding: 1rem 0;
        }

        .user-book-card {
            background: rgba(30, 31, 35, 0.6);
            border: 2px solid rgba(59, 183, 251, 0.15);
            border-radius: var(--border-radius);
            padding: 1rem;
            cursor: pointer;
            transition: var(--transition-smooth);
            position: relative;
            text-align: center;
        }

        .user-book-card:hover {
            border-color: rgba(59, 183, 251, 0.4);
            background: rgba(59, 183, 251, 0.08);
            transform: translateY(-3px);
        }

        .user-book-card.selected {
            border-color: var(--primary-color);
            background: rgba(59, 183, 251, 0.15);
            box-shadow: 0 8px 25px rgba(59, 183, 251, 0.25);
        }

        .user-book-card .book-cover-container {
            margin-bottom: 1rem;
        }

        .user-book-card .user-book-cover {
            width: 100%;
            max-width: 80px;
            height: 100px;
            object-fit: cover;
            border-radius: 6px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transition: var(--transition-smooth);
        }

        .user-book-card:hover .user-book-cover {
            transform: scale(1.05);
        }

        .user-book-info .book-title {
            font-size: 0.8rem;
            color: var(--text-primary);
            font-weight: 600;
            margin-bottom: 0.25rem;
            line-height: 1.2;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .user-book-info .book-author {
            font-size: 0.7rem;
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
        }

        .selection-indicator {
            position: absolute;
            top: -6px;
            right: -6px;
            width: 24px;
            height: 24px;
            background: var(--primary-color);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 0.75rem;
            opacity: 0;
            transform: scale(0.8);
            transition: var(--transition-smooth);
        }

        .user-book-card.selected .selection-indicator {
            opacity: 1;
            transform: scale(1);
        }

        /* Active Swaps Grid Layout - Like Wishlist */
        #active-swaps-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 1.5rem;
            padding: 1rem 0;
        }

        #active-swaps-container .active-swap-item {
            background: linear-gradient(135deg, #1E1F23 0%, #2A2D35 100%);
            border: 1px solid rgba(59, 183, 251, 0.15);
            border-radius: 15px;
            padding: 1.5rem;
            transition: var(--transition-smooth);
            height: fit-content;
        }

        #active-swaps-container .active-swap-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
            border-color: rgba(59, 183, 251, 0.3);
        }

        /* Responsive grid adjustments */
        @media (max-width: 1200px) {
            #active-swaps-container {
                grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                gap: 1rem;
            }
        }

        @media (max-width: 768px) {
            #active-swaps-container {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            #active-swaps-container .active-swap-item {
                padding: 1rem;
            }
        }

        /* Enhanced pagination for grid display */
        #active-swaps-pagination .pagination {
            justify-content: center;
            margin-top: 2rem;
        }

        /* Compact swap card styling for grid layout */
        .swap-tracker-card .swap-header .row {
            margin: 0;
        }

        .swap-tracker-card .swap-header .col-md-4 {
            padding: 0 0.5rem;
        }

        .swap-tracker-card .book-cover {
            width: 50px;
            height: 65px;
            object-fit: cover;
            border-radius: 6px;
        }

        .swap-tracker-card .book-info p {
            font-size: 0.8rem;
            margin-bottom: 0.25rem;
        }

        .swap-tracker-card .book-info small {
            font-size: 0.7rem;
            line-height: 1.2;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        /* Compact progress steps */
        .swap-progress-tracker .progress-step {
            margin-bottom: 1rem;
            padding: 0.75rem;
            background: rgba(35, 37, 41, 0.4);
            border-radius: 8px;
        }

        .swap-progress-tracker .step-header {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .swap-progress-tracker .step-number {
            width: 32px;
            height: 32px;
            font-size: 0.9rem;
            flex-shrink: 0;
        }

        .swap-progress-tracker .step-title h6 {
            font-size: 0.9rem;
            margin-bottom: 0.25rem;
        }

        .swap-progress-tracker .step-title small {
            font-size: 0.75rem;
        }

        /* Micro-interactions and Hover Effects - Only for Swap Tabs */
        .swap-tabs-container .nav-link {
            position: relative;
            overflow: hidden;
        }

        .swap-tabs-container .nav-link::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(59, 183, 251, 0.2), transparent);
            transition: left 0.5s;
        }

        .swap-tabs-container .nav-link:hover::before {
            left: 100%;
        }

        .card-modern,
        .swap-card,
        .book-swap-card,
        .discovery-book-card {
            position: relative;
            overflow: hidden;
        }

        .card-modern::before,
        .swap-card::before,
        .book-swap-card::before,
        .discovery-book-card::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(59, 183, 251, 0.1) 0%, transparent 70%);
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }

        .card-modern:hover::before,
        .swap-card:hover::before,
        .book-swap-card:hover::before,
        .discovery-book-card:hover::before {
            opacity: 1;
        }

        /* Pulse animation for important elements */
        .pulse {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        /* Focus states for accessibility */
        .nav-link:focus,
        .btn-modern:focus,
        .btn-outline-modern:focus {
            outline: 2px solid var(--primary-color);
            outline-offset: 2px;
        }

        /* Progress Steps */
        .progress-step {
            margin-bottom: 1.5rem;
            padding: 1rem;
            border-radius: var(--border-radius);
            border: 1px solid rgba(59, 183, 251, 0.15);
            background: rgba(30, 31, 35, 0.5);
            transition: var(--transition-smooth);
        }

        .progress-step.active {
            border-color: var(--primary-color);
            background: rgba(59, 183, 251, 0.08);
        }

        .progress-step.completed {
            border-color: var(--success-color);
            background: rgba(40, 167, 69, 0.08);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .swap-matcher-main {
                padding: 0.5rem 0;
            }
            
            .welcome-hero {
                padding: 1.5rem;
                margin-bottom: 1.5rem !important;
            }

            .hero-title {
                font-size: 1.75rem;
            }

            .hero-subtitle {
                font-size: 1rem;
            }
            
            .swap-tabs-container .nav-pills {
                flex-direction: column;
                padding: 0.75rem;
            }
            
            .swap-tabs-container .nav-pills .nav-link {
                margin: 0.25rem 0 !important;
                text-align: center;
                justify-content: center;
                width: 100%;
            }
            
            .sub-tabs-nav {
                padding: 0.75rem;
            }
            
            .sub-tabs-nav .nav-pills {
                flex-direction: row;
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .card-modern .card-body,
            .swap-card-body {
                padding: 1rem;
            }
            
            .btn-modern,
            .btn-outline-modern {
                width: 100%;
                justify-content: center;
                margin-bottom: 0.5rem;
            }

            .discovery-books-grid {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                gap: 1rem;
            }
        }

        @media (max-width: 576px) {
            .welcome-hero {
                padding: 1rem;
            }

            .hero-title {
                font-size: 1.5rem;
            }

            .hero-subtitle {
                font-size: 0.95rem;
            }
            
            .nav-pills .nav-link {
                font-size: 0.85rem;
                padding: 0.6rem 1rem !important;
            }
            
            .sub-tabs-nav .nav-link {
                font-size: 0.75rem;
                padding: 0.5rem 0.8rem !important;
            }

            .discovery-books-grid {
                grid-template-columns: 1fr;
            }
        }

        /* Animation Classes */
        .animate-bounce {
            animation: bounce 1s infinite;
        }

        .animate-pulse {
            animation: pulse 2s infinite;
        }

        @keyframes bounce {
            0%, 20%, 53%, 80%, 100% {
                transform: translate3d(0,0,0);
            }
            40%, 43% {
                transform: translate3d(0,-5px,0);
            }
            70% {
                transform: translate3d(0,-3px,0);
            }
            90% {
                transform: translate3d(0,-1px,0);
            }
        }

        @keyframes pulse {
            0% {
                opacity: 1;
            }
            50% {
                opacity: 0.7;
            }
            100% {
                opacity: 1;
            }
        }

        /* Custom Notification Styles */
        .notification-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--card-background);
            color: var(--text-primary);
            padding: 1rem 1.5rem;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-heavy);
            border: 1px solid var(--border-color);
            z-index: 1050;
            min-width: 300px;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .notification-toast.show {
            transform: translateX(0);
        }

        .notification-toast.success {
            border-left: 4px solid var(--success-color);
        }

        .notification-toast.error {
            border-left: 4px solid var(--danger-color);
        }

        .notification-toast.info {
            border-left: 4px solid var(--primary-color);
        }

    </style>
</head>
<body>
    <!-- Include Standard Navbar -->
    <%- include('partials/navbar') %>

    <!-- Swap Matcher Main Content -->
    <main class="container-fluid py-4">
    <div class="dashboard-content">
    <!-- Swap Matcher Hero Section -->
    <section class="welcome-hero mb-5">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-8">
                    <h1 class="hero-title mb-3">
                        <i class="bi bi-arrow-left-right me-2"></i> <span class="gradient-text">Smart Book Swap Matcher</span>
                    </h1>
                    <p class="hero-subtitle mb-4">
                        Discover perfect matches for your books using our intelligent algorithm. 
                        Connect with readers in your area and expand your literary horizons.
                    </p>
                    <div class="d-flex flex-wrap gap-3">
                        <button class="btn btn-gradient" onclick="quickMatchAll()">
                            <i class="bi bi-lightning-charge"></i> Quick Match All
                        </button>
                        <button class="btn btn-outline-light" onclick="showMatchPreferences()">
                            <i class="bi bi-sliders"></i> Match Preferences
                        </button>
                    </div>
                </div>
                <div class="col-lg-4 text-center">
                    <div class="swap-stats">
                        <div class="row text-center">
                            <div class="col-6">
                                <h3 class="mb-1"><%= myPendingRequests || 0 %></h3>
                                <small>My Requests</small>
                            </div>
                            <div class="col-6">
                                <h3 class="mb-1"><%= incomingRequests || 0 %></h3>
                                <small>Incoming</small>
                            </div>
                        </div>
                        <hr class="bg-white my-3">
                        <div class="row text-center">
                            <div class="col-6">
                                <h3 class="mb-1"><%= activeSwaps || 0 %></h3>
                                <small>Active Swaps</small>
                            </div>
                            <div class="col-6">
                                <h3 class="mb-1"><%= userStats?.swapsCompleted || 0 %></h3>
                                <small>Completed</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Swap Navigation Tabs -->
    <div class="container">
        <!-- Modern tab navigation with proper styling -->
        <div class="swap-tabs-container mb-4">
            <ul class="nav nav-pills justify-content-center" id="swapTabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="find-matches-tab" data-toggle="tab" href="#find-matches" role="tab" aria-controls="find-matches" aria-selected="true">
                        <i class="bi bi-search"></i> Find Matches
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="my-requests-tab" data-toggle="tab" href="#my-requests" role="tab" aria-controls="my-requests" aria-selected="false">
                        <i class="bi bi-arrow-up-right"></i> My Requests 
                        <% if (myPendingRequests > 0) { %>
                            <span class="badge badge-warning ml-1"><%= myPendingRequests %></span>
                        <% } %>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="incoming-requests-tab" data-toggle="tab" href="#incoming-requests" role="tab" aria-controls="incoming-requests" aria-selected="false">
                        <i class="bi bi-arrow-down-left"></i> Incoming Requests
                        <% if (incomingRequests > 0) { %>
                            <span class="badge badge-success ml-1"><%= incomingRequests %></span>
                        <% } %>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="active-swaps-tab" data-toggle="tab" href="#active-swaps" role="tab" aria-controls="active-swaps" aria-selected="false">
                        <i class="bi bi-hourglass-split"></i> Active Swaps
                        <% if (activeSwaps > 0) { %>
                            <span class="badge badge-info ml-1"><%= activeSwaps %></span>
                        <% } %>
                        <!-- Show notification badge if there are meetings awaiting confirmation -->
                        <% 
                        const meetingsNeedingConfirmation = userSwaps?.filter(swap => 
                            (swap.status === 'Accepted' || swap.status === 'In Progress') &&
                            swap.meetingDetails && 
                            swap.meetingDetails.datetime && 
                            !swap.meetingDetails.confirmed
                        ).length || 0;
                        %>
                        <% if (meetingsNeedingConfirmation > 0) { %>
                            <span class="badge badge-warning ml-1 animate__animated animate__pulse animate__infinite" 
                                  style="animation-duration: 2s;" 
                                  title="Meetings need your confirmation!">
                                <i class="bi bi-exclamation-circle"></i> <%= meetingsNeedingConfirmation %>
                            </span>
                        <% } %>
                    </a>
                </li>
            </ul>
        </div>
        
        <!-- Tab Content with proper spacing -->
        <div class="tab-content" id="swapTabsContent">
                <!-- Find Matches Tab -->
            <div class="tab-pane fade show active" id="find-matches" role="tabpanel" aria-labelledby="find-matches-tab">
                <!-- Available Books Discovery Section -->
                <div class="discovery-section mb-4">
                    <div class="card-modern">
                        <div class="card-header border-0">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h5 class="mb-1 text-white">
                                        <i class="bi bi-compass text-primary"></i> Discover Books to Swap
                                    </h5>
                                    <p class="text-muted mb-0">Find amazing books available for swap in your area</p>
                                </div>
                                <div class="discovery-controls">
                                    <button class="btn-modern-outline btn-sm mr-2" onclick="showAdvancedFilters()">
                                        <i class="bi bi-funnel"></i> Filters
                                    </button>
                                    <button class="btn-modern btn-sm" onclick="refreshDiscovery()">
                                        <i class="bi bi-arrow-clockwise"></i> Refresh
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Advanced Filter Panel -->
                <div id="advanced-filters" class="filter-panel mb-4" style="display: none;">
                    <div class="card-modern">
                        <div class="card-body">
                            <div class="row align-items-end">
                                <div class="col-md-3 mb-3">
                                    <label class="filter-label">Genre</label>
                                    <select id="genre-filter" class="form-control-modern">
                                        <option value="">All Genres</option>
                                        <option value="Fiction">Fiction</option>
                                        <option value="Science Fiction">Science Fiction</option>
                                        <option value="Romance">Romance</option>
                                        <option value="Mystery">Mystery</option>
                                        <option value="Fantasy">Fantasy</option>
                                        <option value="Biography">Biography</option>
                                        <option value="History">History</option>
                                        <option value="Non-Fiction">Non-Fiction</option>
                                        <option value="Thriller">Thriller</option>
                                        <option value="Self-Help">Self-Help</option>
                                    </select>
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label class="filter-label">Condition</label>
                                    <select id="condition-filter" class="form-control-modern">
                                        <option value="">All Conditions</option>
                                        <option value="New">New</option>
                                        <option value="Like New">Like New</option>
                                        <option value="Very Good">Very Good</option>
                                        <option value="Good">Good</option>
                                        <option value="Fair">Fair</option>
                                    </select>
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label class="filter-label">Sort by</label>
                                    <select id="sort-filter" class="form-control-modern">
                                        <option value="title">Title A-Z</option>
                                        <option value="author">Author A-Z</option>
                                        <option value="condition">Best Condition First</option>
                                        <option value="newest">Recently Added</option>
                                    </select>
                                </div>
                                <div class="col-md-3 mb-3">
                                    <button id="clear-filters" class="btn-danger-outline form-control-modern w-100" style="height: 38px; padding: 8px 16px;">
                                        <i class="bi bi-x-circle"></i> Clear Filters
                                    </button>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-12">
                                    <div class="results-info">
                                        <span id="matches-count" class="matches-counter">Loading books...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Books Discovery Grid -->
                <div class="books-discovery-grid">
                    <div class="card-modern">
                        <div class="card-body p-4">
                            <div id="books-container">
                                <div class="loading-state">
                                    <div class="loading-spinner">
                                        <div class="spinner-border text-primary" role="status"></div>
                                    </div>
                                    <h6 class="mt-3">Discovering Amazing Books...</h6>
                                    <p class="text-muted">Finding the perfect books for you to swap</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- My Requests Tab -->
            <div class="tab-pane fade" id="my-requests" role="tabpanel" aria-labelledby="my-requests-tab">
                <div class="card-modern">
                    <div class="card-header">
                        <h5 class="mb-0 text-white">
                            <i class="bi bi-arrow-up-right text-primary"></i> Your Swap Requests
                        </h5>
                        <small class="text-muted">Track the status of your swap proposals</small>
                    </div>
                    <div class="card-body">
                        <% const myRequests = userSwaps?.filter(swap => (swap.requester._id || swap.requester).toString() === user._id.toString()); %>
                        <% 
                            const pendingRequests = myRequests?.filter(swap => swap.status === 'Pending' || swap.status === 'Accepted' || swap.status === 'In Progress') || [];
                            const completedRequests = myRequests?.filter(swap => swap.status === 'Completed' || swap.status === 'Swapped') || [];
                            const canceledRequests = myRequests?.filter(swap => swap.status === 'Cancelled' || swap.status === 'Declined') || [];
                        %>
                        
                        <!-- Sub Tabs for Request Status -->
                        <div class="sub-tabs-nav">
                            <ul class="nav nav-pills justify-content-center" id="requestStatusTabs" role="tablist">
                                <li class="nav-item">
                                    <a class="nav-link active" id="pending-requests-tab" data-toggle="tab" href="#pending-requests" role="tab" aria-controls="pending-requests" aria-selected="true">
                                        <i class="bi bi-hourglass-split"></i> Pending <span class="badge badge-light ml-1"><%= pendingRequests.length %></span>
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="completed-requests-tab" data-toggle="tab" href="#completed-requests" role="tab" aria-controls="completed-requests" aria-selected="false">
                                        <i class="bi bi-check-circle"></i> Completed <span class="badge badge-light ml-1"><%= completedRequests.length %></span>
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="canceled-requests-tab" data-toggle="tab" href="#canceled-requests" role="tab" aria-controls="canceled-requests" aria-selected="false">
                                        <i class="bi bi-x-circle"></i> Canceled <span class="badge badge-light ml-1"><%= canceledRequests.length %></span>
                                    </a>
                                </li>
                            </ul>
                        </div>

                        <div class="tab-content">
                            <!-- Pending Requests -->
                            <div class="tab-pane fade show active" id="pending-requests" role="tabpanel" aria-labelledby="pending-requests-tab">
                                <% if (pendingRequests.length > 0) { %>
                                    <div class="row" id="pending-requests-container">
                                        <% pendingRequests.forEach((swap, index) => { %>
                                            <div class="col-md-6 col-lg-4 mb-4 pending-request-item" data-index="<%= index %>">
                                                <div class="book-swap-card">
                                                    <div class="swap-book-images">
                                                        <div class="book-image-wrapper">
                                                            <img src="<%= swap.requestedBook ? (swap.requestedBook.coverImage || swap.requestedBook.image || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                                 alt="Requested Book" 
                                                                 class="swap-book-img"
                                                                 onerror="this.src='/images/placeholder-book.jpg'">
                                                            <div class="book-label">You Want</div>
                                                        </div>
                                                        <div class="swap-arrow">
                                                            <i class="bi bi-arrow-left-right"></i>
                                                        </div>
                                                        <div class="book-image-wrapper">
                                                            <img src="<%= swap.offeredBook ? (swap.offeredBook.coverImage || swap.offeredBook.image || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                                 alt="Offered Book" 
                                                                 class="swap-book-img"
                                                                 onerror="this.src='/images/placeholder-book.jpg'">
                                                            <div class="book-label">You Offer</div>
                                                        </div>
                                                    </div>
                                                    <div class="swap-card-body">
                                                        <div class="swap-partner mb-2">
                                                            <i class="bi bi-person-circle text-info"></i>
                                                            <span class="text-white"><%= swap.owner ? (swap.owner.username || swap.owner.fullname || 'Unknown') : 'Unknown' %></span>
                                                        </div>
                                                        <div class="mb-2">
                                                            <span class="swap-status-badge status-<%= swap.status.toLowerCase().replace(/ /g, '-') %>">
                                                                <%= swap.status %>
                                                            </span>
                                                        </div>
                                                        <div class="swap-actions mt-3">
                                                            <button class="btn btn-sm btn-info btn-block mb-2" onclick="openChat('<%= swap._id %>')">
                                                                <i class="bi bi-chat-dots"></i> Chat
                                                            </button>
                                                            <% if (swap.status === 'Pending') { %>
                                                                <button class="btn btn-sm btn-outline-danger btn-block" onclick="cancelSwapRequest('<%= swap._id %>')">
                                                                    <i class="bi bi-x-circle"></i> Cancel
                                                                </button>
                                                            <% } %>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        <% }); %>
                                    </div>
                                    <!-- Pagination for Pending -->
                                    <% if (pendingRequests.length > 9) { %>
                                        <nav aria-label="Pending requests pagination">
                                            <ul class="pagination pagination-custom justify-content-center" id="pending-pagination">
                                                <!-- Pagination will be generated by JavaScript -->
                                            </ul>
                                        </nav>
                                    <% } %>
                                <% } else { %>
                                    <div class="empty-state">
                                        <i class="bi bi-hourglass-split"></i>
                                        <h6>No Pending Requests</h6>
                                        <p class="text-muted">You don't have any pending swap requests</p>
                                    </div>
                                <% } %>
                            </div>

                            <!-- Completed Requests -->
                            <div class="tab-pane fade" id="completed-requests" role="tabpanel" aria-labelledby="completed-requests-tab">
                                <% if (completedRequests.length > 0) { %>
                                    <div class="row" id="completed-requests-container">
                                        <% completedRequests.forEach((swap, index) => { %>
                                            <div class="col-md-6 col-lg-4 mb-4 completed-request-item" data-index="<%= index %>">
                                                <div class="book-swap-card">
                                                    <div class="swap-book-images">
                                                        <div class="book-image-wrapper">
                                                            <img src="<%= swap.requestedBook ? (swap.requestedBook.coverImage || swap.requestedBook.image || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                                 alt="Requested Book" 
                                                                 class="swap-book-img"
                                                                 onerror="this.src='/images/placeholder-book.jpg'">
                                                            <div class="book-label success">Received</div>
                                                        </div>
                                                        <div class="swap-arrow success">
                                                            <i class="bi bi-check-circle-fill"></i>
                                                        </div>
                                                        <div class="book-image-wrapper">
                                                            <img src="<%= swap.offeredBook ? (swap.offeredBook.coverImage || swap.offeredBook.image || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                                 alt="Offered Book" 
                                                                 class="swap-book-img"
                                                                 onerror="this.src='/images/placeholder-book.jpg'">
                                                            <div class="book-label success">Sent</div>
                                                        </div>
                                                    </div>
                                                    <div class="swap-card-body">
                                                        <div class="swap-partner mb-2">
                                                            <i class="bi bi-person-circle text-success"></i>
                                                            <span class="text-white"><%= swap.owner ? (swap.owner.username || swap.owner.fullname || 'Unknown') : 'Unknown' %></span>
                                                        </div>
                                                        <div class="mb-2">
                                                            <span class="swap-status-badge status-completed">
                                                                <i class="bi bi-trophy"></i> Completed
                                                            </span>
                                                        </div>
                                                        <div class="swap-date mt-2">
                                                            <small class="text-muted">
                                                                <i class="bi bi-calendar-check"></i> 
                                                                <%= swap.updatedAt ? new Date(swap.updatedAt).toLocaleDateString() : 'N/A' %>
                                                            </small>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        <% }); %>
                                    </div>
                                    <!-- Pagination for Completed -->
                                    <% if (completedRequests.length > 9) { %>
                                        <nav aria-label="Completed requests pagination">
                                            <ul class="pagination pagination-custom justify-content-center" id="completed-pagination">
                                                <!-- Pagination will be generated by JavaScript -->
                                            </ul>
                                        </nav>
                                    <% } %>
                                <% } else { %>
                                    <div class="empty-state">
                                        <i class="bi bi-check-circle"></i>
                                        <h6>No Completed Swaps</h6>
                                        <p class="text-muted">You haven't completed any swaps yet</p>
                                    </div>
                                <% } %>
                            </div>

                            <!-- Canceled Requests -->
                            <div class="tab-pane fade" id="canceled-requests" role="tabpanel" aria-labelledby="canceled-requests-tab">
                                <% if (canceledRequests.length > 0) { %>
                                    <div class="row" id="canceled-requests-container">
                                        <% canceledRequests.forEach((swap, index) => { %>
                                            <div class="col-md-6 col-lg-4 mb-4 canceled-request-item" data-index="<%= index %>">
                                                <div class="book-swap-card canceled">
                                                    <div class="swap-book-images">
                                                        <div class="book-image-wrapper">
                                                            <img src="<%= swap.requestedBook ? (swap.requestedBook.coverImage || swap.requestedBook.image || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                                 alt="Requested Book" 
                                                                 class="swap-book-img grayscale"
                                                                 onerror="this.src='/images/placeholder-book.jpg'">
                                                            <div class="book-label danger">Not Received</div>
                                                        </div>
                                                        <div class="swap-arrow danger">
                                                            <i class="bi bi-x-circle-fill"></i>
                                                        </div>
                                                        <div class="book-image-wrapper">
                                                            <img src="<%= swap.offeredBook ? (swap.offeredBook.coverImage || swap.offeredBook.image || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                                 alt="Offered Book" 
                                                                 class="swap-book-img grayscale"
                                                                 onerror="this.src='/images/placeholder-book.jpg'">
                                                            <div class="book-label danger">Not Sent</div>
                                                        </div>
                                                    </div>
                                                    <div class="swap-card-body">
                                                        <div class="swap-partner mb-2">
                                                            <i class="bi bi-person-circle text-muted"></i>
                                                            <span class="text-muted"><%= swap.owner ? (swap.owner.username || swap.owner.fullname || 'Unknown') : 'Unknown' %></span>
                                                        </div>
                                                        <div class="mb-2">
                                                            <span class="swap-status-badge status-cancelled">
                                                                <%= swap.status %>
                                                            </span>
                                                        </div>
                                                        <div class="swap-date mt-2">
                                                            <small class="text-muted">
                                                                <i class="bi bi-calendar-x"></i> 
                                                                <%= swap.updatedAt ? new Date(swap.updatedAt).toLocaleDateString() : 'N/A' %>
                                                            </small>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        <% }); %>
                                    </div>
                                    <!-- Pagination for Canceled -->
                                    <% if (canceledRequests.length > 9) { %>
                                        <nav aria-label="Canceled requests pagination">
                                            <ul class="pagination pagination-custom justify-content-center" id="canceled-pagination">
                                                <!-- Pagination will be generated by JavaScript -->
                                            </ul>
                                        </nav>
                                    <% } %>
                                <% } else { %>
                                    <div class="empty-state">
                                        <i class="bi bi-x-circle"></i>
                                        <h6>No Canceled Requests</h6>
                                        <p class="text-muted">You don't have any canceled requests</p>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Incoming Requests Tab -->
            <div class="tab-pane fade" id="incoming-requests" role="tabpanel" aria-labelledby="incoming-requests-tab">
                <div class="card-modern">
                    <div class="card-header">
                        <h5 class="mb-0 text-white">
                            <i class="bi bi-arrow-down-left text-success"></i> Incoming Swap Requests
                        </h5>
                        <small class="text-muted">Review and respond to swap proposals from other readers</small>
                    </div>
                    <div class="card-body">
                        <% const incomingRequestsFiltered = userSwaps?.filter(swap => (swap.owner._id || swap.owner).toString() === user._id.toString() && swap.status === 'Pending'); %>
                        <% if (incomingRequestsFiltered && incomingRequestsFiltered.length > 0) { %>
                            <% incomingRequestsFiltered.forEach(swap => { %>
                                <div class="book-swap-item">
                                    <div class="row align-items-center">
                                        <div class="col-md-2">
                                            <img src="<%= swap.requestedBook ? (swap.requestedBook.coverImage || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                 alt="<%= swap.requestedBook ? swap.requestedBook.title : 'Book' %>" class="img-fluid rounded">
                                        </div>
                                        <div class="col-md-3">
                                            <h6 class="text-white">They want: <%= swap.requestedBook ? swap.requestedBook.title : 'Unknown Book' %></h6>
                                            <small class="text-muted">by <%= swap.requestedBook ? swap.requestedBook.author : 'Unknown Author' %></small>
                                            <br>
                                            <small class="text-success">Your book</small>
                                        </div>
                                        <div class="col-md-1 text-center">
                                            <i class="bi bi-arrow-left-right text-warning" style="font-size: 1.5rem;"></i>
                                        </div>
                                        <div class="col-md-2">
                                            <img src="<%= swap.offeredBook ? (swap.offeredBook.coverImage || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                 alt="<%= swap.offeredBook ? swap.offeredBook.title : 'Book' %>" class="img-fluid rounded">
                                        </div>
                                        <div class="col-md-2">
                                            <h6 class="text-white">They offer: <%= swap.offeredBook ? swap.offeredBook.title : 'Unknown Book' %></h6>
                                            <small class="text-muted">by <%= swap.offeredBook ? swap.offeredBook.author : 'Unknown Author' %></small>
                                            <br>
                                            <small class="text-info">From: <%= swap.requester ? (swap.requester.username || swap.requester.fullname) : 'Unknown User' %></small>
                                        </div>
                                        <div class="col-md-2 text-right">
                                            <button class="btn btn-success btn-sm mb-2 d-block w-100" onclick="acceptSwapRequest('<%= swap._id %>')">
                                                <i class="bi bi-check-circle"></i> Accept
                                            </button>
                                            <button class="btn btn-outline-danger btn-sm mb-2 d-block w-100" onclick="rejectSwapRequest('<%= swap._id %>')">
                                                <i class="bi bi-x-circle"></i> Decline
                                            </button>
                                            <button class="btn btn-info btn-sm d-block w-100" onclick="openChat('<%= swap._id %>')">
                                                <i class="bi bi-chat-dots"></i> Chat
                                            </button>
                                        </div>
                                    </div>
                                    <% if (swap.message && swap.message.trim().length > 0) { %>
                                    <div class="row mt-3">
                                        <div class="col-12">
                                            <div class="swap-request-message">
                                                <div class="message-header">
                                                    <i class="bi bi-chat-quote-fill text-primary"></i>
                                                    <span class="font-weight-bold text-white">Message from <%= swap.requester ? (swap.requester.username || swap.requester.fullname) : 'requester' %>:</span>
                                                </div>
                                                <div class="message-content">
                                                    <%= swap.message %>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <% } %>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="empty-state">
                                <i class="bi bi-arrow-down-left"></i>
                                <h6>No Incoming Requests</h6>
                                <p class="text-muted">No one has requested your books yet. Make sure your library is visible to other readers!</p>
                                <a href="/library" class="btn btn-gradient">Manage My Library</a>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Active Swaps Tab -->
            <div class="tab-pane fade" id="active-swaps" role="tabpanel" aria-labelledby="active-swaps-tab">
                <div class="card-modern">
                    <div class="card-header">
                        <h5 class="mb-0 text-white">
                            <i class="bi bi-hourglass-split text-warning"></i> Active Swaps
                        </h5>
                        <small class="text-muted">Track your ongoing book exchanges and confirm when you receive books</small>
                    </div>
                    <div class="card-body">
                        <!-- Swap Process Guide -->
                        <div class="alert alert-info mb-3" style="background: rgba(59, 183, 251, 0.1); border: 1px solid rgba(59, 183, 251, 0.3); padding: 15px;">
                            <h6 class="text-primary mb-2" style="font-size: 0.95rem;">
                                <i class="bi bi-map"></i> Complete Swap Process
                            </h6>
                            <div class="row text-center">
                                <div class="col-3">
                                    <div class="step-icon mb-1">
                                        <i class="bi bi-calendar-event text-warning"></i>
                                    </div>
                                    <small style="font-size: 0.8rem;">1. Schedule<br>Meeting</small>
                                </div>
                                <div class="col-3">
                                    <div class="step-icon mb-1">
                                        <i class="bi bi-check-circle text-success"></i>
                                    </div>
                                    <small style="font-size: 0.8rem;">2. Confirm<br>Meeting</small>
                                </div>
                                <div class="col-3">
                                    <div class="step-icon mb-1">
                                        <i class="bi bi-people text-info"></i>
                                    </div>
                                    <small style="font-size: 0.8rem;">3. Meet &<br>Exchange</small>
                                </div>
                                <div class="col-3">
                                    <div class="step-icon mb-1">
                                        <i class="bi bi-book text-primary"></i>
                                    </div>
                                    <small style="font-size: 0.8rem;">4. Confirm<br>Receipt</small>
                                </div>
                            </div>
                        </div>
                        <% 
                        // Check for meetings needing confirmation
                        const meetingsNeedingAction = userSwaps?.filter(swap => 
                            (swap.status === 'Accepted' || swap.status === 'In Progress') &&
                            swap.meetingDetails && 
                            swap.meetingDetails.datetime && 
                            !swap.meetingDetails.confirmed
                        ) || [];
                        %>
                        
                        <!-- Meeting Confirmation Alert -->
                        <% if (meetingsNeedingAction.length > 0) { %>
                            <div class="alert alert-warning animate__animated animate__pulse animate__infinite" 
                                 style="border: 2px solid #FFC107; background: rgba(255, 193, 7, 0.1); animation-duration: 2s; margin-bottom: 15px; padding: 12px;">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-calendar-exclamation text-warning" style="font-size: 1.5rem; margin-right: 12px;"></i>
                                    <div>
                                        <h6 class="mb-1 text-warning" style="font-weight: 700; font-size: 0.9rem;">
                                            <i class="bi bi-exclamation-triangle"></i> Action Required!
                                        </h6>
                                        <p class="mb-0" style="font-size: 0.85rem;">
                                            You have <strong><%= meetingsNeedingAction.length %></strong> meeting<%= meetingsNeedingAction.length > 1 ? 's' : '' %> 
                                            waiting for your confirmation. Please review and confirm below.
                                        </p>
                                    </div>
                                </div>
                            </div>
                        <% } %>
                        
                        <% const activeSwapsFiltered = userSwaps?.filter(swap => 
                            swap.status === 'Accepted' || 
                            swap.status === 'In Progress' || 
                            swap.status === 'Pending Confirmation'
                        ); %>
                        
                        <!-- Status Summary -->
                        <% if (activeSwapsFiltered && activeSwapsFiltered.length > 0) { %>
                            <div class="mb-2 p-2" style="background: rgba(35, 37, 41, 0.6); border-radius: 8px; border: 1px solid rgba(59, 183, 251, 0.15);">
                                <h6 class="text-white mb-2" style="font-size: 0.9rem;">
                                    <i class="bi bi-pie-chart"></i> Your Active Swaps Summary
                                </h6>
                                <div class="row text-center">
                                    <div class="col-4">
                                        <div class="badge badge-warning" style="font-size: 0.9rem; padding: 6px 10px;">
                                            <%= activeSwapsFiltered.filter(s => s.status === 'Accepted').length %>
                                        </div>
                                        <br>
                                        <small class="text-muted" style="font-size: 0.75rem;">Accepted<br>(Schedule Meeting)</small>
                                    </div>
                                    <div class="col-4">
                                        <div class="badge badge-primary" style="font-size: 0.9rem; padding: 6px 10px;">
                                            <%= activeSwapsFiltered.filter(s => s.status === 'In Progress').length %>
                                        </div>
                                        <br>
                                        <small class="text-muted" style="font-size: 0.75rem;">In Progress<br>(Confirm Receipt)</small>
                                    </div>
                                    <div class="col-4">
                                        <div class="badge badge-info" style="font-size: 0.9rem; padding: 6px 10px;">
                                            <%= activeSwapsFiltered.filter(s => s.status === 'Pending Confirmation').length %>
                                        </div>
                                        <br>
                                        <small class="text-muted" style="font-size: 0.75rem;">Pending Verification</small>
                                    </div>
                                </div>
                            </div>
                        <% } %>
                        
                        <% if (activeSwapsFiltered && activeSwapsFiltered.length > 0) { %>
                            <div id="active-swaps-container">
                            <% activeSwapsFiltered.forEach(swap => { %>
                                <div class="swap-tracker-card mb-4 active-swap-item" style="background: linear-gradient(135deg, #1E1F23 0%, #2A2D35 100%); border: 1px solid rgba(59, 183, 251, 0.15); border-radius: 15px; padding: 20px;">
                                    <!-- Swap Header with Books -->
                                    <div class="swap-header mb-3">
                                        <div class="row align-items-center">
                                            <div class="col-md-4">
                                                <div class="book-info text-center">
                                                    <img src="<%= swap.requestedBook ? (swap.requestedBook.coverImage || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                         alt="<%= swap.requestedBook ? swap.requestedBook.title : 'Book' %>" 
                                                         class="book-cover" style="width: 60px; height: 80px; object-fit: cover; border-radius: 8px;">
                                                    <p class="mb-0 mt-2" style="font-size: 0.85rem; font-weight: 600;">You Want</p>
                                                    <small class="text-muted"><%= swap.requestedBook ? swap.requestedBook.title : 'Unknown Book' %></small>
                                                </div>
                                            </div>
                                            <div class="col-md-4 text-center">
                                                <i class="bi bi-arrow-left-right text-primary" style="font-size: 2rem;"></i>
                                                <p class="mb-0 mt-2">
                                                    <small class="text-muted">Swapping with</small><br>
                                                    <strong><%= swap.requester._id.toString() === user._id.toString() ? (swap.owner.fullName || swap.owner.username) : (swap.requester.fullName || swap.requester.username) %></strong>
                                                </p>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="book-info text-center">
                                                    <img src="<%= swap.offeredBook ? (swap.offeredBook.coverImage || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                         alt="<%= swap.offeredBook ? swap.offeredBook.title : 'Book' %>" 
                                                         class="book-cover" style="width: 60px; height: 80px; object-fit: cover; border-radius: 8px;">
                                                    <p class="mb-0 mt-2" style="font-size: 0.85rem; font-weight: 600;">You Give</p>
                                                    <small class="text-muted"><%= swap.offeredBook ? swap.offeredBook.title : 'Unknown Book' %></small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Progressive Step Tracker -->
                                    <div class="swap-progress-tracker">
                                        <% 
                                        // Determine current step based on swap status and details
                                        let currentStep = 1;
                                        if (swap.meetingDetails && swap.meetingDetails.datetime) {
                                            currentStep = 2;
                                            if (swap.meetingDetails.confirmed) {
                                                currentStep = 3;
                                                // Step 4: Confirm Receipt - ONLY for 'In Progress' or 'Pending Confirmation'
                                                // Don't skip Step 3 for 'Accepted' status - they need to click "We Have Met"
                                                if (['In Progress', 'Pending Confirmation'].includes(swap.status)) {
                                                    currentStep = 4;
                                                }
                                            }
                                        }
                                        %>
                                        
                                        <!-- Step 1: Schedule Meeting -->
                                        <div class="progress-step <%= currentStep >= 1 ? 'active' : '' %> <%= currentStep > 1 ? 'completed' : '' %>" data-step="1">
                                            <div class="step-header">
                                                <div class="step-number">
                                                    <% if (currentStep > 1) { %>
                                                        <i class="bi bi-check"></i>
                                                    <% } else { %>
                                                        1
                                                    <% } %>
                                                </div>
                                                <div class="step-title">
                                                    <h6>Schedule Meeting</h6>
                                                    <small class="text-muted">Set a time and place to meet</small>
                                                </div>
                                            </div>
                                            <% if (currentStep === 1) { %>
                                                <div class="step-actions mt-3">
                                                    <% if (!swap.meetingDetails || !swap.meetingDetails.datetime) { %>
                                                        <button class="btn btn-primary btn-sm" onclick="scheduleMeeting('<%= swap._id %>')">
                                                            <i class="bi bi-calendar-event"></i> Schedule Meeting
                                                        </button>
                                                        <p class="text-muted mt-2 mb-0" style="font-size: 0.8rem;">
                                                            <i class="bi bi-info-circle"></i> Coordinate with your swap partner to set a meeting time and location.
                                                        </p>
                                                    <% } %>
                                                </div>
                                            <% } %>
                                        </div>

                                        <!-- Step 2: Confirm Meeting -->
                                        <div class="progress-step <%= currentStep >= 2 ? 'active' : '' %> <%= currentStep > 2 ? 'completed' : '' %>" data-step="2" <% if (currentStep < 2) { %>style="display: none;"<% } %>>
                                            <div class="step-header">
                                                <div class="step-number">
                                                    <% if (currentStep > 2) { %>
                                                        <i class="bi bi-check"></i>
                                                    <% } else { %>
                                                        2
                                                    <% } %>
                                                </div>
                                                <div class="step-title">
                                                    <h6>Confirm Meeting</h6>
                                                    <small class="text-muted">Both parties must confirm the meeting</small>
                                                </div>
                                            </div>
                                            <% if (currentStep === 2) { %>
                                                <div class="step-actions mt-3">
                                                    <% if (swap.meetingDetails) { %>
                                                        <div class="meeting-details mb-3 p-3" style="background: rgba(255, 193, 7, 0.1); border: 1px solid rgba(255, 193, 7, 0.3); border-radius: 8px;">
                                                            <p class="mb-2"><strong>Scheduled Meeting:</strong></p>
                                                            <p class="mb-1"><i class="bi bi-calendar"></i> <%= new Date(swap.meetingDetails.datetime).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %></p>
                                                            <p class="mb-1"><i class="bi bi-clock"></i> <%= new Date(swap.meetingDetails.datetime).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %></p>
                                                            <p class="mb-0"><i class="bi bi-geo-alt"></i> <%= swap.meetingDetails.location || 'Location not specified' %></p>
                                                            
                                                            <% 
                                                            // Check confirmation status
                                                            const currentUserId = user._id.toString();
                                                            const isRequester = swap.requester._id.toString() === currentUserId;
                                                            const userConfirmed = swap.meetingDetails && (
                                                                (isRequester && swap.meetingDetails.requesterConfirmed) ||
                                                                (!isRequester && swap.meetingDetails.ownerConfirmed)
                                                            );
                                                            const otherConfirmed = swap.meetingDetails && (
                                                                (isRequester && swap.meetingDetails.ownerConfirmed) ||
                                                                (!isRequester && swap.meetingDetails.requesterConfirmed)
                                                            );
                                                            const bothConfirmed = swap.meetingDetails && swap.meetingDetails.requesterConfirmed && swap.meetingDetails.ownerConfirmed;
                                                            %>
                                                            
                                                            <!-- Confirmation Status -->
                                                            <div class="mt-3 pt-2" style="border-top: 1px solid rgba(255, 193, 7, 0.2);">
                                                                <p class="mb-2 text-white" style="font-size: 0.85rem;"><strong>Confirmation Status:</strong></p>
                                                                <div class="d-flex justify-content-between align-items-center">
                                                                    <div>
                                                                        <% if (userConfirmed) { %>
                                                                            <i class="bi bi-check-circle-fill text-success"></i> <span class="text-success">You confirmed</span>
                                                                        <% } else { %>
                                                                            <i class="bi bi-circle text-muted"></i> <span class="text-muted">You - Pending</span>
                                                                        <% } %>
                                                                    </div>
                                                                    <div>
                                                                        <% if (otherConfirmed) { %>
                                                                            <i class="bi bi-check-circle-fill text-success"></i> <span class="text-success">Partner confirmed</span>
                                                                        <% } else { %>
                                                                            <i class="bi bi-circle text-muted"></i> <span class="text-muted">Partner - Pending</span>
                                                                        <% } %>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        
                                                        <% if (!userConfirmed) { %>
                                                            <button class="btn btn-success btn-sm animate__animated animate__pulse animate__infinite" onclick="confirmMeeting('<%= swap._id %>')">
                                                                <i class="bi bi-check-circle"></i> Confirm This Meeting
                                                            </button>
                                                            <button class="btn btn-outline-secondary btn-sm ml-2" onclick="rescheduleMeeting('<%= swap._id %>')">
                                                                <i class="bi bi-calendar-x"></i> Request Changes
                                                            </button>
                                                            <p class="text-warning mt-2 mb-0" style="font-size: 0.8rem;">
                                                                <i class="bi bi-exclamation-triangle"></i> Waiting for your confirmation to proceed.
                                                            </p>
                                                        <% } else if (!bothConfirmed) { %>
                                                            <div class="alert alert-info" style="background: rgba(0, 123, 255, 0.1); border: 1px solid rgba(0, 123, 255, 0.3); margin-bottom: 0;">
                                                                <i class="bi bi-info-circle"></i> You confirmed! Waiting for your partner to confirm as well.
                                                            </div>
                                                        <% } %>
                                                    <% } %>
                                                </div>
                                            <% } %>
                                        </div>

                                        <!-- Step 3: Meet & Exchange -->
                                        <div class="progress-step <%= currentStep >= 3 ? 'active' : '' %> <%= currentStep > 3 ? 'completed' : '' %>" data-step="3" <% if (currentStep < 3) { %>style="display: none;"<% } %>>
                                            <div class="step-header">
                                                <div class="step-number">
                                                    <% if (currentStep > 3) { %>
                                                        <i class="bi bi-check"></i>
                                                    <% } else { %>
                                                        3
                                                    <% } %>
                                                </div>
                                                <div class="step-title">
                                                    <h6>Meet & Exchange</h6>
                                                    <small class="text-muted">Meet in person and exchange books</small>
                                                </div>
                                            </div>
                                            <% if (currentStep === 3) { %>
                                                <div class="step-actions mt-3">
                                                    <div class="meeting-confirmed mb-3 p-3" style="background: rgba(40, 167, 69, 0.1); border: 1px solid rgba(40, 167, 69, 0.3); border-radius: 8px;">
                                                        <p class="mb-2"><strong><i class="bi bi-check-circle-fill text-success"></i> Meeting Confirmed!</strong></p>
                                                        <p class="mb-1"><i class="bi bi-calendar"></i> <%= new Date(swap.meetingDetails.datetime).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %></p>
                                                        <p class="mb-1"><i class="bi bi-clock"></i> <%= new Date(swap.meetingDetails.datetime).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %></p>
                                                        <p class="mb-0"><i class="bi bi-geo-alt"></i> <%= swap.meetingDetails.location || 'Location confirmed' %></p>
                                                    </div>
                                                    <button class="btn btn-warning btn-sm" onclick="markAsExchanged('<%= swap._id %>')">
                                                        <i class="bi bi-people"></i> We Have Met & Exchanged Books
                                                    </button>
                                                    <p class="text-info mt-2 mb-0" style="font-size: 0.8rem;">
                                                        <i class="bi bi-info-circle"></i> Click this button after you have physically met and exchanged books.
                                                    </p>
                                                </div>
                                            <% } %>
                                        </div>

                                        <!-- Step 4: Confirm Receipt -->
                                        <div class="progress-step <%= currentStep >= 4 ? 'active' : '' %>" data-step="4" <% if (currentStep < 4) { %>style="display: none;"<% } %>>
                                            <div class="step-header">
                                                <div class="step-number">4</div>
                                                <div class="step-title">
                                                    <h6>Confirm Book Receipt</h6>
                                                    <small class="text-muted">Verify you received the correct book</small>
                                                </div>
                                            </div>
                                            <% if (currentStep === 4) { %>
                                                <div class="step-actions mt-3">
                                                    <% 
                                                    const currentUserId = user._id.toString();
                                                    const isRequester = swap.requester._id.toString() === currentUserId;
                                                    const userConfirmed = swap.receivedConfirmation && (
                                                        (isRequester && swap.receivedConfirmation.requesterConfirmed) ||
                                                        (!isRequester && swap.receivedConfirmation.ownerConfirmed)
                                                    );
                                                    const otherConfirmedReceipt = swap.receivedConfirmation && (
                                                        (isRequester && swap.receivedConfirmation.ownerConfirmed) ||
                                                        (!isRequester && swap.receivedConfirmation.requesterConfirmed)
                                                    );
                                                    const bothConfirmedReceipt = swap.receivedConfirmation && swap.receivedConfirmation.requesterConfirmed && swap.receivedConfirmation.ownerConfirmed;
                                                    %>
                                                    <% if (!userConfirmed) { %>
                                                        <div class="book-verification mb-3 p-3" style="background: rgba(0, 123, 255, 0.1); border: 1px solid rgba(0, 123, 255, 0.3); border-radius: 8px;">
                                                            <p class="mb-2"><strong>Please verify your book:</strong></p>
                                                            <p class="mb-2">Did you receive "<%= swap.requestedBook ? swap.requestedBook.title : 'the book' %>" in good condition?</p>
                                                            
                                                            <!-- Receipt Confirmation Status -->
                                                            <div class="mt-3 pt-2" style="border-top: 1px solid rgba(0, 123, 255, 0.2);">
                                                                <p class="mb-2 text-white" style="font-size: 0.85rem;"><strong>Receipt Status:</strong></p>
                                                                <div class="d-flex justify-content-between align-items-center">
                                                                    <div>
                                                                        <i class="bi bi-circle text-muted"></i> <span class="text-muted">You - Pending</span>
                                                                    </div>
                                                                    <div>
                                                                        <% if (otherConfirmedReceipt) { %>
                                                                            <i class="bi bi-check-circle-fill text-success"></i> <span class="text-success">Partner confirmed</span>
                                                                        <% } else { %>
                                                                            <i class="bi bi-circle text-muted"></i> <span class="text-muted">Partner - Pending</span>
                                                                        <% } %>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <button class="btn btn-success btn-sm animate__animated animate__heartBeat animate__infinite" onclick="confirmBookReceipt('<%= swap._id %>')">
                                                            <i class="bi bi-book-check"></i> Yes, I Received My Book!
                                                        </button>
                                                        <button class="btn btn-outline-danger btn-sm ml-2" onclick="reportIssue('<%= swap._id %>')">
                                                            <i class="bi bi-exclamation-triangle"></i> Report Issue
                                                        </button>
                                                        <p class="text-primary mt-2 mb-0" style="font-size: 0.8rem;">
                                                            <i class="bi bi-gift"></i> Earn 10 points when you confirm receipt!
                                                        </p>
                                                    <% } else { %>
                                                        <div class="receipt-confirmed mb-3 p-3" style="background: rgba(40, 167, 69, 0.1); border: 1px solid rgba(40, 167, 69, 0.3); border-radius: 8px;">
                                                            <p class="mb-2"><strong><i class="bi bi-check-circle-fill text-success"></i> You have confirmed receipt!</strong></p>
                                                            
                                                            <!-- Receipt Confirmation Status -->
                                                            <div class="mt-2 pt-2" style="border-top: 1px solid rgba(40, 167, 69, 0.2);">
                                                                <p class="mb-2 text-white" style="font-size: 0.85rem;"><strong>Receipt Status:</strong></p>
                                                                <div class="d-flex justify-content-between align-items-center">
                                                                    <div>
                                                                        <i class="bi bi-check-circle-fill text-success"></i> <span class="text-success">You confirmed</span>
                                                                    </div>
                                                                    <div>
                                                                        <% if (otherConfirmedReceipt) { %>
                                                                            <i class="bi bi-check-circle-fill text-success"></i> <span class="text-success">Partner confirmed</span>
                                                                        <% } else { %>
                                                                            <i class="bi bi-circle text-warning"></i> <span class="text-warning">Partner - Pending</span>
                                                                        <% } %>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            
                                                            <% if (!bothConfirmedReceipt) { %>
                                                                <small class="text-muted d-block mt-2">Waiting for your partner to confirm. The swap will complete automatically when both confirm.</small>
                                                            <% } %>
                                                        </div>
                                                    <% } %>
                                                </div>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                            </div> <!-- Close active-swaps-container -->
                        <% } else { %>
                            <div class="empty-state">
                                <i class="bi bi-hourglass-split"></i>
                                <h6>No Active Swaps</h6>
                                <p class="text-muted">You don't have any active swaps at the moment. Start by finding books you'd like to read!</p>
                                <button class="btn btn-gradient" onclick="$('#find-matches-tab').tab('show')">Start Swapping</button>
                            </div>
                        <% } %>
                        
                        <!-- Pagination for Active Swaps -->
                        <% if (activeSwapsFiltered && activeSwapsFiltered.length > 6) { %>
                            <div class="pagination-container mt-4" id="active-swaps-pagination">
                                <!-- Pagination will be generated by JavaScript -->
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>

            </div> <!-- Close tab-content -->
        </div> <!-- Close card-dark -->
    </div> <!-- Close container -->
</main>

<!-- Modern Swap Request Modal -->
<div class="modal fade" id="swapRequestModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content modal-modern">
            <div class="modal-header modal-header-modern">
                <div class="modal-title-section">
                    <h4 class="modal-title mb-1">
                        <i class="bi bi-arrow-left-right text-primary"></i> Complete Your Swap
                    </h4>
                    <p class="modal-subtitle">Choose a book from your library to offer in exchange</p>
                </div>
                <button type="button" class="btn-close-modern" data-dismiss="modal">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            
            <div class="modal-body modal-body-modern">
                <!-- Step Indicator -->
                <div class="swap-steps mb-4">
                    <div class="step-indicator">
                        <div class="step active" data-step="1">
                            <div class="step-number">1</div>
                            <div class="step-label">Select Your Book</div>
                        </div>
                        <div class="step-line"></div>
                        <div class="step" data-step="2">
                            <div class="step-number">2</div>
                            <div class="step-label">Review & Send</div>
                        </div>
                        <div class="step-line"></div>
                        <div class="step" data-step="3">
                            <div class="step-number">3</div>
                            <div class="step-label">Chat & Arrange</div>
                        </div>
                    </div>
                </div>

                <!-- Step 1: Book Selection -->
                <div id="step-1" class="swap-step active">
                    <div class="row">
                        <!-- Requested Book Display -->
                        <div class="col-lg-4">
                            <div class="book-display-card">
                                <div class="book-display-header">
                                    <h6><i class="bi bi-star text-warning"></i> You Want</h6>
                                </div>
                                <div id="requested-book-display" class="book-display-content">
                                    <!-- Will be populated by JavaScript -->
                                </div>
                            </div>
                        </div>

                        <!-- Your Library -->
                        <div class="col-lg-8">
                            <div class="library-selection-card">
                                <div class="library-header">
                                    <h6><i class="bi bi-book text-primary"></i> Choose from Your Library</h6>
                                    <p class="text-muted mb-0">Select a book to offer in exchange</p>
                                </div>
                                <div class="library-search mb-3">
                                    <div class="search-input-group">
                                        <i class="bi bi-search search-icon"></i>
                                        <input type="text" id="library-search" class="form-control-modern" placeholder="Search your books...">
                                    </div>
                                </div>
                                <div id="user-books-grid" class="user-books-grid">
                                    <% if (user.books && user.books.length > 0) { %>
                                        <% user.books.forEach(book => { %>
                                            <div class="user-book-card" data-book-id="<%= book._id %>" onclick="selectUserBook('<%= book._id %>')">
                                                <div class="book-cover-container">
                                                    <img src="<%= book.image || book.coverImage || '/images/placeholder-book.jpg' %>" 
                                                         alt="<%= book.title %>" class="book-cover-professional user-book-cover"
                                                         style="width: 100%; height: 120px; object-fit: cover; border-radius: 8px; box-shadow: 0 4px 15px rgba(0,0,0,0.3); transition: transform 0.3s ease;"
                                                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                                    <div class="user-book-cover" style="display: none; align-items: center; justify-content: center; height: 120px; background: linear-gradient(135deg, #3BB7FB, #667eea); border-radius: 8px;">
                                                        <i class="bi bi-book text-white" style="font-size: 1.5rem;"></i>
                                                    </div>
                                                </div>
                                                <div class="user-book-info">
                                                    <h6 class="book-title"><%= book.title %></h6>
                                                    <p class="book-author">by <%= book.author %></p>
                                                    <div class="book-meta">
                                                        <span class="genre-badge"><%= book.genre %></span>
                                                        <span class="condition-text"><%= book.condition || 'Good' %></span>
                                                    </div>
                                                </div>
                                                <div class="selection-indicator">
                                                    <i class="bi bi-check-circle"></i>
                                                </div>
                                            </div>
                                        <% }); %>
                                    <% } else { %>
                                        <div class="empty-library">
                                            <div class="empty-state-modern">
                                                <div class="empty-icon">
                                                    <i class="bi bi-book"></i>
                                                </div>
                                                <h5 class="empty-title">No Books in Your Library</h5>
                                                <p class="empty-description">
                                                    You need to add books to your library before you can create swap requests.
                                                    Start building your collection now!
                                                </p>
                                                <a href="/library" class="btn btn-gradient mt-3" data-dismiss="modal">
                                                    <i class="bi bi-plus-circle me-2"></i> Add Books to Library
                                                </a>
                                            </div>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Step 2: Review & Message -->
                <div id="step-2" class="swap-step">
                    <div class="swap-preview-section">
                        <div class="row">
                            <!-- Swap Preview: What You're Getting -->
                            <div class="col-md-6">
                                <div class="book-display-card">
                                    <div class="book-display-header">
                                        <h6><i class="bi bi-star text-warning"></i> You're Requesting</h6>
                                    </div>
                                    <div id="requested-book-preview" class="book-display-content">
                                        <!-- Populated by JavaScript -->
                                    </div>
                                </div>
                            </div>

                            <!-- Swap Preview: What You're Offering -->
                            <div class="col-md-6">
                                <div class="book-display-card">
                                    <div class="book-display-header">
                                        <h6><i class="bi bi-book text-primary"></i> You're Offering</h6>
                                    </div>
                                    <div id="selected-book-preview" class="book-display-content">
                                        <!-- Populated by JavaScript -->
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Swap Message -->
                        <div class="mt-4">
                            <div class="message-section">
                                <label for="swap-message" class="form-label text-white mb-2">
                                    <i class="bi bi-chat-dots text-primary me-2"></i>Your Message <span class="text-danger">*</span>
                                </label>
                                <p class="text-muted small mb-3">
                                    <i class="bi bi-info-circle me-1"></i>
                                    Tell them why you're interested in this book and make a great first impression!
                                </p>
                                <textarea 
                                    id="swap-message" 
                                    class="form-control-modern" 
                                    rows="5" 
                                    placeholder="Hi! I'm really interested in your book because..."
                                    style="resize: vertical; min-height: 120px;"
                                ></textarea>
                                <div class="d-flex justify-content-between align-items-center mt-2">
                                    <small class="text-muted">
                                        <span id="message-char-count">0</span>/500 characters
                                    </small>
                                    <small class="text-muted">
                                        <i class="bi bi-lightbulb"></i> Tip: Be friendly and specific!
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal Footer with Navigation Buttons -->
            <div class="modal-footer modal-footer-modern">
                <button type="button" class="btn btn-outline-light" data-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i> Cancel
                </button>
                <button type="button" id="back-step-btn" class="btn btn-outline-light" onclick="prevStep()" style="display: none;">
                    <i class="bi bi-arrow-left me-1"></i> Back
                </button>
                <button type="button" id="next-step-btn" class="btn btn-gradient" onclick="nextStep()" disabled>
                    Next Step <i class="bi bi-arrow-right ms-1"></i>
                </button>
                <button type="button" id="send-request-btn" class="btn btn-success" onclick="submitSwapRequest()" style="display: none;">
                    <i class="bi bi-send me-1"></i> Send Swap Request
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Match Preferences Modal -->
<div class="modal fade" id="matchPreferencesModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content modal-modern">
            <div class="modal-header card-header">
                <h5 class="modal-title">
                    <i class="bi bi-sliders text-primary"></i> Match Preferences
                </h5>
                <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body card-body">
                <div class="form-group">
                    <div class="pref-section-title">Preferred Genres</div>
                    <div class="pref-hint">Pick a few genres you enjoy</div>
                    <div id="genre-chips" class="d-flex flex-wrap"></div>
                </div>
                <hr class="bg-secondary">
                <div class="form-group">
                    <div class="pref-section-title">Match Distance <span id="distanceValue" class="range-value"></span></div>
                    <input type="range" min="5" max="100" step="5" id="match-distance-range" class="pref-range">
                    <div class="pref-hint">Set maximum distance for matches</div>
                </div>
                <hr class="bg-secondary">
                <div class="form-group">
                    <div class="pref-section-title">Book Condition</div>
                    <div class="pref-btn-group" id="condition-group">
                        <button type="button" data-cond="Any" class="btn btn-outline-professional btn-sm">Any</button>
                        <button type="button" data-cond="Excellent" class="btn btn-outline-professional btn-sm">Excellent</button>
                        <button type="button" data-cond="Good" class="btn btn-outline-professional btn-sm">Good</button>
                        <button type="button" data-cond="Fair" class="btn btn-outline-professional btn-sm">Fair</button>
                    </div>
                </div>
            </div>
            <div class="modal-footer card-header" style="border-top:1px solid #2A2D35">
                <button type="button" class="btn btn-outline-professional" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-professional" onclick="saveMatchPreferences()">Save Preferences</button>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.bundle.min.js"></script>
<script>
// ========== MODERN SWAP MATCHER JAVASCRIPT ==========

// Modern Notification System
function showNotification(title, message, type = 'info', duration = 5000) {
    // Remove any existing notification
    const existingToast = document.querySelector('.notification-toast');
    if (existingToast) {
        existingToast.remove();
    }

    // Create notification element
    const toast = document.createElement('div');
    toast.className = `notification-toast ${type}`;
    
    // Choose icon based on type
    let icon = 'bi-info-circle';
    if (type === 'success') icon = 'bi-check-circle';
    else if (type === 'error') icon = 'bi-x-circle';
    else if (type === 'warning') icon = 'bi-exclamation-triangle';

    toast.innerHTML = `
        <div class="toast-content">
            <i class="bi ${icon} toast-icon"></i>
            <div class="toast-message">
                <h6>${title}</h6>
                <p>${message}</p>
            </div>
        </div>
        <button class="toast-close" onclick="this.parentElement.remove()">
            <i class="bi bi-x"></i>
        </button>
    `;

    // Add to page
    document.body.appendChild(toast);

    // Show with animation
    setTimeout(() => toast.classList.add('show'), 100);

    // Auto-remove after duration
    if (duration > 0) {
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 400);
        }, duration);
    }
}

// Helper functions for common notifications
function showSuccessMessage(message, title = 'Success') {
    showNotification(title, message, 'success', 4000);
}

function showErrorMessage(message, title = 'Error') {
    showNotification(title, message, 'error', 5000);
}

function showWarningMessage(message, title = 'Warning') {
    showNotification(title, message, 'warning', 4500);
}

function showInfoMessage(message, title = 'Info') {
    showNotification(title, message, 'info', 4000);
}

// Button Loading State Management
function setButtonLoading(buttonSelector, isLoading = true) {
    const button = $(buttonSelector);
    if (isLoading) {
        button.addClass('btn-loading').prop('disabled', true);
    } else {
        button.removeClass('btn-loading').prop('disabled', false);
    }
}

let selectedUserBook = null;
let targetBook = null;
let targetBookData = null;
let currentStep = 1;
let allBooks = [];
let filteredBooks = [];
let discoveryState = { items: [], page: 1, pageSize: 12 };
let currentLocationMode = 'local'; // 'local' or 'global'
let userLocation = '<%= user.location || "" %>';

// Initialize the page
function initializeSwapMatcher() {
    console.log('🚀 Initializing Modern Swap Matcher with location-based filtering');
    loadAllAvailableBooks();
    setupEventListeners();
}

// Load all available books for swapping
function loadAllAvailableBooks() {
    showBooksLoadingState();
    
    // Load available books with location filtering enabled by default
    $.get('/api/books/search', {
        limit: 100, // Get more books initially
        sortBy: 'createdAt',
        enableLocationFilter: 'true' // Enable location-based filtering
    })
        .done(function(response) {
            console.log('📚 Available books loaded:', response);
            const books = response.books || response || [];
            displayAvailableBooks(books);
            
            // Show location filter status
            if (books.length > 0) {
                showLocationFilterStatus(true, books.length);
            } else {
                // If no local books found, try loading all books
                loadAllBooksWithoutLocationFilter();
            }
        })
        .fail(function(xhr) {
            console.error('❌ Failed to load books:', xhr);
            showBooksErrorState();
        });
}

// Show loading state for books
function showBooksLoadingState() {
    $('#books-container').html(`
        <div class="loading-state">
            <div class="loading-spinner">
                <div class="spinner-border text-primary" role="status"></div>
            </div>
            <h6 class="mt-3">Discovering Amazing Books...</h6>
            <p class="text-muted">Finding the perfect books for you to swap</p>
        </div>
    `);
}

// Show error state for books
function showBooksErrorState() {
    $('#books-container').html(`
        <div class="loading-state">
            <i class="bi bi-exclamation-triangle text-warning" style="font-size: 3rem; margin-bottom: 20px;"></i>
            <h6>Unable to Load Books</h6>
            <p class="text-muted">Please check your connection and try again</p>
            <button class="btn-modern" onclick="loadAllAvailableBooks()">
                <i class="bi bi-arrow-clockwise"></i> Retry
            </button>
        </div>
    `);
}

// Load books without location filtering (fallback)
function loadAllBooksWithoutLocationFilter() {
    console.log('🌍 No local books found, loading all available books...');
    
    $.get('/api/books/search', {
        limit: 100,
        sortBy: 'createdAt'
        // No location filter
    })
        .done(function(response) {
            console.log('📚 All books loaded:', response);
            const books = response.books || response || [];
            displayAvailableBooks(books);
            showLocationFilterStatus(false, books.length);
        })
        .fail(function(xhr) {
            console.error('❌ Failed to load all books:', xhr);
            showBooksErrorState();
        });
}

// Show location filter status to user
function showLocationFilterStatus(isFiltered, bookCount) {
    // Remove existing status
    $('.location-filter-status').remove();
    
    const statusHtml = isFiltered 
        ? `<div class="location-filter-status alert alert-success">
             <i class="bi bi-geo-alt"></i>
             <span>Showing ${bookCount} books in your area</span>
             <button class="btn btn-sm btn-outline-primary ml-2" onclick="loadAllBooksWithoutLocationFilter()">
                 <i class="bi bi-globe"></i> Show All Books
             </button>
           </div>`
        : `<div class="location-filter-status alert alert-info">
             <i class="bi bi-globe"></i>
             <span>Showing ${bookCount} books from all locations</span>
             <button class="btn btn-sm btn-outline-success ml-2" onclick="loadAllAvailableBooks()">
                 <i class="bi bi-geo-alt"></i> Show Local Books Only
             </button>
           </div>`;
    
    // Add the status before the books container
    $('#books-container').before(statusHtml);
}

// Display available books in the discovery grid
function displayAvailableBooks(books) {
    allBooks = books;
    filteredBooks = [...books];
    
    // Apply initial location filter
    applyLocationFilter();
}

// Render the books grid
function renderBooksGrid() {
    const start = (discoveryState.page - 1) * discoveryState.pageSize;
    const end = start + discoveryState.pageSize;
    const pageBooks = filteredBooks.slice(start, end);
    
    if (pageBooks.length === 0) {
        $('#books-container').html(`
            <div class="loading-state">
                <i class="bi bi-search text-muted" style="font-size: 3rem; margin-bottom: 20px;"></i>
                <h6>No Books Found</h6>
                <p class="text-muted">Try adjusting your filters or check back later for new books</p>
            </div>
        `);
        return;
    }
    
    let html = '<div class="discovery-books-grid">';
    
    pageBooks.forEach(book => {
        const imageSrc = getBookImageSrc(book);
        const ownerName = book.owner?.username || book.owner?.fullname || 'Unknown User';
        
        html += `
            <div class="discovery-book-card" onclick="selectBookForSwap('${book._id}')">
                <img src="${imageSrc}" class="book-cover-professional discovery-book-cover" alt="${book.title}" 
                     style="width: 100%; height: 160px; object-fit: cover; border-radius: 10px; box-shadow: 0 6px 20px rgba(0,0,0,0.4); transition: transform 0.3s ease;"
                     onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                <div class="discovery-book-cover" style="display: none; align-items: center; justify-content: center; height: 160px; background: linear-gradient(135deg, #3BB7FB, #667eea); border-radius: 10px;">
                    <i class="bi bi-book text-white" style="font-size: 2rem;"></i>
                </div>
                <div class="discovery-book-info">
                    <h6 class="discovery-book-title">${book.title}</h6>
                    <p class="discovery-book-author">by ${book.author}</p>
                    <div class="discovery-book-meta">
                        <span class="discovery-genre-badge">${book.genre}</span>
                        <span class="discovery-condition">${book.condition || 'Good'}</span>
                    </div>
                    <p class="discovery-owner">
                        <i class="bi bi-person"></i> ${ownerName}
                    </p>
                    ${currentLocationMode === 'local' ? 
                        `<button class="discovery-swap-btn btn-primary" onclick="event.stopPropagation(); selectBookForSwap('${book._id}')">
                            <i class="bi bi-arrow-left-right"></i> Start Swap
                        </button>` :
                        `<button class="discovery-swap-btn btn-secondary" disabled>
                            <i class="bi bi-eye"></i> View Only
                        </button>`
                    }
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    html += renderBooksPagination();
    
    $('#books-container').html(html);
}

// Get book image source with fallback
function getBookImageSrc(book) {
    // Priority order: Google Books API image, custom image, cover image, fallback
    const hasImage = book.image || book.coverImage || book.imageUrl || book.coverUrl;
    let imageSrc = '/images/placeholder-book.jpg';
    
    if (hasImage) {
        if (hasImage.startsWith('http')) {
            // Google Books API URLs or other external images
            imageSrc = hasImage;
        } else if (hasImage.startsWith('/')) {
            // Local server images
            imageSrc = hasImage;
        } else {
            // Relative paths
            imageSrc = '/' + hasImage;
        }
    }
    
    return imageSrc;
}

// Render pagination for books
function renderBooksPagination() {
    const total = filteredBooks.length;
    const totalPages = Math.max(1, Math.ceil(total / discoveryState.pageSize));
    
    if (totalPages <= 1) return '';
    
    let html = '<div class="d-flex justify-content-center mt-4">';
    html += '<nav aria-label="Books pagination"><ul class="pagination pagination-custom">';
    
    const prevDisabled = discoveryState.page === 1 ? 'disabled' : '';
    const nextDisabled = discoveryState.page === totalPages ? 'disabled' : '';
    
    html += `<li class="page-item ${prevDisabled}">
                <a class="page-link" href="#" onclick="changeBooksPage(${discoveryState.page - 1}); return false;">
                    <i class="bi bi-chevron-left"></i> Prev
                </a>
             </li>`;
    
    for (let p = 1; p <= totalPages; p++) {
        const active = discoveryState.page === p ? 'active' : '';
        html += `<li class="page-item ${active}">
                    <a class="page-link" href="#" onclick="changeBooksPage(${p}); return false;">${p}</a>
                 </li>`;
    }
    
    html += `<li class="page-item ${nextDisabled}">
                <a class="page-link" href="#" onclick="changeBooksPage(${discoveryState.page + 1}); return false;">
                    Next <i class="bi bi-chevron-right"></i>
                </a>
             </li>`;
    
    html += '</ul></nav></div>';
    return html;
}

// Change books page
function changeBooksPage(page) {
    const totalPages = Math.max(1, Math.ceil(filteredBooks.length / discoveryState.pageSize));
    if (page < 1 || page > totalPages) return;
    
    discoveryState.page = page;
    renderBooksGrid();
}

// Select a book for swap (opens the modal)
function selectBookForSwap(bookId) {
    console.log('📖 Selected book for swap:', bookId);
    
    // Check if we're in global mode
    if (currentLocationMode === 'global') {
        showErrorMessage('Swapping is only available in Local mode. Switch to Local to swap books in your area.');
        return;
    }
    
    // Store the target book
    targetBook = bookId;
    
    // Get book details
    $.get(`/api/books/${bookId}`)
        .done(function(response) {
            targetBookData = response.book || response;
            console.log('📚 Target book data:', targetBookData);
            
            // Reset modal state
            currentStep = 1;
            selectedUserBook = null;
            
            // Show the swap modal
            showSwapModal();
        })
        .fail(function(xhr) {
            console.error('❌ Failed to load book details:', xhr);
            showErrorMessage('Failed to load book details. Please try again.');
        });
}

// Show the modern swap modal
function showSwapModal() {
    // Reset step state
    updateStepIndicator(1);
    showStep(1);
    
    // Display the requested book
    displayRequestedBook();
    
    // Reset user book selection
    $('.user-book-card').removeClass('selected');
    $('#next-step-btn').prop('disabled', true);
    
    // Show the modal
    $('#swapRequestModal').modal('show');
}

// Display the requested book in the modal
function displayRequestedBook() {
    if (!targetBookData) return;
    
    const imageSrc = getBookImageSrc(targetBookData);
    const ownerName = targetBookData.owner?.username || targetBookData.owner?.fullname || 'Unknown User';
    
    const bookHtml = `
        <div class="text-center">
            <img src="${imageSrc}" class="book-cover-professional img-fluid mb-3" 
                 alt="${targetBookData.title}" 
                 style="max-height: 180px; width: 100%; max-width: 140px; object-fit: cover; border-radius: 12px; box-shadow: 0 8px 25px rgba(0,0,0,0.3); transition: transform 0.3s ease;"
                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div style="display: none; align-items: center; justify-content: center; height: 180px; width: 100%; max-width: 140px; background: linear-gradient(135deg, #3BB7FB, #667eea); border-radius: 12px; margin: 0 auto 1rem; box-shadow: 0 8px 25px rgba(0,0,0,0.3);">
                <i class="bi bi-book text-white" style="font-size: 2rem;"></i>
            </div>
            <h5 class="text-white mb-2">${targetBookData.title}</h5>
            <p class="text-muted mb-2">by ${targetBookData.author}</p>
            <div class="d-flex justify-content-center gap-2 mb-2">
                <span class="badge badge-info">${targetBookData.genre}</span>
                <span class="badge badge-success">${targetBookData.condition || 'Good'}</span>
            </div>
            <small class="text-muted">
                <i class="bi bi-person"></i> Available from ${ownerName}
            </small>
        </div>
    `;
    
    $('#requested-book-display').html(bookHtml);
}

// Select user book in the modal
function selectUserBook(bookId) {
    selectedUserBook = bookId;
    
    // Update visual selection
    $('.user-book-card').removeClass('selected');
    $(`.user-book-card[data-book-id="${bookId}"]`).addClass('selected');
    
    // Enable next button
    $('#next-step-btn').prop('disabled', false);
    
    console.log('✅ Selected user book:', bookId);
}

function renderPagination() {
    const total = matchesState.items.length;
    const totalPages = Math.max(1, Math.ceil(total / matchesState.pageSize));
    if (totalPages <= 1) return '';
    let pager = '<div class="d-flex justify-content-center mt-4">';
    pager += `<nav aria-label="Matches pagination"><ul class="pagination pagination-custom">`;
    const prevDisabled = matchesState.page === 1 ? 'disabled' : '';
    const nextDisabled = matchesState.page === totalPages ? 'disabled' : '';
    pager += `<li class="page-item ${prevDisabled}"><a class="page-link" href="#" onclick="changeMatchesPage(${matchesState.page - 1}); return false;"><i class="bi bi-chevron-left"></i> Prev</a></li>`;
    for (let p = 1; p <= totalPages; p++) {
        const active = matchesState.page === p ? 'active' : '';
        pager += `<li class="page-item ${active}"><a class="page-link" href="#" onclick="changeMatchesPage(${p}); return false;">${p}</a></li>`;
    }
    pager += `<li class="page-item ${nextDisabled}"><a class="page-link" href="#" onclick="changeMatchesPage(${matchesState.page + 1}); return false;">Next <i class="bi bi-chevron-right"></i></a></li>`;
    pager += `</ul></nav>`;
    pager += '</div>';
    return pager;
}

function changeMatchesPage(p) {
    const totalPages = Math.max(1, Math.ceil(matchesState.items.length / matchesState.pageSize));
    if (p < 1 || p > totalPages) return;
    matchesState.page = p;
    renderMatchesPage();
}

// Step navigation functions
function nextStep() {
    if (currentStep === 1) {
        if (!selectedUserBook) {
            showErrorMessage('Please select a book from your library first');
            return;
        }
        
        // Load selected book data and move to step 2
        $.get(`/api/books/${selectedUserBook}`)
            .done(function(response) {
                const selectedBookData = response.book || response;
                displaySwapPreview(selectedBookData, targetBookData);
                
                currentStep = 2;
                updateStepIndicator(2);
                showStep(2);
            })
            .fail(function() {
                showErrorMessage('Failed to load book details');
            });
    }
}

function previousStep() {
    if (currentStep === 2) {
        currentStep = 1;
        updateStepIndicator(1);
        showStep(1);
    }
}

// Add prevStep alias for the onclick handler
function prevStep() {
    previousStep();
}

// Update step indicator
function updateStepIndicator(step) {
    $('.step').removeClass('active');
    $(`.step[data-step="${step}"]`).addClass('active');
}

// Show specific step
function showStep(step) {
    $('.swap-step').removeClass('active');
    $(`#step-${step}`).addClass('active');
    
    // Update button visibility
    $('#back-step-btn').toggle(step > 1);
    $('#next-step-btn').toggle(step === 1);
    $('#send-request-btn').toggle(step === 2);
}

// Display swap preview in step 2
function displaySwapPreview(offeredBook, requestedBook) {
    const offeredImageSrc = getBookImageSrc(offeredBook);
    const requestedImageSrc = getBookImageSrc(requestedBook);
    
    // Display the book you're offering
    $('#selected-book-preview').html(`
        <div class="text-center">
            <img src="${offeredImageSrc}" class="book-cover-professional img-fluid mb-3" 
                 alt="${offeredBook.title}"
                 style="max-height: 150px; width: 100%; max-width: 120px; object-fit: cover; border-radius: 12px; box-shadow: 0 6px 20px rgba(0,0,0,0.3); transition: transform 0.3s ease;"
                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div style="display: none; align-items: center; justify-content: center; height: 150px; width: 100%; max-width: 120px; background: linear-gradient(135deg, #3BB7FB, #667eea); border-radius: 12px; margin: 0 auto 1rem; box-shadow: 0 6px 20px rgba(0,0,0,0.3);">
                <i class="bi bi-book text-white" style="font-size: 1.5rem;"></i>
            </div>
            <h6 class="text-white mb-2">${offeredBook.title}</h6>
            <p class="text-muted mb-2">by ${offeredBook.author}</p>
            <div class="d-flex justify-content-center gap-2">
                <span class="badge badge-info">${offeredBook.genre}</span>
                <span class="badge badge-success">${offeredBook.condition || 'Good'}</span>
            </div>
        </div>
    `);
    
    // Display the book you're requesting
    $('#requested-book-preview').html(`
        <div class="text-center">
            <img src="${requestedImageSrc}" class="book-cover-professional img-fluid mb-3" 
                 alt="${requestedBook.title}"
                 style="max-height: 150px; width: 100%; max-width: 120px; object-fit: cover; border-radius: 12px; box-shadow: 0 6px 20px rgba(0,0,0,0.3); transition: transform 0.3s ease;"
                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div style="display: none; align-items: center; justify-content: center; height: 150px; width: 100%; max-width: 120px; background: linear-gradient(135deg, #3BB7FB, #667eea); border-radius: 12px; margin: 0 auto 1rem; box-shadow: 0 6px 20px rgba(0,0,0,0.3);">
                <i class="bi bi-book text-white" style="font-size: 1.5rem;"></i>
            </div>
            <h6 class="text-white mb-2">${requestedBook.title}</h6>
            <p class="text-muted mb-2">by ${requestedBook.author}</p>
            <div class="d-flex justify-content-center gap-2">
                <span class="badge badge-info">${requestedBook.genre}</span>
                <span class="badge badge-success">${requestedBook.condition || 'Good'}</span>
            </div>
        </div>
    `);
}

// Filter and search functionality
function showAdvancedFilters() {
    $('#advanced-filters').slideToggle(300);
}

function applyFilters() {
    const genreFilter = $('#genre-filter').val();
    const conditionFilter = $('#condition-filter').val();
    const sortBy = $('#sort-filter').val();
    
    // Start with all books
    filteredBooks = [...allBooks];
    
    // Apply genre filter
    if (genreFilter) {
        filteredBooks = filteredBooks.filter(book => book.genre === genreFilter);
    }
    
    // Apply condition filter
    if (conditionFilter) {
        filteredBooks = filteredBooks.filter(book => book.condition === conditionFilter);
    }
    
    // Apply sorting
    switch (sortBy) {
        case 'title':
            filteredBooks.sort((a, b) => a.title.localeCompare(b.title));
            break;
        case 'author':
            filteredBooks.sort((a, b) => a.author.localeCompare(b.author));
            break;
        case 'condition':
            const conditionOrder = ['New', 'Like New', 'Very Good', 'Good', 'Fair'];
            filteredBooks.sort((a, b) => {
                const aIndex = conditionOrder.indexOf(a.condition || 'Good');
                const bIndex = conditionOrder.indexOf(b.condition || 'Good');
                return aIndex - bIndex;
            });
            break;
        case 'newest':
            filteredBooks.sort((a, b) => new Date(b.createdAt || 0) - new Date(a.createdAt || 0));
            break;
        default:
            filteredBooks.sort((a, b) => a.title.localeCompare(b.title));
            break;
    }
    
    // Reset page and re-render
    discoveryState.page = 1;
    updateBooksCount();
    renderBooksGrid();
}

function clearFilters() {
    $('#genre-filter').val('');
    $('#condition-filter').val('');
    $('#sort-filter').val('title');
    applyFilters();
}

function updateBooksCount() {
    const count = filteredBooks.length;
    const total = allBooks.length;
    $('#matches-count').text(`${count} of ${total} books available`);
}

function refreshDiscovery() {
    loadAllAvailableBooks();
}

// Location mode functions
function setLocationMode(mode) {
    console.log('📍 Setting location mode to:', mode);
    currentLocationMode = mode;
    
    // Update UI
    $('.toggle-btn').removeClass('active');
    $(`#${mode}-toggle`).addClass('active');
    
    // Update info text
    const infoText = mode === 'local' 
        ? 'Showing books in your area • Swap available' 
        : 'Browsing all books globally • View only';
    $('#location-info').text(infoText);
    
    // Apply location filtering
    applyLocationFilter();
}

function applyLocationFilter() {
    if (currentLocationMode === 'local') {
        // Filter books by user's location
        if (userLocation && userLocation.trim()) {
            filteredBooks = allBooks.filter(book => {
                if (!book.owner || !book.owner.location) return false;
                return book.owner.location.toLowerCase().includes(userLocation.toLowerCase());
            });
        } else {
            // If user has no location set, show all books but with warning
            filteredBooks = [...allBooks];
            console.warn('⚠️ User location not set, showing all books');
        }
        
        // Enable swap buttons for local mode
        $('.discovery-swap-btn').prop('disabled', false).text('Swap').removeClass('btn-secondary').addClass('btn-primary');
    } else {
        // Global mode - show all books but disable swap functionality
        filteredBooks = [...allBooks];
        
        // Disable swap buttons for global mode
        $('.discovery-swap-btn').prop('disabled', true).text('View Only').removeClass('btn-primary').addClass('btn-secondary');
    }
    
    // Re-apply other filters
    const currentGenre = $('#genre-filter').val();
    const currentCondition = $('#condition-filter').val();
    
    if (currentGenre) {
        filteredBooks = filteredBooks.filter(book => book.genre === currentGenre);
    }
    
    if (currentCondition) {
        filteredBooks = filteredBooks.filter(book => book.condition === currentCondition);
    }
    
    // Update display
    updateBooksCount();
    renderBooksGrid();
}

// Setup event listeners
function setupEventListeners() {
    // Filter change events
    $('#genre-filter, #condition-filter, #sort-filter').on('change', applyFilters);
    $('#clear-filters').on('click', clearFilters);
    
    // Library search
    $('#library-search').on('input', function() {
        const searchTerm = $(this).val().toLowerCase();
        $('.user-book-card').each(function() {
            const title = $(this).find('.book-title').text().toLowerCase();
            const author = $(this).find('.book-author').text().toLowerCase();
            const isVisible = title.includes(searchTerm) || author.includes(searchTerm);
            $(this).toggle(isVisible);
        });
    });
}

// Start chat conversation before sending swap request
function startChatConversation() {
    if (!targetBookData || !targetBookData.owner) {
        showErrorMessage('Unable to find book owner information');
        return;
    }
    
    console.log('💬 Starting chat conversation with book owner');
    
    // Close the swap modal first
    $('#swapRequestModal').modal('hide');
    
    // Get owner information
    const ownerUserId = targetBookData.owner._id || targetBookData.owner.id;
    const ownerUsername = targetBookData.owner.username || targetBookData.owner.fullname || targetBookData.owner.email || 'Book Owner';
    
    // First try to use the real-time chat system from navbar
    if (window.realTimeChat) {
        try {
            // Expand chat widget if minimized
            const chatWidget = document.getElementById('real-chat-widget');
            if (chatWidget && chatWidget.classList.contains('minimized')) {
                chatWidget.classList.remove('minimized');
            }
            
            // Start the chat
            window.realTimeChat.startChat(ownerUserId, ownerUsername);
            
            showSuccessMessage('Chat started! You can now discuss the book swap.');
            return;
            
        } catch (error) {
            console.error('❌ Real-time chat failed:', error);
        }
    }
    
    // Fallback: Use the navbar chat system directly
    if (typeof openUserChat === 'function') {
        try {
            openUserChat(ownerUserId, ownerUsername);
            showSuccessMessage('Chat opened! You can now discuss the book swap.');
            return;
        } catch (error) {
            console.error('❌ Navbar chat failed:', error);
        }
    }
    
    // Final fallback: Show the built-in chat modal with book context
    try {
        $('#chat-title').text(`Chat with ${ownerUsername}`);
        $('#chat-swap-summary').html(`
            <div class="d-flex align-items-center">
                <img src="${getBookImageSrc(targetBookData)}" style="width: 40px; height: 40px; object-fit: cover; border-radius: 8px;" class="me-3">
                <div>
                    <h6 class="mb-1">About: ${targetBookData.title}</h6>
                    <small class="text-muted">by ${targetBookData.author}</small>
                </div>
            </div>
        `);
        $('#chat-messages').html(`
            <div class="text-center text-muted py-4">
                <i class="bi bi-chat-dots text-primary" style="font-size: 2rem;"></i>
                <h6 class="mt-2">Start Your Conversation</h6>
                <p>Discuss the book swap with ${ownerUsername}</p>
            </div>
        `);
        $('#chatModal').modal('show');
        
        // Focus on input
        setTimeout(() => {
            $('#chat-message-input').focus();
        }, 500);
        
        showSuccessMessage('Chat opened! Start the conversation below.');
        
    } catch (error) {
        console.error('❌ All chat methods failed:', error);
        showErrorMessage('Chat system temporarily unavailable. Please try sending a swap request with a message instead.');
    }
}

// Submit swap request
function submitSwapRequest() {
    console.log('🔄 Submitting swap request...');
    console.log('Selected User Book:', selectedUserBook);
    console.log('Target Book:', targetBook);
    
    if (!selectedUserBook || !targetBook) {
        console.error('❌ Missing book selection:', { selectedUserBook, targetBook });
        showNotification('Incomplete Request', 'Please complete all steps before sending the request', 'warning');
        return;
    }
    
    const message = $('#swap-message').val().trim();
    console.log('Message length:', message.length);
    
    // Validate that a message is provided (make it required)
    if (!message) {
        showNotification('Message Required', 'Please write a message to introduce yourself and explain why you want this book. This helps build trust with other users.', 'warning');
        $('#swap-message').focus();
        return;
    }
    
    if (message.length < 10) {
        showNotification('Message Too Short', 'Please write a more detailed message (at least 10 characters) to help the book owner understand your interest.', 'warning');
        $('#swap-message').focus();
        return;
    }
    
    if (message.length > 500) {
        showNotification('Message Too Long', 'Please keep your message under 500 characters.', 'warning');
        $('#swap-message').focus();
        return;
    }
    
    const sendButton = $('#send-request-btn');
    
    // Show loading state with modern button loading
    setButtonLoading('#send-request-btn', true);
    sendButton.html('<span class="spinner-border spinner-border-sm me-2"></span>Sending...');
    
    const requestData = {
        offeredBookId: selectedUserBook,
        requestedBookId: targetBook,
        message: message
    };
    
    console.log('📤 Sending swap request with data:', requestData);
    
    $.post('/api/swaps', requestData)
    .done(function(response) {
        console.log('✅ Swap request sent successfully:', response);
        
        // Show success notification
        showNotification(
            'Request Sent Successfully!', 
            'Your swap request has been sent. The book owner will be notified and can respond through their dashboard.', 
            'success',
            6000
        );
        
        // Close modal and reset
        $('#swapRequestModal').modal('hide');
        
        // Refresh the page or update UI as needed
        setTimeout(() => {
            window.location.reload(); // Or update specific sections
        }, 1500);
    })
    .fail(function(xhr, textStatus, errorThrown) {
        console.error('❌ Failed to send swap request:');
        console.error('Status:', xhr.status);
        console.error('Status Text:', textStatus);
        console.error('Error Thrown:', errorThrown);
        console.error('Response:', xhr.responseJSON || xhr.responseText);
        
        let errorMessage = 'An unexpected error occurred';
        
        if (xhr.responseJSON) {
            errorMessage = xhr.responseJSON.message || xhr.responseJSON.error || errorMessage;
        } else if (xhr.responseText) {
            try {
                const parsed = JSON.parse(xhr.responseText);
                errorMessage = parsed.message || parsed.error || errorMessage;
            } catch (e) {
                errorMessage = xhr.responseText || errorMessage;
            }
        }
        
        showNotification(
            'Request Failed', 
            `Failed to send swap request: ${errorMessage}`, 
            'error'
        );
    })
    .always(function() {
        // Reset button state
        setButtonLoading('#send-request-btn', false);
        sendButton.html('<i class="bi bi-send me-1"></i> Send Swap Request');
    });
}

// Professional Success Modal for Swap Requests
function showSwapRequestSuccessModal() {
    const modalHtml = `
        <div class="modal fade" id="swapSuccessModal" tabindex="-1" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content" style="background: linear-gradient(135deg, #1E1E1E 0%, #2A2D35 100%); border: 1px solid rgba(59, 183, 251, 0.2); border-radius: 20px;">
                    <div class="modal-body text-center p-5">
                        <!-- Success Animation -->
                        <div class="success-animation mb-4">
                            <div class="checkmark-container">
                                <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                                    <circle class="checkmark-circle" cx="26" cy="26" r="25" fill="none"/>
                                    <path class="checkmark-check" fill="none" d="m14.1 27.2l7.1 7.2 16.7-16.8"/>
                                </svg>
                            </div>
                        </div>
                        
                        <!-- Success Content -->
                        <h3 class="text-white mb-3">
                            <i class="bi bi-check-circle-fill text-success me-2"></i>
                            Swap Request Sent Successfully!
                        </h3>
                        <p class="text-muted mb-4 lead">
                            Your request has been delivered to the book owner. You'll be notified when they respond.
                        </p>
                        
                        <!-- Status Info -->
                        <div class="status-info p-3 mb-4" style="background: rgba(59, 183, 251, 0.1); border-radius: 12px; border: 1px solid rgba(59, 183, 251, 0.2);">
                            <h6 class="text-info mb-2"><i class="bi bi-info-circle me-1"></i> What happens next?</h6>
                            <ul class="list-unstyled text-left text-muted small mb-0">
                                <li class="mb-1">• The book owner will receive your message</li>
                                <li class="mb-1">• They can accept, decline, or start a chat</li>
                                <li class="mb-1">• You'll get notified of their response</li>
                                <li>• Check "My Swaps" to track progress</li>
                            </ul>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="d-flex gap-3 justify-content-center">
                            <button type="button" class="btn btn-outline-light" onclick="viewMySwaps()">
                                <i class="bi bi-list-check me-1"></i> My Swaps
                            </button>
                            <button type="button" class="btn btn-success" onclick="closeSuccessModal()">
                                <i class="bi bi-check me-1"></i> Got it!
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Remove existing modal if any
    $('#swapSuccessModal').remove();
    
    // Add new modal to body
    $('body').append(modalHtml);
    
    // Show modal with animation
    $('#swapSuccessModal').modal('show');
    
    // Add CSS for animations
    if (!$('#success-modal-styles').length) {
        $('head').append(`
            <style id="success-modal-styles">
                .success-animation {
                    margin: 0 auto;
                }
                
                .checkmark-container {
                    width: 80px;
                    height: 80px;
                    margin: 0 auto;
                }
                
                .checkmark {
                    width: 80px;
                    height: 80px;
                    border-radius: 50%;
                    display: block;
                    stroke-width: 2;
                    stroke: #28A745;
                    stroke-miterlimit: 10;
                    animation: checkmark-fill 0.4s ease-in-out 0.4s forwards, checkmark-scale 0.3s ease-in-out 0.9s both;
                }
                
                .checkmark-circle {
                    stroke-dasharray: 166;
                    stroke-dashoffset: 166;
                    stroke-width: 2;
                    stroke-miterlimit: 10;
                    stroke: #28A745;
                    fill: none;
                    animation: checkmark-stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
                }
                
                .checkmark-check {
                    transform-origin: 50% 50%;
                    stroke-dasharray: 48;
                    stroke-dashoffset: 48;
                    animation: checkmark-stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
                }
                
                @keyframes checkmark-stroke {
                    100% { stroke-dashoffset: 0; }
                }
                
                @keyframes checkmark-scale {
                    0%, 100% { transform: none; }
                    50% { transform: scale3d(1.1, 1.1, 1); }
                }
                
                @keyframes checkmark-fill {
                    100% { box-shadow: inset 0px 0px 0px 30px #28A745; }
                }
            </style>
        `);
    }
}

function closeSuccessModal() {
    $('#swapSuccessModal').modal('hide');
    // Refresh page to show updated swap status
    setTimeout(() => {
        location.reload();
    }, 500);
}

function viewMySwaps() {
    closeSuccessModal();
    // Scroll to the user swaps section
    $('html, body').animate({
        scrollTop: $('#user-swaps-section').offset().top - 100
    }, 800);
}

// Setup message validation for swap request
function setupMessageValidation() {
    $(document).on('input', '#swap-message', function() {
        const textarea = $(this);
        const message = textarea.val();
        const counter = $('#message-char-count');
        const sendButton = $('#send-request-btn');
        
        // Update character counter
        counter.text(message.length);
        
        // Update counter color based on length
        if (message.length > 500) {
            counter.css('color', '#dc3545');
            textarea.addClass('is-invalid');
        } else if (message.length >= 450) {
            counter.css('color', '#F6B443');
            textarea.removeClass('is-invalid');
        } else {
            counter.css('color', 'var(--text-muted)');
            textarea.removeClass('is-invalid');
        }
        
        // Validate message length
        if (message.length >= 10 && message.length <= 500) {
            textarea.addClass('is-valid');
        } else if (message.length > 0) {
            textarea.removeClass('is-valid');
        }
    });
    
    $(document).on('blur', '#swap-message', function() {
        const message = $(this).val();
        if (message.length > 0 && message.length < 10) {
            $(this).addClass('is-invalid');
        }
    });
}

// Open library search on modal show
$('#swapRequestModal').on('shown.bs.modal', function () {
    $('#library-search').focus();
    setupMessageValidation();
});

// Real-time chat integration function
function openSimpleChat() {
    console.log('🔵 openSimpleChat called');
    console.log('📚 selectedUserBook:', selectedUserBook);
    console.log('📖 targetBook:', targetBook);
    
    if (!selectedUserBook || !targetBook) {
        console.error('❌ Missing book selection');
        showErrorMessage('Please select books for the swap first');
        return;
    }
    
    console.log('🔄 Loading book information...');
    // Get book information for the chat
    Promise.all([
        $.get(`/api/books/${selectedUserBook}`),
        $.get(`/api/books/${targetBook}`)
    ]).then(([offeredBookData, requestedBookData]) => {
        console.log('📋 Book data loaded:', { offeredBookData, requestedBookData });
        const offeredBook = offeredBookData.book || offeredBookData;
        const requestedBook = requestedBookData.book || requestedBookData;
        
        // Hide the swap modal
        $('#swapRequestModal').modal('hide');
        
        // Get the book owner's user ID and username
        const ownerUserId = requestedBook.owner?._id || requestedBook.owner?.id;
        const ownerUsername = requestedBook.owner?.username || requestedBook.owner?.fullname || requestedBook.owner?.name || 'Book Owner';
        
        if (!ownerUserId) {
            console.error('❌ Missing owner user ID');
            showErrorMessage('Unable to find book owner information');
            return;
        }
        
        console.log('📋 Starting direct chat with owner:', ownerUserId, ownerUsername);
        console.log('🔧 realTimeChat available:', !!window.realTimeChat);
        
        // Use the real-time chat widget to create and open the conversation directly
        if (window.realTimeChat) {
            try {
                // Expand the chat widget if minimized
                const chatWidget = document.getElementById('real-chat-widget');
                if (chatWidget && chatWidget.classList.contains('minimized')) {
                    chatWidget.classList.remove('minimized');
                }
                
                // Start chat with the book owner directly
                window.realTimeChat.startChat(ownerUserId, ownerUsername);
                
                console.log('✅ Direct chat opened with', ownerUsername);
                
            } catch (error) {
                console.error('❌ Failed to start chat:', error);
                showErrorMessage('Failed to start chat conversation. Please try again.');
            }
        } else {
            console.error('❌ Real-time chat widget not available');
            showErrorMessage('Chat system not available. Please refresh the page.');
        }
        
    }).catch((error) => {
        console.error('❌ Failed to load book information:', error);
        showErrorMessage('Failed to load book information for chat');
    });
}

// Test chat system function
function testChatSystem() {
    console.log('🧪 Testing chat system...');
    console.log('📊 Chat system status:');
    console.log('  - realTimeChat available:', !!window.realTimeChat);
    console.log('  - Socket available:', !!window.io);
    console.log('  - jQuery available:', !!window.$);
    
    if (window.realTimeChat) {
        console.log('  - Chat widget:', document.getElementById('real-chat-widget'));
        console.log('  - Current room:', window.realTimeChat.currentRoom);
        console.log('  - Current user:', window.realTimeChat.currentUser);
        
        // Test API endpoint
        $.get('/api/chat/rooms')
            .done(function(response) {
                console.log('✅ Chat API working:', response);
            })
            .fail(function(xhr, status, error) {
                console.error('❌ Chat API failed:', { status, error, response: xhr.responseText });
            });
    } else {
        console.error('❌ realTimeChat not available - check if realTimeChat.js is loaded');
    }
    
    // Check if books are selected
    console.log('📚 Book selection status:');
    console.log('  - selectedUserBook:', selectedUserBook);
    console.log('  - targetBook:', targetBook);
    
    alert('Check console for chat system debug info');
}

// Test authentication function
function testAuth() {
    console.log('🔐 Testing authentication...');
    $.get('/api/users/profile')
        .done(function(response) {
            console.log('✅ Auth test success:', response);
        })
        .fail(function(xhr) {
            console.error('❌ Auth test failed:', {
                status: xhr.status,
                response: xhr.responseJSON,
                responseText: xhr.responseText
            });
        });
}

// Legacy functions for compatibility (some might be referenced elsewhere)
function quickMatchAll() {
    showSuccessMessage('🔍 Smart discovery is already active! All available books are shown above.');
}

function showMatchPreferences() {
    // Toggle the advanced filters instead
    showAdvancedFilters();
}

function loadMatchPreferences() {
    // Legacy compatibility - no longer needed with new design
    return { genres: [], distance: 10, condition: 'Any' };
}

// Legacy function for old modal system - redirect to new flow
function proposeSwap(bookId, ownerId) {
    selectBookForSwap(bookId);
}

// Accept swap request
function acceptSwapRequest(swapId) {
    if (confirm('Accept this swap request?')) {
        $.ajax({
            url: `/api/swaps/${swapId}/accept`,
            method: 'PUT'
        })
        .done(function(response) {
            showSuccessMessage(response.message || 'Swap request accepted!');
            setTimeout(() => location.reload(), 1500);
        })
        .fail(function(xhr) {
            const errorMessage = xhr.responseJSON?.error || xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
            console.error('❌ Accept swap failed:', xhr.status, errorMessage);
            showErrorMessage('Failed to accept swap: ' + errorMessage);
        });
    }
}

// Reject swap request
function rejectSwapRequest(swapId) {
    if (confirm('Reject this swap request?')) {
        $.ajax({
            url: `/api/swaps/${swapId}/reject`,
            method: 'PUT'
        })
        .done(function(response) {
            showSuccessMessage(response.message || 'Swap request rejected');
            setTimeout(() => location.reload(), 1500);
        })
        .fail(function(xhr) {
            const errorMessage = xhr.responseJSON?.error || xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
            console.error('❌ Reject swap failed:', xhr.status, errorMessage);
            showErrorMessage('Failed to reject swap: ' + errorMessage);
        });
    }
}

// Cancel swap request
function cancelSwapRequest(swapId) {
    if (confirm('Cancel this swap request?')) {
        $.ajax({
            url: `/api/swaps/${swapId}`,
            method: 'DELETE'
        })
        .done(function(response) {
            showSuccessMessage(response.message || 'Swap request cancelled');
            setTimeout(() => location.reload(), 1500);
        })
        .fail(function(xhr) {
            const errorMessage = xhr.responseJSON?.error || xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
            console.error('❌ Cancel swap failed:', xhr.status, errorMessage);
            showErrorMessage('Failed to cancel swap: ' + errorMessage);
        });
    }
}

// Confirm swap completion
function confirmSwapCompletion(swapId) {
    if (confirm('Have you received the book and want to confirm completion?')) {
        $.post(`/api/swaps/${swapId}/confirm`)
            .done(function(response) {
                if (response.completed) {
                    showSwapCompletionModal('Swap completed! You earned 10 reward points!');
                } else {
                    showSuccessMessage('Completion confirmed! Waiting for other party.');
                }
                setTimeout(() => location.reload(), 2000);
            })
            .fail(function(xhr) {
                const errorMessage = xhr.responseJSON?.error || xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
                console.error('❌ Confirm completion failed:', xhr.status, errorMessage);
                showErrorMessage('Failed to confirm completion: ' + errorMessage);
            });
    }
}

// Confirm book received - NEW FUNCTION
function confirmBookReceived(swapId) {
    // Show confirmation modal first
    const modal = $(`
        <div class="modal fade" id="confirmReceiptModal" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content" style="background: linear-gradient(135deg, #1E1E1E 0%, #2A2D35 100%); border: 1px solid rgba(59, 183, 251, 0.2); border-radius: 20px;">
                    <div class="modal-header" style="border-bottom: 1px solid rgba(59, 183, 251, 0.2);">
                        <h5 class="modal-title text-white">
                            <i class="bi bi-box-seam text-primary"></i> Confirm Book Receipt
                        </h5>
                        <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="text-center mb-4">
                            <i class="bi bi-check-circle" style="font-size: 4rem; color: #28A745;"></i>
                        </div>
                        <h6 class="text-white text-center mb-3">Have you physically received the book?</h6>
                        <p class="text-muted text-center mb-4">
                            Please confirm only if you have received the book in good condition from your swap partner.
                        </p>
                        
                        <div class="alert alert-warning" style="background: rgba(255, 193, 7, 0.1); border: 1px solid rgba(255, 193, 7, 0.3);">
                            <div class="d-flex">
                                <i class="bi bi-shield-exclamation text-warning me-2"></i>
                                <div>
                                    <strong class="text-warning">Important:</strong>
                                    <ul class="mb-0 mt-2 text-muted" style="font-size: 0.9rem;">
                                        <li>Verify the book condition matches the description</li>
                                        <li>Check that you received the correct book</li>
                                        <li>Once both parties confirm, the swap completes automatically</li>
                                        <li>You'll earn 10 reward points upon completion</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer" style="border-top: 1px solid rgba(59, 183, 251, 0.2);">
                        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">
                            <i class="bi bi-x"></i> Not Yet
                        </button>
                        <button type="button" class="btn btn-success" onclick="executeConfirmBookReceived('${swapId}')">
                            <i class="bi bi-check-circle"></i> Yes, I Received It
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `);
    
    $('body').append(modal);
    $('#confirmReceiptModal').modal('show');
    
    $('#confirmReceiptModal').on('hidden.bs.modal', function () {
        $(this).remove();
    });
}

// Execute the confirmation
function executeConfirmBookReceived(swapId) {
    console.log('📦 Confirming book received for swap:', swapId);
    
    // Close the confirmation modal
    $('#confirmReceiptModal').modal('hide');
    
    // Show loading notification with fallback
    try {
        showNotification('Processing confirmation...', 'info');
    } catch (e) {
        console.log('Processing confirmation...');
    }
    
    $.ajax({
        url: `/api/swaps/${swapId}/received`,
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        timeout: 10000 // 10 second timeout
    })
    .done(function(response) {
        console.log('✅ Book receipt confirmed:', response);
        
        if (response.bothConfirmed && response.completed) {
            // Both parties confirmed - show celebration modal
            try {
                showSwapCompletionModal('🎉 Swap Completed! Both parties confirmed receiving their books. You earned 10 reward points!');
            } catch (e) {
                console.log('🎉 Swap Completed! Both parties confirmed receiving their books. You earned 10 reward points!');
            }
        } else {
            // Waiting for other party
            try {
                showSuccessMessage(response.message || 'Receipt confirmed! Waiting for your swap partner to confirm.');
            } catch (e) {
                console.log('Receipt confirmed! Waiting for your swap partner to confirm.');
            }
        }
        
        // Reload after a short delay
        setTimeout(() => location.reload(), 2500);
    })
    .fail(function(xhr, status, error) {
        console.error('❌ Failed to confirm book receipt:', {
            status: xhr.status,
            statusText: xhr.statusText,
            responseText: xhr.responseText,
            error: error
        });
        
        let errorMsg = 'Failed to confirm book receipt';
        
        if (xhr.status === 401) {
            errorMsg = 'Session expired. Please log in again.';
            setTimeout(() => window.location.href = '/login', 2000);
        } else if (xhr.status === 403) {
            errorMsg = 'You are not authorized to confirm this swap.';
        } else if (xhr.status === 404) {
            errorMsg = 'Swap not found.';
        } else if (xhr.status === 400) {
            errorMsg = xhr.responseJSON?.error || 'Invalid swap status for confirmation.';
        } else if (xhr.responseJSON?.error) {
            errorMsg = xhr.responseJSON.error;
        } else if (xhr.responseJSON?.message) {
            errorMsg = xhr.responseJSON.message;
        }
        
        try {
            showErrorMessage(errorMsg);
        } catch (e) {
            console.error('Error:', errorMsg);
            alert(errorMsg); // Fallback
        }
    });
}

// Show verification modal when both parties have confirmed
function showVerificationModal(swapId) {
    const modal = $(`
        <div class="modal fade" id="verificationModal" tabindex="-1">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content" style="background: linear-gradient(135deg, #1E1E1E 0%, #2A2D35 100%); border: 1px solid rgba(40, 167, 69, 0.3); border-radius: 20px;">
                    <div class="modal-header" style="background: linear-gradient(135deg, rgba(40, 167, 69, 0.1), rgba(40, 167, 69, 0.05)); border-bottom: 1px solid rgba(40, 167, 69, 0.2);">
                        <h5 class="modal-title text-white">
                            <i class="bi bi-trophy-fill text-warning"></i> Swap Completed Successfully!
                        </h5>
                        <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body p-4">
                        <!-- Success Animation -->
                        <div class="text-center mb-4">
                            <div class="success-circle" style="width: 100px; height: 100px; margin: 0 auto; background: linear-gradient(135deg, #28A745, #20C997); border-radius: 50%; display: flex; align-items: center; justify-content: center; animation: bounceIn 1s;">
                                <i class="bi bi-check2" style="font-size: 3rem; color: white;"></i>
                            </div>
                        </div>
                        
                        <h4 class="text-white text-center mb-3">🎉 Congratulations!</h4>
                        <p class="text-center text-muted mb-4">
                            Both parties have confirmed receiving their books. Your swap is now complete!
                        </p>
                        
                        <!-- Verification Status -->
                        <div class="card mb-4" style="background: rgba(40, 167, 69, 0.1); border: 1px solid rgba(40, 167, 69, 0.2); border-radius: 12px;">
                            <div class="card-body">
                                <h6 class="text-success mb-3">
                                    <i class="bi bi-shield-check"></i> Verification Complete
                                </h6>
                                <div class="d-flex align-items-center mb-3">
                                    <i class="bi bi-check-circle-fill text-success" style="font-size: 1.5rem; margin-right: 12px;"></i>
                                    <div>
                                        <strong class="text-white">You confirmed receipt</strong>
                                        <br>
                                        <small class="text-muted">Books received and verified</small>
                                    </div>
                                </div>
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-check-circle-fill text-success" style="font-size: 1.5rem; margin-right: 12px;"></i>
                                    <div>
                                        <strong class="text-white">Partner confirmed receipt</strong>
                                        <br>
                                        <small class="text-muted">Exchange verified by both parties</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Rewards -->
                        <div class="card mb-4" style="background: linear-gradient(135deg, rgba(255, 193, 7, 0.1), rgba(255, 152, 0, 0.1)); border: 1px solid rgba(255, 193, 7, 0.3); border-radius: 12px;">
                            <div class="card-body text-center">
                                <i class="bi bi-star-fill text-warning" style="font-size: 2rem;"></i>
                                <h5 class="text-warning mt-2 mb-1">+10 Reward Points</h5>
                                <p class="text-muted mb-0">Added to your account!</p>
                            </div>
                        </div>
                        
                        <!-- Next Steps -->
                        <div class="card" style="background: rgba(59, 183, 251, 0.1); border: 1px solid rgba(59, 183, 251, 0.2); border-radius: 12px;">
                            <div class="card-body">
                                <h6 class="text-primary mb-3">
                                    <i class="bi bi-lightbulb"></i> What's Next?
                                </h6>
                                <ul class="text-muted mb-0" style="font-size: 0.9rem;">
                                    <li class="mb-2">Rate your swap partner to help the community</li>
                                    <li class="mb-2">Share your reading experience</li>
                                    <li class="mb-2">Find your next book swap!</li>
                                    <li class="mb-0">Use your reward points for exclusive benefits</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer" style="border-top: 1px solid rgba(40, 167, 69, 0.2);">
                        <button type="button" class="btn btn-success" data-dismiss="modal" onclick="location.reload()">
                            <i class="bi bi-check-circle"></i> Awesome!
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `);
    
    $('body').append(modal);
    $('#verificationModal').modal('show');
    
    $('#verificationModal').on('hidden.bs.modal', function () {
        $(this).remove();
    });
}

// Enhanced Swap Workflow Functions

// Start active swap (move from accepted to in-progress)
function startSwap(swapId) {
    showSwapProgressModal(swapId, 'start');
}

// Schedule meeting for swap
function scheduleMeeting(swapId) {
    showMeetingScheduleModal(swapId);
}

// Confirm meeting details
function confirmMeeting(swapId) {
    if (confirm('Confirm this meeting time and location?')) {
        $.ajax({
            url: `/api/swaps/${swapId}/confirm-meeting`,
            method: 'PUT'
        })
        .done(function(response) {
            console.log('✅ Meeting confirmation response:', response);
            
            if (response.bothConfirmed) {
                showSuccessMessage('🎉 ' + (response.message || 'Both parties confirmed! Meeting is all set.'));
            } else {
                showSuccessMessage('✅ ' + (response.message || 'Meeting confirmed! Waiting for other party.'));
            }
            
            // Auto-reload to show updated status
            setTimeout(() => location.reload(), 2000);
        })
        .fail(function(xhr) {
            const errorMessage = xhr.responseJSON?.error || 'Failed to confirm meeting';
            showErrorMessage(errorMessage);
        });
    }
}

// Mark as exchanged (Step 3 completion)
function markAsExchanged(swapId) {
    if (confirm('Have you physically met and exchanged books with your partner?')) {
        $.ajax({
            url: `/api/swaps/${swapId}/progress`,
            method: 'PUT',
            data: { status: 'In Progress' }
        })
        .done(function(response) {
            showSuccessMessage('✅ Books exchanged! Now please confirm receipt of your book.');
            // Show next step
            showNextStep(swapId, 4);
            setTimeout(() => location.reload(), 1500);
        })
        .fail(function(xhr) {
            const errorMessage = xhr.responseJSON?.error || 'Failed to update status';
            showErrorMessage(errorMessage);
        });
    }
}

// Confirm book receipt (Step 4 completion)
function confirmBookReceipt(swapId) {
    // Use the enhanced confirmation modal from confirmBookReceived
    confirmBookReceived(swapId);
}

// Report issue with swap
function reportIssue(swapId) {
    const issue = prompt('Please describe the issue with this swap:');
    if (issue && issue.trim()) {
        $.ajax({
            url: `/api/swaps/${swapId}/report`,
            method: 'POST',
            data: { issue: issue.trim() }
        })
        .done(function(response) {
            showSuccessMessage('Issue reported. Our team will review and contact you.');
        })
        .fail(function(xhr) {
            showErrorMessage('Failed to report issue. Please try again.');
        });
    }
}

// Show next step in progression
function showNextStep(swapId, stepNumber) {
    // Visual feedback for step progression
    $(`[data-step="${stepNumber}"]`).show().addClass('active');
    $(`[data-step="${stepNumber - 1}"]`).addClass('completed');
}

// Mark swap as in-progress
function markSwapInProgress(swapId) {
    if (confirm('Mark this swap as in progress? This means you are ready to meet and exchange books.')) {
        $.ajax({
            url: `/api/swaps/${swapId}/progress`,
            method: 'PUT',
            data: { status: 'In Progress' }
        })
        .done(function(response) {
            showSuccessMessage(response.message || 'Swap marked as in progress! Coordinate with your swap partner.');
            setTimeout(() => location.reload(), 1500);
        })
        .fail(function(xhr) {
            const errorMessage = xhr.responseJSON?.error || xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
            console.error('❌ Mark swap in progress failed:', xhr.status, errorMessage);
            showErrorMessage('Failed to update swap: ' + errorMessage);
        });
    }
}

// Quick mark as In Progress (simpler version without confirmation for testing)
function quickMarkInProgress(swapId) {
    if (confirm('📦 Mark this swap as "In Progress"?\n\nThis will allow you to confirm book receipt after exchanging books with your partner.')) {
        $.ajax({
            url: `/api/swaps/${swapId}/progress`,
            method: 'PUT',
            data: { status: 'In Progress' }
        })
        .done(function(response) {
            showSuccessMessage('✅ Swap marked as In Progress! Now you can confirm when you receive the book.');
            setTimeout(() => location.reload(), 1500);
        })
        .fail(function(xhr) {
            const errorMessage = xhr.responseJSON?.error || xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
            console.error('❌ Quick mark failed:', xhr.status, errorMessage);
            showErrorMessage('Failed to update swap: ' + errorMessage);
        });
    }
}

// Upload swap photos for verification
function uploadSwapPhotos(swapId) {
    showPhotoUploadModal(swapId);
}

// Rate swap partner after completion
function rateSwapPartner(swapId, partnerId) {
    showRatingModal(swapId, partnerId);
}

// Show swap progress modal with workflow steps
function showSwapProgressModal(swapId, action) {
    const modal = $(`
        <div class="modal fade" id="swapProgressModal" tabindex="-1">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content" style="background: linear-gradient(135deg, #1E1E1E 0%, #2A2D35 100%); border: 1px solid rgba(59, 183, 251, 0.2); border-radius: 20px; overflow: hidden;">
                    <div class="modal-header" style="background: linear-gradient(135deg, rgba(59, 183, 251, 0.1), rgba(102, 126, 234, 0.1)); border-bottom: 1px solid rgba(59, 183, 251, 0.2); padding: 24px 32px;">
                        <h5 class="modal-title" style="color: #fff; font-size: 1.5rem; font-weight: 600;">
                            <i class="bi bi-diagram-2 text-primary" style="font-size: 1.75rem; margin-right: 12px;"></i> 
                            Swap Progress Tracker
                        </h5>
                        <button type="button" class="close text-white" data-dismiss="modal" style="opacity: 0.8; font-size: 2rem;">&times;</button>
                    </div>
                    <div class="modal-body" style="padding: 32px;">
                        <!-- Progress Bar -->
                        <div class="mb-4" style="background: rgba(59, 183, 251, 0.1); border-radius: 12px; padding: 16px;">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="text-white font-weight-bold">Overall Progress</span>
                                <span class="text-primary font-weight-bold">20%</span>
                            </div>
                            <div style="background: rgba(35, 37, 41, 0.6); border-radius: 20px; height: 12px; overflow: hidden;">
                                <div style="background: linear-gradient(90deg, #3BB7FB, #667eea); width: 20%; height: 100%; border-radius: 20px; transition: width 0.5s ease;"></div>
                            </div>
                        </div>
                        
                        <!-- Workflow Steps -->
                        <div class="swap-workflow-tracker">
                            <!-- Step 1: Accepted -->
                            <div class="workflow-step completed" style="background: rgba(40, 167, 69, 0.15); border: 2px solid rgba(40, 167, 69, 0.4); border-radius: 16px; padding: 20px; margin-bottom: 16px; transition: all 0.3s ease;">
                                <div class="d-flex align-items-center">
                                    <div class="step-icon" style="width: 56px; height: 56px; background: linear-gradient(135deg, #28A745, #20c997); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 20px; box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4);">
                                        <i class="bi bi-check-circle-fill" style="font-size: 28px; color: white;"></i>
                                    </div>
                                    <div class="step-content flex-grow-1">
                                        <h6 class="text-white mb-1" style="font-size: 1.1rem; font-weight: 600;">✅ Request Accepted</h6>
                                        <p class="text-muted mb-0" style="font-size: 0.9rem;">Both parties agreed to the swap</p>
                                    </div>
                                    <div>
                                        <span class="badge" style="background: rgba(40, 167, 69, 0.3); color: #28A745; padding: 6px 12px; border-radius: 20px;">Completed</span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Step 2: Schedule Meeting -->
                            <div class="workflow-step ${action === 'start' ? 'active' : ''}" style="background: rgba(59, 183, 251, 0.15); border: 2px solid rgba(59, 183, 251, 0.4); border-radius: 16px; padding: 20px; margin-bottom: 16px; transition: all 0.3s ease;">
                                <div class="d-flex align-items-center">
                                    <div class="step-icon" style="width: 56px; height: 56px; background: linear-gradient(135deg, #3BB7FB, #667eea); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 20px; box-shadow: 0 4px 12px rgba(59, 183, 251, 0.4);">
                                        <i class="bi bi-calendar-event" style="font-size: 26px; color: white;"></i>
                                    </div>
                                    <div class="step-content flex-grow-1">
                                        <h6 class="text-white mb-1" style="font-size: 1.1rem; font-weight: 600;">📅 Schedule Meeting</h6>
                                        <p class="text-muted mb-2" style="font-size: 0.9rem;">Coordinate time and place for exchange</p>
                                        <button class="btn btn-sm swap-action-btn" onclick="scheduleMeeting('${swapId}')" style="background: linear-gradient(135deg, #3BB7FB, #667eea); color: white; border: none; padding: 8px 20px; border-radius: 20px; font-weight: 600; box-shadow: 0 4px 12px rgba(59, 183, 251, 0.3);">
                                            <i class="bi bi-calendar-plus me-1"></i> Schedule Now
                                        </button>
                                    </div>
                                    <div>
                                        <span class="badge" style="background: rgba(59, 183, 251, 0.3); color: #3BB7FB; padding: 6px 12px; border-radius: 20px;">Current</span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Step 3: Exchange Books -->
                            <div class="workflow-step" style="background: rgba(35, 37, 41, 0.6); border: 2px solid rgba(59, 183, 251, 0.15); border-radius: 16px; padding: 20px; margin-bottom: 16px; transition: all 0.3s ease;">
                                <div class="d-flex align-items-center">
                                    <div class="step-icon" style="width: 56px; height: 56px; background: rgba(255, 193, 7, 0.2); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 20px;">
                                        <i class="bi bi-arrow-left-right" style="font-size: 26px; color: #FFC107;"></i>
                                    </div>
                                    <div class="step-content flex-grow-1">
                                        <h6 class="text-white mb-1" style="font-size: 1.1rem; font-weight: 600;">📚 Exchange Books</h6>
                                        <p class="text-muted mb-2" style="font-size: 0.9rem;">Meet and exchange your books</p>
                                        <button class="btn btn-sm btn-outline-warning" onclick="markSwapInProgress('${swapId}')" style="border-radius: 20px; padding: 8px 20px; font-weight: 600;" disabled>
                                            <i class="bi bi-play-circle me-1"></i> Mark In Progress
                                        </button>
                                    </div>
                                    <div>
                                        <span class="badge badge-secondary" style="padding: 6px 12px; border-radius: 20px;">Pending</span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Step 4: Verify Exchange -->
                            <div class="workflow-step" style="background: rgba(35, 37, 41, 0.6); border: 2px solid rgba(59, 183, 251, 0.15); border-radius: 16px; padding: 20px; margin-bottom: 16px; transition: all 0.3s ease;">
                                <div class="d-flex align-items-center">
                                    <div class="step-icon" style="width: 56px; height: 56px; background: rgba(23, 162, 184, 0.2); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 20px;">
                                        <i class="bi bi-camera" style="font-size: 26px; color: #17A2B8;"></i>
                                    </div>
                                    <div class="step-content flex-grow-1">
                                        <h6 class="text-white mb-1" style="font-size: 1.1rem; font-weight: 600;">📸 Verify Exchange</h6>
                                        <p class="text-muted mb-2" style="font-size: 0.9rem;">Upload photos to verify book condition</p>
                                        <button class="btn btn-sm btn-outline-info" onclick="uploadSwapPhotos('${swapId}')" style="border-radius: 20px; padding: 8px 20px; font-weight: 600;" disabled>
                                            <i class="bi bi-upload me-1"></i> Upload Photos
                                        </button>
                                    </div>
                                    <div>
                                        <span class="badge badge-secondary" style="padding: 6px 12px; border-radius: 20px;">Pending</span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Step 5: Complete & Rate -->
                            <div class="workflow-step" style="background: rgba(35, 37, 41, 0.6); border: 2px solid rgba(59, 183, 251, 0.15); border-radius: 16px; padding: 20px; transition: all 0.3s ease;">
                                <div class="d-flex align-items-center">
                                    <div class="step-icon" style="width: 56px; height: 56px; background: rgba(255, 193, 7, 0.2); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 20px;">
                                        <i class="bi bi-star" style="font-size: 26px; color: #FFC107;"></i>
                                    </div>
                                    <div class="step-content flex-grow-1">
                                        <h6 class="text-white mb-1" style="font-size: 1.1rem; font-weight: 600;">⭐ Complete & Rate</h6>
                                        <p class="text-muted mb-2" style="font-size: 0.9rem;">Confirm receipt and rate your partner</p>
                                        <button class="btn btn-sm btn-outline-success" onclick="confirmSwapCompletion('${swapId}')" style="border-radius: 20px; padding: 8px 20px; font-weight: 600;" disabled>
                                            <i class="bi bi-check-circle me-1"></i> Complete Swap
                                        </button>
                                    </div>
                                    <div>
                                        <span class="badge badge-secondary" style="padding: 6px 12px; border-radius: 20px;">Pending</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Help Text -->
                        <div class="mt-4 p-3" style="background: rgba(59, 183, 251, 0.1); border-left: 4px solid #3BB7FB; border-radius: 8px;">
                            <small class="text-muted">
                                <i class="bi bi-info-circle text-primary me-2"></i>
                                Complete each step in order. You can communicate with your swap partner anytime using the chat feature.
                            </small>
                        </div>
                    </div>
                    <div class="modal-footer" style="background: rgba(255, 255, 255, 0.03); border-top: 1px solid rgba(59, 183, 251, 0.2); padding: 20px 32px;">
                        <button type="button" class="btn btn-outline-light" data-dismiss="modal" style="border-radius: 20px; padding: 10px 24px; font-weight: 600;">Close</button>
                        <button type="button" class="btn" style="background: linear-gradient(135deg, #3BB7FB, #667eea); color: white; border: none; border-radius: 20px; padding: 10px 24px; font-weight: 600;" onclick="openChat('${swapId}')">
                            <i class="bi bi-chat-dots me-2"></i>Chat with Partner
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `);
    
    $('body').append(modal);
    $('#swapProgressModal').modal('show');
    
    // Remove modal when hidden
    $('#swapProgressModal').on('hidden.bs.modal', function () {
        $(this).remove();
    });
}

// Show meeting details and confirmation option
function showMeetingDetails(swapId) {
    console.log('📅 Showing meeting details for swap:', swapId);
    
    // Get swap details
    $.get(`/api/swaps/${swapId}/details`)
        .done(function(response) {
            const swap = response.swap;
            const meetingDetails = swap.meetingDetails;
            
            if (!meetingDetails || !meetingDetails.datetime) {
                showErrorMessage('No meeting scheduled yet');
                return;
            }
            
            const meetingDate = new Date(meetingDetails.datetime);
            const formattedDate = meetingDate.toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            
            const isConfirmed = meetingDetails.confirmed === true;
            
            const modal = $(`
                <div class="modal fade" id="meetingDetailsModal" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content" style="background: linear-gradient(135deg, #1E1E1E 0%, #2A2D35 100%); border: 1px solid rgba(59, 183, 251, 0.2); border-radius: 20px;">
                            <div class="modal-header" style="background: linear-gradient(135deg, rgba(59, 183, 251, 0.1), rgba(102, 126, 234, 0.1)); border-bottom: 1px solid rgba(59, 183, 251, 0.2); padding: 24px 32px;">
                                <h5 class="modal-title" style="color: #fff; font-size: 1.35rem; font-weight: 600;">
                                    <i class="bi bi-calendar-check text-primary" style="font-size: 1.5rem; margin-right: 12px;"></i> 
                                    Meeting Details
                                </h5>
                                <button type="button" class="close text-white" data-dismiss="modal" style="opacity: 0.8; font-size: 2rem;">&times;</button>
                            </div>
                            <div class="modal-body" style="padding: 32px;">
                                ${isConfirmed ? `
                                    <div class="alert alert-success mb-4" style="border-radius: 12px; border: 1px solid #28A745;">
                                        <i class="bi bi-check-circle-fill me-2"></i>
                                        <strong>Meeting Confirmed!</strong> Both parties have confirmed this meeting.
                                    </div>
                                ` : `
                                    <div class="alert alert-warning mb-4" style="border-radius: 12px; border: 1px solid #FFC107;">
                                        <i class="bi bi-hourglass-half me-2"></i>
                                        <strong>Pending Confirmation</strong>
                                    </div>
                                `}
                                
                                <div class="meeting-info-card mb-3" style="background: rgba(59, 183, 251, 0.05); border: 1px solid rgba(59, 183, 251, 0.2); border-radius: 12px; padding: 20px;">
                                    <div class="mb-3">
                                        <div class="d-flex align-items-center mb-2">
                                            <i class="bi bi-geo-alt text-primary me-3" style="font-size: 1.25rem;"></i>
                                            <div>
                                                <small class="text-muted d-block" style="font-size: 0.8rem;">Location</small>
                                                <strong class="text-white" style="font-size: 1.05rem;">${meetingDetails.location}</strong>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <div class="d-flex align-items-center mb-2">
                                            <i class="bi bi-clock text-primary me-3" style="font-size: 1.25rem;"></i>
                                            <div>
                                                <small class="text-muted d-block" style="font-size: 0.8rem;">Date & Time</small>
                                                <strong class="text-white" style="font-size: 1.05rem;">${formattedDate}</strong>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    ${meetingDetails.notes ? `
                                        <div>
                                            <div class="d-flex align-items-start mb-2">
                                                <i class="bi bi-chat-text text-primary me-3" style="font-size: 1.25rem;"></i>
                                                <div>
                                                    <small class="text-muted d-block" style="font-size: 0.8rem;">Notes</small>
                                                    <p class="text-white mb-0" style="font-size: 0.95rem;">${meetingDetails.notes}</p>
                                                </div>
                                            </div>
                                        </div>
                                    ` : ''}
                                </div>
                                
                                ${!isConfirmed ? `
                                    <div class="p-3 mb-3" style="background: rgba(59, 183, 251, 0.1); border-left: 4px solid #3BB7FB; border-radius: 8px;">
                                        <p class="mb-0 text-info" style="font-size: 0.9rem;">
                                            <i class="bi bi-info-circle me-2"></i>
                                            Please confirm that you can attend this meeting. This helps your swap partner know you're committed.
                                        </p>
                                    </div>
                                ` : ''}
                                
                                <!-- Safety Tips -->
                                <div class="p-3" style="background: rgba(255, 193, 7, 0.1); border-left: 4px solid #FFC107; border-radius: 8px;">
                                    <h6 class="text-warning mb-2" style="font-size: 0.95rem; font-weight: 600;">
                                        <i class="bi bi-shield-check me-2"></i>Safety Reminders
                                    </h6>
                                    <ul class="mb-0 text-muted" style="font-size: 0.85rem; padding-left: 20px;">
                                        <li>Meet in a public, well-lit location</li>
                                        <li>Let someone know where you're going</li>
                                        <li>Inspect the book condition before exchanging</li>
                                    </ul>
                                </div>
                            </div>
                            <div class="modal-footer" style="background: rgba(255, 255, 255, 0.03); border-top: 1px solid rgba(59, 183, 251, 0.2); padding: 20px 32px;">
                                <button type="button" class="btn btn-outline-light" data-dismiss="modal" style="border-radius: 20px; padding: 10px 24px; font-weight: 600;">Close</button>
                                ${!isConfirmed ? `
                                    <button type="button" class="btn" onclick="confirmMeeting('${swapId}')" style="background: linear-gradient(135deg, #28A745, #20C997); color: white; border: none; border-radius: 20px; padding: 10px 24px; font-weight: 600; box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);">
                                        <i class="bi bi-check-circle me-2"></i>Confirm Meeting
                                    </button>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `);
            
            $('body').append(modal);
            $('#meetingDetailsModal').modal('show');
            
            // Remove modal when hidden
            $('#meetingDetailsModal').on('hidden.bs.modal', function () {
                $(this).remove();
            });
        })
        .fail(function(xhr) {
            console.error('❌ Failed to load meeting details:', xhr);
            showErrorMessage('Failed to load meeting details');
        });
}

// Confirm meeting attendance
function confirmMeeting(swapId) {
    console.log('✅ Confirming meeting for swap:', swapId);
    
    $.ajax({
        url: `/api/swaps/${swapId}/meeting/confirm`,
        method: 'PUT'
    })
    .done(function(response) {
        console.log('✅ Meeting confirmed:', response);
        $('#meetingDetailsModal').modal('hide');
        
        if (response.bothConfirmed) {
            showSuccessMessage('🎉 ' + (response.message || 'Both parties confirmed! Meeting is all set.'));
        } else {
            showSuccessMessage('✅ ' + (response.message || 'Meeting confirmed! Waiting for other party.'));
        }
        
        // Auto-reload to show updated status
        setTimeout(() => location.reload(), 2000);
    })
    .fail(function(xhr) {
        console.error('❌ Failed to confirm meeting:', xhr);
        const errorMsg = xhr.responseJSON?.message || xhr.responseJSON?.error || 'Failed to confirm meeting';
        showErrorMessage(errorMsg);
    });
}

// Show meeting schedule modal
function showMeetingScheduleModal(swapId) {
    const modal = $(`
        <div class="modal fade" id="meetingModal" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content" style="background: linear-gradient(135deg, #1E1E1E 0%, #2A2D35 100%); border: 1px solid rgba(59, 183, 251, 0.2); border-radius: 20px;">
                    <div class="modal-header" style="background: linear-gradient(135deg, rgba(59, 183, 251, 0.1), rgba(102, 126, 234, 0.1)); border-bottom: 1px solid rgba(59, 183, 251, 0.2); padding: 24px 32px;">
                        <h5 class="modal-title" style="color: #fff; font-size: 1.35rem; font-weight: 600;">
                            <i class="bi bi-calendar-event text-primary" style="font-size: 1.5rem; margin-right: 12px;"></i> 
                            Schedule Meeting
                        </h5>
                        <button type="button" class="close text-white" data-dismiss="modal" style="opacity: 0.8; font-size: 2rem;">&times;</button>
                    </div>
                    <form id="meetingForm">
                        <div class="modal-body" style="padding: 32px;">
                            <div class="mb-4">
                                <label class="form-label text-white mb-2" style="font-weight: 600;">
                                    <i class="bi bi-geo-alt text-primary me-2"></i>Meeting Location
                                </label>
                                <input type="text" id="meeting-location" name="location" class="form-control" 
                                       style="background: rgba(35, 37, 41, 0.6); border: 2px solid rgba(59, 183, 251, 0.2); color: white; border-radius: 12px; padding: 12px 16px; font-size: 1rem;"
                                       placeholder="e.g., Central Library, Coffee Shop, Park..." required>
                                <small class="text-muted mt-1 d-block">
                                    <i class="bi bi-info-circle me-1"></i>Choose a public, safe location
                                </small>
                            </div>
                            <div class="mb-4">
                                <label class="form-label text-white mb-2" style="font-weight: 600;">
                                    <i class="bi bi-clock text-primary me-2"></i>Date & Time
                                </label>
                                <input type="datetime-local" id="meeting-datetime" name="datetime" class="form-control" 
                                       style="background: rgba(35, 37, 41, 0.6); border: 2px solid rgba(59, 183, 251, 0.2); color: white; border-radius: 12px; padding: 12px 16px; font-size: 1rem; color-scheme: dark;"
                                       required>
                            </div>
                            <div class="mb-4">
                                <label class="form-label text-white mb-2" style="font-weight: 600;">
                                    <i class="bi bi-chat-text text-primary me-2"></i>Additional Notes
                                </label>
                                <textarea id="meeting-notes" name="notes" class="form-control" rows="4"
                                          style="background: rgba(35, 37, 41, 0.6); border: 2px solid rgba(59, 183, 251, 0.2); color: white; border-radius: 12px; padding: 12px 16px; font-size: 1rem; resize: none;"
                                          placeholder="Any specific instructions, parking info, or meeting details..."></textarea>
                            </div>
                            
                            <!-- Safety Tips -->
                            <div class="p-3" style="background: rgba(255, 193, 7, 0.1); border-left: 4px solid #FFC107; border-radius: 8px;">
                                <h6 class="text-warning mb-2" style="font-size: 0.95rem; font-weight: 600;">
                                    <i class="bi bi-shield-check me-2"></i>Safety Tips
                                </h6>
                                <ul class="mb-0 text-muted" style="font-size: 0.85rem; padding-left: 20px;">
                                    <li>Meet in a public, well-lit location</li>
                                    <li>Bring a friend or let someone know where you're going</li>
                                    <li>Check the book condition before finalizing</li>
                                </ul>
                            </div>
                        </div>
                        <div class="modal-footer" style="background: rgba(255, 255, 255, 0.03); border-top: 1px solid rgba(59, 183, 251, 0.2); padding: 20px 32px;">
                            <button type="button" class="btn btn-outline-light" data-dismiss="modal" style="border-radius: 20px; padding: 10px 24px; font-weight: 600;">Cancel</button>
                            <button type="submit" class="btn" id="schedule-meeting-btn" style="background: linear-gradient(135deg, #3BB7FB, #667eea); color: white; border: none; border-radius: 20px; padding: 10px 24px; font-weight: 600; box-shadow: 0 4px 12px rgba(59, 183, 251, 0.3);">
                                <i class="bi bi-calendar-check me-2"></i>Schedule Meeting
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    `);
    
    $('body').append(modal);
    $('#meetingModal').modal('show');
    
    // Set minimum datetime to now
    const now = new Date();
    now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
    document.getElementById('meeting-datetime').min = now.toISOString().slice(0, 16);
    
    // Handle form submission
    $('#meetingForm').on('submit', function(e) {
        e.preventDefault();
        
        const submitBtn = $('#schedule-meeting-btn');
        const originalHtml = submitBtn.html();
        
        // Show loading state
        submitBtn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm me-2"></span>Scheduling...');
        
        const meetingData = {
            location: $('#meeting-location').val().trim(),
            datetime: $('#meeting-datetime').val(),
            notes: $('#meeting-notes').val().trim()
        };
        
        console.log('📅 Scheduling meeting for swap:', swapId, meetingData);
        
        // Save meeting details to the swap
        $.ajax({
            url: `/api/swaps/${swapId}/meeting`,
            method: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(meetingData)
        })
        .done(function(response) {
            console.log('✅ Meeting scheduled successfully:', response);
            $('#meetingModal').modal('hide');
            
            // Show success message with details
            const meetingDate = new Date(meetingData.datetime);
            const formattedDate = meetingDate.toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            
            showSuccessMessage(`Meeting scheduled for ${formattedDate} at ${meetingData.location}! Your swap partner will be notified.`);
            
            // Reload after 2 seconds to show updated swap status
            setTimeout(() => location.reload(), 2000);
        })
        .fail(function(xhr) {
            console.error('❌ Failed to schedule meeting:', xhr);
            const errorMsg = xhr.responseJSON?.message || xhr.responseJSON?.error || 'Failed to schedule meeting';
            showErrorMessage(errorMsg);
            submitBtn.prop('disabled', false).html(originalHtml);
        });
    });
    
    // Remove modal when hidden
    $('#meetingModal').on('hidden.bs.modal', function () {
        $(this).remove();
    });
}

// Show swap completion modal with celebration
function showSwapCompletionModal(message) {
    const modal = $(`
        <div class="modal fade" id="completionModal" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content" style="background: linear-gradient(135deg, #1E1E1E 0%, #2A2D35 100%); border: 1px solid rgba(40, 167, 69, 0.3); border-radius: 20px; overflow: hidden;">
                    <div class="modal-body text-center" style="padding: 48px 32px;">
                        <!-- Animated Success Icon -->
                        <div class="completion-animation mb-4" style="animation: bounceIn 0.6s ease-out;">
                            <div style="width: 120px; height: 120px; margin: 0 auto; background: linear-gradient(135deg, #28A745, #20c997); border-radius: 50%; display: flex; align-items: center; justify-content: center; box-shadow: 0 8px 32px rgba(40, 167, 69, 0.4); position: relative;">
                                <i class="bi bi-check-circle-fill" style="font-size: 64px; color: white;"></i>
                                <!-- Pulse Effect -->
                                <div style="position: absolute; width: 100%; height: 100%; border-radius: 50%; border: 3px solid rgba(40, 167, 69, 0.5); animation: pulse 2s infinite;"></div>
                            </div>
                        </div>
                        
                        <!-- Success Message -->
                        <h3 class="text-white mb-3" style="font-size: 2rem; font-weight: 700;">
                            Swap Completed! 🎉
                        </h3>
                        <p class="mb-4" style="color: rgba(255, 255, 255, 0.8); font-size: 1.1rem; line-height: 1.6;">
                            ${message}
                        </p>
                        
                        <!-- Reward Badge -->
                        <div class="mb-4 p-4" style="background: rgba(40, 167, 69, 0.15); border: 2px solid rgba(40, 167, 69, 0.3); border-radius: 16px;">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <i class="bi bi-trophy-fill text-warning" style="font-size: 2rem; margin-right: 12px;"></i>
                                <div class="text-left">
                                    <h5 class="text-white mb-0" style="font-weight: 700;">+10 Points Earned!</h5>
                                    <small class="text-muted">Keep swapping to earn more rewards</small>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-center gap-3 flex-wrap">
                            <button class="btn btn-outline-light" onclick="location.reload()" style="border-radius: 20px; padding: 12px 28px; font-weight: 600; border-width: 2px;">
                                <i class="bi bi-arrow-clockwise me-2"></i>View My Swaps
                            </button>
                            <button class="btn" onclick="location.href='/swap-matcher'" style="background: linear-gradient(135deg, #3BB7FB, #667eea); color: white; border: none; border-radius: 20px; padding: 12px 28px; font-weight: 600; box-shadow: 0 4px 12px rgba(59, 183, 251, 0.3);">
                                <i class="bi bi-book me-2"></i>Find More Books
                            </button>
                        </div>
                        
                        <!-- Share Achievement -->
                        <div class="mt-4">
                            <small class="text-muted d-block mb-2">Share your achievement:</small>
                            <div class="d-flex justify-content-center gap-2">
                                <button class="btn btn-sm" style="background: rgba(59, 130, 246, 0.2); color: #3B82F6; border: none; border-radius: 12px; padding: 8px 16px;">
                                    <i class="bi bi-facebook"></i>
                                </button>
                                <button class="btn btn-sm" style="background: rgba(29, 161, 242, 0.2); color: #1DA1F2; border: none; border-radius: 12px; padding: 8px 16px;">
                                    <i class="bi bi-twitter"></i>
                                </button>
                                <button class="btn btn-sm" style="background: rgba(37, 211, 102, 0.2); color: #25D366; border: none; border-radius: 12px; padding: 8px 16px;">
                                    <i class="bi bi-whatsapp"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <style>
            @keyframes pulse {
                0%, 100% { transform: scale(1); opacity: 1; }
                50% { transform: scale(1.1); opacity: 0.5; }
            }
            
            @keyframes bounceIn {
                0% { transform: scale(0); opacity: 0; }
                50% { transform: scale(1.1); }
                70% { transform: scale(0.9); }
                100% { transform: scale(1); opacity: 1; }
            }
        </style>
    `);
    
    $('body').append(modal);
    $('#completionModal').modal('show');
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
        $('#completionModal').modal('hide');
    }, 5000);
    
    // Remove modal when hidden
    $('#completionModal').on('hidden.bs.modal', function () {
        $(this).remove();
    });
}

// Utility functions for messages
function showSuccessMessage(message) {
    showNotification(message, 'success');
}

function showErrorMessage(message) {
    showNotification(message, 'error');
}

// Initialize tab system with proper isolation and persistence
function initializeTabSystem() {
    console.log('🔧 Initializing tab system...');
    
    // Check for saved active tab
    const savedTab = localStorage.getItem('swapMatcher_activeTab') || 'find-matches';
    console.log('💾 Saved tab from localStorage:', savedTab);
    
    // Use Bootstrap's native tab method to activate the saved tab
    $(`#${savedTab}-tab`).tab('show');
    
    // Set up tab change handlers for persistence and auto-refresh
    $('#swapTabs .nav-link').off('click.persistence').on('click.persistence', function(e) {
        const tabId = $(this).attr('href').substring(1); // Remove #
        console.log('💾 Saving tab to localStorage:', tabId);
        localStorage.setItem('swapMatcher_activeTab', tabId);
        
        // Auto-refresh content when switching tabs
        setTimeout(() => {
            refreshTabContent(tabId);
        }, 100);
    });
    
    console.log(`✅ Tab system initialized - ${savedTab} active`);
}

// Auto-refresh tab content when switching
function refreshTabContent(tabId) {
    console.log('🔄 Auto-refreshing content for tab:', tabId);
    
    switch(tabId) {
        case 'find-matches':
            // Refresh discovery content
            if (typeof loadDiscoveryBooks === 'function') {
                showLoadingState('#books-grid');
                loadDiscoveryBooks();
            }
            break;
            
        case 'my-requests':
            // Refresh requests content
            showNotification('Refreshing your requests...', 'info', 2000);
            setTimeout(() => {
                location.reload(); // For now, reload to get fresh server data
            }, 500);
            break;
            
        case 'active-swaps':
            // Refresh active swaps
            showNotification('Refreshing active swaps...', 'info', 2000);
            setTimeout(() => {
                location.reload(); // For now, reload to get fresh server data
            }, 500);
            break;
            
        case 'incoming-requests':
            // Refresh incoming requests
            showNotification('Refreshing incoming requests...', 'info', 2000);
            setTimeout(() => {
                location.reload(); // For now, reload to get fresh server data
            }, 500);
            break;
            
        default:
            console.log('No refresh action defined for tab:', tabId);
    }
}

// Show loading state for tab content
function showLoadingState(selector) {
    const $container = $(selector);
    if ($container.length) {
        $container.html(`
            <div class="loading-state text-center py-5">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
                <p class="text-muted">Refreshing content...</p>
            </div>
        `);
    }
}

// Initialize My Requests Sub-tabs
function initializeMyRequestsSubTabs() {
    console.log('🔧 Initializing My Requests sub-tabs...');
    
    // Ensure the first sub-tab (Pending) is active by default
    $('#requestStatusTabs .nav-link').removeClass('active').attr('aria-selected', 'false');
    $('#pending-requests-tab').addClass('active').attr('aria-selected', 'true');
    
    // Use Bootstrap's tab API to show the correct tab
    $('#pending-requests, #completed-requests, #canceled-requests').removeClass('show active');
    $('#pending-requests').addClass('show active');
    
    console.log('✅ My Requests sub-tabs initialized - Pending active');
}

// Enhanced My Requests Tab Handler
function handleMyRequestsTabActivation() {
    console.log('🎯 My Requests tab activated - ensuring sub-tabs work');
    
    // Small delay to ensure the main tab is fully activated
    setTimeout(() => {
        // Re-initialize sub-tabs to ensure they work properly
        initializeMyRequestsSubTabs();
        
        // Bind sub-tab click events - use Bootstrap's native tab() method
        $('#requestStatusTabs .nav-link').off('click.custom').on('click.custom', function(e) {
            e.preventDefault();
            
            const target = $(this).attr('href');
            const targetId = target.substring(1); // Remove #
            
            console.log('🔄 Sub-tab clicked:', targetId);
            
            // Use Bootstrap's native tab method
            $(this).tab('show');
            
            console.log('✅ Sub-tab switched to:', targetId);
            
            return false;
        });
    }, 100);
}

// Initialize when document is ready
$(document).ready(function() {
    console.log('🚀 Modern Swap Matcher - Page Ready');
    console.log('jQuery version:', $.fn.jquery);
    
    // Initialize tab isolation immediately - ensure Find Matches is active
    initializeTabSystem();
    
    // Initialize the swap matcher
    initializeSwapMatcher();
    
    // Initialize tooltips
    $('[data-toggle="tooltip"]').tooltip();
    
    // Setup message validation for swap request
    setupMessageValidation();
    
    // Modal event handlers
    $('#swapRequestModal').on('hidden.bs.modal', function() {
        // Reset modal state when closed
        currentStep = 1;
        selectedUserBook = null;
        targetBook = null;
        targetBookData = null;
        $('.user-book-card').removeClass('selected');
        $('#swap-message').val('');
    });
    
    // Debug: Test authentication
    console.log('🔐 Testing user authentication...');
    $.get('/api/users/profile')
        .done(function(data) {
            console.log('✅ User authenticated:', data);
        })
        .fail(function(xhr) {
            console.error('❌ Authentication failed:', xhr.status, xhr.responseText);
            if (xhr.status === 401) {
                console.log('🚨 User not logged in - redirecting to login');
                window.location.href = '/login';
            }
        });
    
    // Initialize Pagination for My Requests
    initializeRequestsPagination();
    
    // Initialize sub-tabs for My Requests section
    initializeMyRequestsSubTabs();
    
    // Reset pagination when switching sub-tabs (Pending/Completed/Canceled)
    $('#pending-requests-tab, #completed-requests-tab, #canceled-requests-tab').on('shown.bs.tab', function (e) {
        const targetTab = $(e.target).attr('href');
        
        // Reset to page 1 when switching tabs
        if (targetTab === '#pending-requests') {
            resetPaginationForTab('pending', 'pending-requests-container', 'pending-pagination', 9, '.pending-request-item');
        } else if (targetTab === '#completed-requests') {
            resetPaginationForTab('completed', 'completed-requests-container', 'completed-pagination', 9, '.completed-request-item');
        } else if (targetTab === '#canceled-requests') {
            resetPaginationForTab('canceled', 'canceled-requests-container', 'canceled-pagination', 9, '.canceled-request-item');
        }
    });
    
    // Reset pagination for Active Swaps when switching to that tab
    $('#active-swaps-tab').on('shown.bs.tab', function (e) {
        console.log('🔄 Active Swaps tab activated - resetting pagination');
        resetPaginationForTab('active', 'active-swaps-container', 'active-swaps-pagination', 6, '.active-swap-item');
    });
    
    // Enhanced tab isolation and switching functionality
    $('a[data-toggle="tab"]').on('show.bs.tab', function (e) {
        console.log('🔄 Tab switching from:', $(e.relatedTarget)?.attr('href'), 'to:', $(e.target).attr('href'));
        
        // Let Bootstrap handle the tab hiding
    });
    
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        const targetTab = $(e.target).attr('href');
        console.log('✅ Tab switched to:', targetTab);
        
        // Special handling for My Requests tab to ensure sub-tabs work
        if (targetTab === '#my-requests') {
            handleMyRequestsTabActivation();
        }
        
        console.log('✅ Active tab pane:', $(targetTab).attr('id'));
    });
});

// Pagination for My Requests
// Store pagination state for each tab
const paginationStates = {
    pending: { currentPage: 1 },
    completed: { currentPage: 1 },
    canceled: { currentPage: 1 },
    active: { currentPage: 1 }
};

function initializeRequestsPagination() {
    console.log('🔧 Initializing all pagination systems...');
    
    const itemsPerPage = 9; // 3x3 grid for requests
    const activeSwapsPerPage = 6; // 2x3 grid for active swaps like wishlist
    
    // Initialize pagination for each tab with unique selectors
    setupPagination('pending', 'pending-requests-container', 'pending-pagination', itemsPerPage, '.pending-request-item');
    setupPagination('completed', 'completed-requests-container', 'completed-pagination', itemsPerPage, '.completed-request-item');
    setupPagination('canceled', 'canceled-requests-container', 'canceled-pagination', itemsPerPage, '.canceled-request-item');
    
    // Add Active Swaps pagination - 6 swaps per page in grid layout
    setupPagination('active', 'active-swaps-container', 'active-swaps-pagination', activeSwapsPerPage, '.active-swap-item');
    
    console.log('✅ All pagination systems initialized');
}

function setupPagination(tabKey, containerId, paginationId, itemsPerPage, itemSelector) {
    console.log(`🔧 Setting up pagination for ${tabKey}:`, {containerId, paginationId, itemsPerPage, itemSelector});
    
    const container = document.getElementById(containerId);
    const pagination = document.getElementById(paginationId);
    
    if (!container) {
        console.warn(`❌ Container not found: ${containerId}`);
        return;
    }
    
    const items = container.querySelectorAll(itemSelector);
    const totalItems = items.length;
    
    console.log(`📊 Found ${totalItems} items for ${tabKey} pagination`);
    
    if (totalItems === 0) {
        console.log(`ℹ️ No items found for ${tabKey} - hiding pagination`);
        if (pagination) pagination.style.display = 'none';
        return;
    }
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    
    // Always hide items beyond first page, even if pagination isn't shown
    items.forEach((item, index) => {
        if (index >= itemsPerPage) {
            item.style.display = 'none';
        } else {
            item.style.display = 'block';
        }
    });
    
    if (totalPages <= 1) return; // No pagination needed
    
    function showPage(page) {
        // Update state
        paginationStates[tabKey].currentPage = page;
        
        // Hide all items
        items.forEach(item => {
            item.style.display = 'none';
        });
        
        // Show items for current page
        const start = (page - 1) * itemsPerPage;
        const end = start + itemsPerPage;
        
        for (let i = start; i < end && i < totalItems; i++) {
            items[i].style.display = 'block';
        }
        
        // Update pagination buttons
        updatePaginationButtons(page, totalPages);
        
        // Scroll to top of container
        container.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
    
    function updatePaginationButtons(page, total) {
        if (!pagination) return;
        
        let html = '';
        
        // Previous button
        html += `<li class="page-item ${page === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${page - 1}" data-tab="${tabKey}">
                        <i class="bi bi-chevron-left"></i>
                    </a>
                 </li>`;
        
        // Page numbers
        for (let i = 1; i <= total; i++) {
            if (i === 1 || i === total || (i >= page - 1 && i <= page + 1)) {
                html += `<li class="page-item ${i === page ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}" data-tab="${tabKey}">${i}</a>
                         </li>`;
            } else if (i === page - 2 || i === page + 2) {
                html += `<li class="page-item disabled">
                            <span class="page-link">...</span>
                         </li>`;
            }
        }
        
        // Next button
        html += `<li class="page-item ${page === total ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${page + 1}" data-tab="${tabKey}">
                        <i class="bi bi-chevron-right"></i>
                    </a>
                 </li>`;
        
        pagination.innerHTML = html;
        
        // Add click handlers
        pagination.querySelectorAll('a.page-link').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const newPage = parseInt(this.getAttribute('data-page'));
                const clickedTab = this.getAttribute('data-tab');
                if (newPage >= 1 && newPage <= total && clickedTab === tabKey) {
                    showPage(newPage);
                }
            });
        });
    }
    
    // Show first page initially
    showPage(1);
}

// Helper function to reset pagination when switching tabs
function resetPaginationForTab(tabKey, containerId, paginationId, itemsPerPage, itemSelector) {
    const container = document.getElementById(containerId);
    
    if (!container) return;
    
    // Reset state to page 1
    paginationStates[tabKey].currentPage = 1;
    
    const items = container.querySelectorAll(itemSelector);
    
    // Show only first page items
    items.forEach((item, index) => {
        if (index < itemsPerPage) {
            item.style.display = 'block';
        } else {
            item.style.display = 'none';
        }
    });
    
    // Reset pagination buttons to page 1 if they exist
    const pagination = document.getElementById(paginationId);
    if (pagination && pagination.innerHTML) {
        // Find and activate the first page button
        const pageButtons = pagination.querySelectorAll('li.page-item');
        pageButtons.forEach((btn) => {
            const link = btn.querySelector('a.page-link');
            if (link && link.getAttribute('data-page') === '1') {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });
    }
}

// Chat functionality - Use navbar chat system
function openChat(swapId) {
    console.log('💬 Opening chat for swap:', swapId);
    
    // Get swap details to find the other user
    $.get(`/api/swaps/${swapId}`)
        .done(function(response) {
            const swap = response.swap || response;
            const currentUserId = '<%= user._id %>';
            
            // Determine the other user
            const isRequester = swap.requester._id === currentUserId || swap.requester === currentUserId;
            const otherUser = isRequester ? swap.owner : swap.requester;
            const otherUserId = otherUser._id || otherUser;
            const otherUserName = otherUser.fullname || otherUser.username || 'User';
            const otherUserImage = otherUser.profileImage || '/images/default-avatar.png';
            
            console.log('📋 Opening chat with:', {
                name: otherUserName,
                id: otherUserId,
                image: otherUserImage
            });
            
            // Use the navbar chat system
            if (window.swapShelfChat) {
                try {
                    console.log('✅ Using SwapShelf Chat Interface');
                    
                    // Prepare user object for chat
                    const userForChat = {
                        _id: otherUserId,
                        fullname: otherUserName,
                        username: otherUserName,
                        profileImage: otherUserImage
                    };
                    
                    // Open the chat modal
                    window.swapShelfChat.openChat();
                    
                    // Wait a moment for modal to open, then start the conversation
                    setTimeout(() => {
                        window.swapShelfChat.showChatView(userForChat);
                        showNotification('Chat Opened', `Now chatting with ${otherUserName}`, 'success', 3000);
                    }, 300);
                    
                } catch (error) {
                    console.error('❌ Failed to open chat:', error);
                    showNotification('Chat Error', 'Failed to open chat. Please try again.', 'error');
                }
            } else {
                console.error('❌ SwapShelf Chat system not available');
                console.log('🔍 Debug info:');
                console.log('  - window.swapShelfChat:', window.swapShelfChat);
                console.log('  - Other user:', { id: otherUserId, name: otherUserName });
                
                // Show helpful message
                showNotification(
                    'Chat Unavailable', 
                    `Please use the chat icon in the navbar to contact ${otherUserName}.`, 
                    'warning',
                    5000
                );
            }
        })
        .fail(function(xhr) {
            console.error('❌ Failed to load swap details:', xhr);
            showErrorMessage('Failed to load swap information. Please try again.');
        });
}

// Show Active Swap Process Guide
function showSwapProcessGuide() {
    const modal = $(`
        <div class="modal fade" id="swapGuideModal" tabindex="-1">
            <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content" style="background: linear-gradient(135deg, #1E1E1E 0%, #2A2D35 100%); border: 1px solid rgba(59, 183, 251, 0.2); border-radius: 20px;">
                    <div class="modal-header" style="background: linear-gradient(135deg, rgba(59, 183, 251, 0.1), rgba(102, 126, 234, 0.1)); border-bottom: 1px solid rgba(59, 183, 251, 0.2); padding: 24px 32px;">
                        <h4 class="modal-title" style="color: #fff; font-weight: 700;">
                            <i class="bi bi-info-circle text-primary me-2"></i>
                            Complete Swap Process Guide
                        </h4>
                        <button type="button" class="close text-white" data-dismiss="modal" style="opacity: 0.8; font-size: 2rem;">&times;</button>
                    </div>
                    <div class="modal-body" style="padding: 32px;">
                        <!-- Step 1 -->
                        <div class="swap-guide-step mb-4">
                            <div class="d-flex align-items-start mb-3">
                                <div class="step-number" style="width: 48px; height: 48px; background: linear-gradient(135deg, #3BB7FB, #667eea); border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 1.5rem; font-weight: 700; color: white; flex-shrink: 0; margin-right: 16px;">1</div>
                                <div>
                                    <h5 class="text-white mb-2" style="font-weight: 600;">Send Swap Request</h5>
                                    <p class="text-muted mb-2">Browse available books and click "Start Swap". Select a book from your library and write a personal message explaining why you want the book.</p>
                                    <span class="badge" style="background: rgba(59, 183, 251, 0.2); color: #3BB7FB; padding: 6px 12px; border-radius: 8px;">
                                        <i class="bi bi-clock-history me-1"></i>Status: Pending
                                    </span>
                                </div>
                            </div>
                        </div>

                        <!-- Step 2 -->
                        <div class="swap-guide-step mb-4">
                            <div class="d-flex align-items-start mb-3">
                                <div class="step-number" style="width: 48px; height: 48px; background: linear-gradient(135deg, #28A745, #20C997); border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 1.5rem; font-weight: 700; color: white; flex-shrink: 0; margin-right: 16px;">2</div>
                                <div>
                                    <h5 class="text-white mb-2" style="font-weight: 600;">Request Accepted</h5>
                                    <p class="text-muted mb-2">The book owner reviews your request and accepts it. You'll receive a notification. Now you can chat with your swap partner to coordinate details.</p>
                                    <span class="badge" style="background: rgba(40, 167, 69, 0.2); color: #28A745; padding: 6px 12px; border-radius: 8px;">
                                        <i class="bi bi-check-circle me-1"></i>Status: Accepted
                                    </span>
                                </div>
                            </div>
                        </div>

                        <!-- Step 3 -->
                        <div class="swap-guide-step mb-4">
                            <div class="d-flex align-items-start mb-3">
                                <div class="step-number" style="width: 48px; height: 48px; background: linear-gradient(135deg, #FFC107, #FF9800); border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 1.5rem; font-weight: 700; color: white; flex-shrink: 0; margin-right: 16px;">3</div>
                                <div>
                                    <h5 class="text-white mb-2" style="font-weight: 600;">Schedule Meeting</h5>
                                    <p class="text-muted mb-3">Click "Schedule Meeting" to set up when and where to exchange books. Choose a public, safe location like a library or coffee shop.</p>
                                    <div class="alert" style="background: rgba(255, 193, 7, 0.1); border-left: 4px solid #FFC107; border-radius: 8px; padding: 12px 16px;">
                                        <strong class="text-warning">
                                            <i class="bi bi-shield-check me-2"></i>Safety First:
                                        </strong>
                                        <ul class="mb-0 mt-2 text-muted" style="font-size: 0.9rem;">
                                            <li>Meet in public places during daylight</li>
                                            <li>Bring a friend or tell someone where you're going</li>
                                            <li>Check book condition before finalizing</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Step 4 -->
                        <div class="swap-guide-step mb-4">
                            <div class="d-flex align-items-start mb-3">
                                <div class="step-number" style="width: 48px; height: 48px; background: linear-gradient(135deg, #3BB7FB, #5BCCF6); border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 1.5rem; font-weight: 700; color: white; flex-shrink: 0; margin-right: 16px;">4</div>
                                <div>
                                    <h5 class="text-white mb-2" style="font-weight: 600;">Exchange Books</h5>
                                    <p class="text-muted mb-2">Meet at the scheduled time and location. Inspect the books to ensure they match the description and condition. Exchange books and enjoy your new reading material!</p>
                                    <span class="badge" style="background: rgba(59, 183, 251, 0.2); color: #3BB7FB; padding: 6px 12px; border-radius: 8px;">
                                        <i class="bi bi-arrow-left-right me-1"></i>Status: In Progress
                                    </span>
                                </div>
                            </div>
                        </div>

                        <!-- Step 5 -->
                        <div class="swap-guide-step">
                            <div class="d-flex align-items-start mb-3">
                                <div class="step-number" style="width: 48px; height: 48px; background: linear-gradient(135deg, #17A2B8, #138496); border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 1.5rem; font-weight: 700; color: white; flex-shrink: 0; margin-right: 16px;">5</div>
                                <div>
                                    <h5 class="text-white mb-2" style="font-weight: 600;">Confirm Completion</h5>
                                    <p class="text-muted mb-3">After successfully exchanging books, both parties confirm the swap completion. You'll earn reward points and can leave a review for your swap partner!</p>
                                    <div class="d-flex gap-3 align-items-center">
                                        <span class="badge" style="background: rgba(23, 162, 184, 0.2); color: #17A2B8; padding: 6px 12px; border-radius: 8px;">
                                            <i class="bi bi-check-all me-1"></i>Status: Completed
                                        </span>
                                        <span class="badge" style="background: linear-gradient(135deg, #FFD700, #FFA500); color: white; padding: 6px 12px; border-radius: 8px;">
                                            <i class="bi bi-trophy me-1"></i>+10 Reward Points
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Quick Actions -->
                        <div class="mt-5 p-4" style="background: rgba(59, 183, 251, 0.05); border: 2px solid rgba(59, 183, 251, 0.2); border-radius: 12px;">
                            <h6 class="text-primary mb-3" style="font-weight: 600;">
                                <i class="bi bi-lightning-charge me-2"></i>Quick Actions
                            </h6>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <button class="btn btn-block" style="background: rgba(35, 37, 41, 0.6); border: 1px solid rgba(59, 183, 251, 0.2); color: white; border-radius: 12px; padding: 12px; width: 100%; text-align: left;" onclick="$('#swapGuideModal').modal('hide'); $('#chatToggle').click();">
                                        <i class="bi bi-chat-dots text-primary me-2"></i>
                                        Open Chat
                                    </button>
                                </div>
                                <div class="col-md-6">
                                    <button class="btn btn-block" style="background: rgba(35, 37, 41, 0.6); border: 1px solid rgba(59, 183, 251, 0.2); color: white; border-radius: 12px; padding: 12px; width: 100%; text-align: left;" onclick="$('#swapGuideModal').modal('hide'); $('a[href=\\\'#active-swaps\\\']').click();">
                                        <i class="bi bi-arrow-left-right text-success me-2"></i>
                                        View Active Swaps
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer" style="background: rgba(255, 255, 255, 0.03); border-top: 1px solid rgba(59, 183, 251, 0.2); padding: 20px 32px;">
                        <button type="button" class="btn btn-primary" data-dismiss="modal" style="background: linear-gradient(135deg, #3BB7FB, #667eea); border: none; border-radius: 20px; padding: 10px 24px; font-weight: 600;">
                            <i class="bi bi-check-lg me-2"></i>Got It!
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `);
    
    $('body').append(modal);
    $('#swapGuideModal').modal('show');
    
    // Remove modal when hidden
    $('#swapGuideModal').on('hidden.bs.modal', function () {
        $(this).remove();
    });
}

// Auto-refresh polling for active swaps when waiting for confirmations
let pollInterval = null;

function startSwapPolling() {
    // Only poll if on Active Swaps tab and there are pending confirmations
    const activeSwapsTab = $('#active-swaps-tab');
    if (activeSwapsTab.length > 0 && activeSwapsTab.hasClass('active')) {
        // Check if any swap is waiting for confirmations
        const waitingForConfirmation = $('.active-swap-item').length > 0;
        
        if (waitingForConfirmation && !pollInterval) {
            console.log('🔄 Starting swap status polling...');
            pollInterval = setInterval(checkSwapUpdates, 10000); // Poll every 10 seconds
        }
    }
}

function stopSwapPolling() {
    if (pollInterval) {
        console.log('⏸️ Stopping swap status polling');
        clearInterval(pollInterval);
        pollInterval = null;
    }
}

function checkSwapUpdates() {
    // Silently check for updates without showing loading indicators
    $.ajax({
        url: '/api/swaps',
        method: 'GET',
        timeout: 5000
    })
    .done(function(response) {
        // Check if any swap has new confirmations
        const currentSwaps = response.mySwaps || response.userSwaps || [];
        let needsRefresh = false;
        
        currentSwaps.forEach(swap => {
            if (swap.status === 'Accepted' || swap.status === 'In Progress') {
                // Check if meeting confirmations changed
                if (swap.meetingDetails) {
                    const requesterConfirmed = swap.meetingDetails.requesterConfirmed;
                    const ownerConfirmed = swap.meetingDetails.ownerConfirmed;
                    const bothConfirmed = requesterConfirmed && ownerConfirmed;
                    
                    // If both confirmed but page doesn't reflect it, refresh
                    if (bothConfirmed) {
                        const swapCard = $(`.active-swap-item[data-swap-id="${swap._id}"]`);
                        if (swapCard.find('.text-warning').length > 0) {
                            needsRefresh = true;
                        }
                    }
                }
                
                // Check if book receipt confirmations changed
                if (swap.receivedConfirmation) {
                    const requesterConfirmed = swap.receivedConfirmation.requesterConfirmed;
                    const ownerConfirmed = swap.receivedConfirmation.ownerConfirmed;
                    const bothConfirmed = requesterConfirmed && ownerConfirmed;
                    
                    if (bothConfirmed && swap.status === 'Completed') {
                        needsRefresh = true;
                    }
                }
            }
        });
        
        if (needsRefresh) {
            console.log('✨ Swap status updated - refreshing page...');
            location.reload();
        }
    })
    .fail(function(xhr) {
        console.log('⚠️ Swap polling failed (silent):', xhr.status);
        // Don't show errors for polling failures
    });
}

// Start polling when Active Swaps tab is shown
$(document).ready(function() {
    $('#active-swaps-tab').on('shown.bs.tab', function() {
        startSwapPolling();
    });
    
    // Stop polling when switching away from Active Swaps
    $('a[data-toggle="tab"]').on('show.bs.tab', function(e) {
        if ($(e.target).attr('href') !== '#active-swaps') {
            stopSwapPolling();
        }
    });
    
    // Start polling if Active Swaps is the default tab
    if ($('#active-swaps-tab').hasClass('active')) {
        startSwapPolling();
    }
    
    // Stop polling when user leaves the page
    $(window).on('beforeunload', function() {
        stopSwapPolling();
    });
});
</script>

<!-- Socket.IO for Real-time Chat -->
<script src="/socket.io/socket.io.js"></script>

<!-- Chat System Integration -->
<script src="/js/navbar-chat.js"></script>

</body>
</html>

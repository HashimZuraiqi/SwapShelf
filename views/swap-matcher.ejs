<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Swap Matcher | BookSwap</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <!-- Navbar Chat System CSS -->
    <link rel="stylesheet" href="/css/navbar-chat.css">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:700,600,400&display=swap" rel="stylesheet">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <style>
        /* Active navigation styling for dynamic page */
        .nav-item.active .nav-link {
            color: #3BB7FB !important;
            background: rgba(59, 183, 251, 0.1);
            border-radius: 5px;
            font-weight: 600;
        }

        /* Professional Swap Matcher Styles */
        .swap-hero {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            padding: 40px;
            margin-bottom: 30px;
            color: white;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }

        .swap-stats {
            background: rgba(255,255,255,0.15);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
        }

        .swap-section-card {
            background: #1E1E1E;
            border-radius: 20px;
            border: 1px solid rgba(59, 183, 251, 0.2);
            transition: all 0.3s ease;
            overflow: hidden;
        }

        .swap-section-card:hover {
            border-color: rgba(59, 183, 251, 0.4);
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.3);
        }

        .swap-section-header {
            background: linear-gradient(135deg, #2A2D35, #23242a);
            padding: 20px;
            border-bottom: 1px solid rgba(59, 183, 251, 0.2);
        }

        .book-swap-item {
            background: #2A2D35;
            border-radius: 15px;
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid rgba(59, 183, 251, 0.1);
            transition: all 0.3s ease;
        }

        .book-swap-item:hover {
            border-color: rgba(59, 183, 251, 0.3);
            transform: translateX(5px);
            background: #2E3138;
        }

        .book-cover-small {
            width: 60px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }

        .match-indicator {
            background: linear-gradient(45deg, #FF6B6B, #FFE66D);
            color: white;
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
            display: inline-block;
        }

        .swap-status-badge {
            padding: 6px 12px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: 500;
        }

        .status-pending {
            background: rgba(255, 193, 7, 0.2);
            color: #FFC107;
            border: 1px solid rgba(255, 193, 7, 0.3);
        }

        .status-accepted {
            background: rgba(40, 167, 69, 0.2);
            color: #28A745;
            border: 1px solid rgba(40, 167, 69, 0.3);
        }

        .status-rejected {
            background: rgba(220, 53, 69, 0.2);
            color: #DC3545;
            border: 1px solid rgba(220, 53, 69, 0.3);
        }

        .swap-action-btn {
            background: linear-gradient(135deg, #3BB7FB, #667eea);
            border: none;
            border-radius: 10px;
            padding: 8px 16px;
            color: white;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .swap-action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(59, 183, 251, 0.3);
            color: white;
        }

        .swap-tabs {
            background: #1E1E1E;
            border-radius: 15px;
            padding: 10px;
            margin-bottom: 30px;
        }

        .swap-tabs .nav-link {
            background: transparent;
            border: 1px solid rgba(59, 183, 251, 0.2);
            color: #CCCCCC;
            border-radius: 10px;
            margin: 0 5px;
            padding: 12px 20px;
            transition: all 0.3s ease;
        }

        .swap-tabs .nav-link.active {
            background: linear-gradient(135deg, #3BB7FB, #667eea);
            border-color: transparent;
            color: white;
        }

        .swap-tabs .nav-link:hover:not(.active) {
            background: rgba(59, 183, 251, 0.1);
            border-color: rgba(59, 183, 251, 0.3);
            color: #3BB7FB;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #888;
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .quick-match-btn {
            background: linear-gradient(135deg, #FF6B6B, #FFE66D);
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .quick-match-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.3);
            color: white;
        }

        .matches-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
            gap: 12px;
            padding: 15px 0;
        }

        .match-card {
            background: linear-gradient(135deg, #23242a, #1E1F23);
            border-radius: 16px;
            overflow: hidden;
            border: 1px solid rgba(120,130,150,0.10);
            transition: all 0.3s ease;
            height: 320px;
            position: relative;
            display: flex;
            flex-direction: column;
        }

        .match-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.3);
            border-color: rgba(59, 183, 251, 0.2);
        }

        .book-cover-container {
            position: relative;
            text-align: center;
            margin-bottom: 0.75rem;
            flex-shrink: 0;
        }

        .book-cover-professional {
            width: 100%;
            max-width: 120px;
            height: 140px;
            object-fit: cover;
            border-radius: 10px;
            box-shadow: 0 6px 20px rgba(0,0,0,0.4);
            transition: transform 0.3s ease;
        }

        .book-cover-placeholder {
            width: 120px;
            height: 140px;
            background: linear-gradient(135deg, #3BB7FB, #34a0e0);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto;
            box-shadow: 0 6px 20px rgba(0,0,0,0.4);
        }

        .match-card-content {
            padding: 0.75rem;
            display: flex;
            flex-direction: column;
            flex-grow: 1;
            justify-content: space-between;
        }

        .book-owner {
            margin-bottom: 0.25rem;
        }

        .book-owner i {
            margin-right: 3px;
            opacity: 0.7;
        }

        .book-title {
            font-size: 0.9rem;
            line-height: 1.2;
            margin-bottom: 0.25rem;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            min-height: 2.4rem;
        }

        .book-author {
            font-size: 0.75rem;
            color: #888;
            margin-bottom: 0.5rem;
            display: -webkit-box;
            -webkit-line-clamp: 1;
            line-clamp: 1;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .book-badges {
            margin-bottom: 0.75rem;
        }

        .book-actions {
            margin-top: auto;
        }

        /* Preferences modal & selection clarity */
        .pref-section-title { color: #ffffff; font-weight: 600; margin-bottom: 0.5rem; }
        .pref-hint { color: #b0b3b8; font-size: 0.9rem; margin-bottom: 0.75rem; }
        .pref-chip { display:inline-flex; align-items:center; gap:.35rem; padding:.4rem .75rem; border:1px solid rgba(59,183,251,.25); color:#e4e6ea; border-radius:9999px; margin:.25rem; cursor:pointer; background:#1E1F23; transition:all .2s; font-size:.92rem; }
        .pref-chip:hover { border-color: rgba(59,183,251,.5); }
        .pref-chip.active { background: linear-gradient(135deg,#3BB7FB20,#F6B44320); border-color:#3BB7FB; color:#fff; box-shadow:0 6px 16px rgba(59,183,251,.15); }
        .pref-btn-group .btn { margin-right:.5rem; margin-bottom:.5rem; }
        .pref-range { width:100%; }
        .range-value { color:#E5E7EB; font-weight:600; margin-left:.5rem; }
        .book-swap-item.selected { border-color:#3BB7FB !important; background: rgba(59,183,251,.08); box-shadow:0 8px 24px rgba(59,183,251,.12); }

        /* Custom Pagination Styling */
        .pagination-custom {
            margin: 0;
        }

        .pagination-custom .page-item .page-link {
            background: #23242a;
            border: 1px solid rgba(120,130,150,0.2);
            color: #CCCCCC;
            padding: 0.5rem 0.75rem;
            margin: 0 2px;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .pagination-custom .page-item .page-link:hover {
            background: rgba(59, 183, 251, 0.1);
            border-color: rgba(59, 183, 251, 0.3);
            color: #3BB7FB;
            transform: translateY(-1px);
        }

        .pagination-custom .page-item.active .page-link {
            background: linear-gradient(135deg, #3BB7FB, #667eea);
            border-color: transparent;
            color: white;
            box-shadow: 0 4px 12px rgba(59, 183, 251, 0.3);
        }

        .pagination-custom .page-item.disabled .page-link {
            background: #1E1F23;
            border-color: rgba(120,130,150,0.1);
            color: #666;
            cursor: not-allowed;
        }

        .pagination-custom .page-item.disabled .page-link:hover {
            background: #1E1F23;
            border-color: rgba(120,130,150,0.1);
            color: #666;
            transform: none;
        }

        /* Advanced Filter Bar Styling */
        #matches-filter-bar {
            background: transparent;
            border: none;
            border-radius: 0;
            padding: 0;
            margin-bottom: 20px;
            position: relative;
        }

        /* Remove box animations and effects */

        /* Enhanced Form Controls */
        #matches-filter-bar .form-control {
            background: rgba(30, 30, 30, 0.8);
            border: 1px solid rgba(120, 130, 150, 0.2);
            border-radius: 8px;
            color: #ffffff;
            padding: 8px 12px;
            font-size: 0.875rem;
            height: auto;
            transition: all 0.3s ease;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);
        }

        #matches-filter-bar .form-control:focus {
            background: rgba(30, 30, 30, 0.95) !important;
            border-color: #3BB7FB !important;
            box-shadow: 
                inset 0 1px 4px rgba(0, 0, 0, 0.3),
                0 0 0 2px rgba(59, 183, 251, 0.15),
                0 2px 8px rgba(59, 183, 251, 0.15) !important;
            color: #ffffff !important;
            outline: none;
        }

        #matches-filter-bar .form-control:hover {
            border-color: rgba(59, 183, 251, 0.3);
            background: rgba(30, 30, 30, 0.9);
        }

        /* Filter Labels */
        #matches-filter-bar label {
            color: #B0B3B8;
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.3px;
            margin-bottom: 4px;
            display: block;
        }

        /* Clear Filters Button */
        #clear-filters {
            background: linear-gradient(135deg, rgba(220, 53, 69, 0.15), rgba(220, 53, 69, 0.25));
            border: 1px solid rgba(220, 53, 69, 0.3);
            color: #DC3545;
            border-radius: 8px;
            padding: 8px 12px;
            font-size: 0.875rem;
            font-weight: 500;
            height: auto;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 4px;
        }

        #clear-filters:hover {
            background: linear-gradient(135deg, rgba(220, 53, 69, 0.25), rgba(220, 53, 69, 0.35));
            border-color: rgba(220, 53, 69, 0.5);
            color: #ffffff;
            transform: translateY(-1px);
            box-shadow: 0 3px 12px rgba(220, 53, 69, 0.25);
        }

        #clear-filters:active {
            transform: translateY(0);
            box-shadow: 0 2px 8px rgba(220, 53, 69, 0.2);
        }

        /* Matches Count Styling */
        #matches-count {
            color: #B0B3B8;
            font-size: 0.8rem;
            font-weight: 500;
            padding: 4px 12px;
            background: rgba(59, 183, 251, 0.1);
            border: 1px solid rgba(59, 183, 251, 0.2);
            border-radius: 15px;
            display: inline-flex;
            align-items: center;
            gap: 4px;
        }

        #matches-count::before {
            content: '🔍';
            font-size: 0.75rem;
        }

        /* Filter Row Spacing */
        #matches-filter-bar .row {
            margin-left: -6px;
            margin-right: -6px;
        }

        #matches-filter-bar .row > [class*="col-"] {
            padding-left: 6px;
            padding-right: 6px;
        }

        /* Filter Section Header */
        .filter-section-header {
            color: #ffffff;
            font-size: 0.95rem;
            font-weight: 600;
            margin-bottom: 12px;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .filter-section-header i {
            color: #3BB7FB;
            font-size: 1rem;
        }

        /* Simplified Select Styling - Use browser default arrow */
        #matches-filter-bar select.form-control {
            background-color: rgba(30, 30, 30, 0.8) !important;
            color: #ffffff !important;
            /* Let browser handle the arrow */
        }

        #matches-filter-bar select.form-control:focus {
            background-color: rgba(30, 30, 30, 0.95) !important;
            color: #ffffff !important;
        }

        #matches-filter-bar select.form-control:hover {
            background-color: rgba(30, 30, 30, 0.9) !important;
            color: #ffffff !important;
        }

        /* Select Options Styling */
        #matches-filter-bar select.form-control option {
            background-color: #1E1E1E !important;
            color: #ffffff !important;
            padding: 8px 12px;
        }

        #matches-filter-bar select.form-control option:hover,
        #matches-filter-bar select.form-control option:checked {
            background-color: #3BB7FB !important;
            color: #ffffff !important;
        }

        /* ========== MODERN REDESIGN STYLES ========== */
        
        /* Discovery Section */
        .discovery-section .card-header {
            background: linear-gradient(135deg, #23242a, #1E1F23);
            border-bottom: 1px solid rgba(59, 183, 251, 0.1);
        }

        .discovery-controls {
            display: flex;
            gap: 8px;
            align-items: center;
        }

        /* Location Toggle Styles */
        .location-toggle-wrapper {
            text-align: center;
        }

        .location-toggle {
            display: flex;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 25px;
            padding: 2px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .toggle-btn {
            padding: 6px 12px;
            border: none;
            border-radius: 20px;
            background: transparent;
            color: #b0b7c3;
            font-size: 0.8rem;
            font-weight: 500;
            transition: all 0.3s ease;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .toggle-btn.active {
            background: linear-gradient(135deg, #3BB7FB, #667eea);
            color: white;
            box-shadow: 0 4px 15px rgba(59, 183, 251, 0.3);
        }

        .toggle-btn:hover:not(.active) {
            color: white;
            background: rgba(255, 255, 255, 0.1);
        }

        .location-mode-info {
            font-size: 0.7rem;
            margin-top: 4px;
            display: block;
            min-height: 14px;
        }

        /* Modern Button Styles */
        .btn-modern {
            background: linear-gradient(135deg, #3BB7FB, #667eea);
            border: none;
            color: white;
            padding: 8px 20px;
            border-radius: 10px;
            font-weight: 600;
            font-size: 0.875rem;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .btn-modern:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(59, 183, 251, 0.3);
            color: white;
        }

        .btn-modern:disabled {
            background: #666;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn-modern-outline {
            background: transparent;
            border: 2px solid rgba(59, 183, 251, 0.3);
            color: #3BB7FB;
            padding: 6px 16px;
            border-radius: 10px;
            font-weight: 500;
            font-size: 0.875rem;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .btn-modern-outline:hover {
            border-color: #3BB7FB;
            background: rgba(59, 183, 251, 0.1);
            color: #3BB7FB;
        }

        .btn-danger-outline {
            background: transparent;
            border: 2px solid rgba(220, 53, 69, 0.3);
            color: #DC3545;
            padding: 8px 16px;
            border-radius: 10px;
            font-weight: 500;
            font-size: 0.875rem;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .btn-danger-outline:hover {
            border-color: #DC3545;
            background: rgba(220, 53, 69, 0.1);
            color: #DC3545;
        }

        /* Filter Panel */
        .filter-panel {
            animation: slideDown 0.3s ease;
        }

        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .filter-label {
            color: #B0B3B8;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 6px;
        }

        .form-control-modern {
            background: rgba(30, 30, 30, 0.8);
            border: 2px solid rgba(120, 130, 150, 0.2);
            border-radius: 10px;
            color: #ffffff;
            padding: 10px 16px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .form-control-modern:focus {
            background: rgba(30, 30, 30, 0.95);
            border-color: #3BB7FB;
            box-shadow: 0 0 0 3px rgba(59, 183, 251, 0.15);
            color: #ffffff;
            outline: none;
        }

        .results-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .matches-counter {
            background: linear-gradient(135deg, rgba(59, 183, 251, 0.15), rgba(102, 126, 234, 0.15));
            border: 1px solid rgba(59, 183, 251, 0.3);
            color: #3BB7FB;
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        /* Books Discovery Grid */
        .books-discovery-grid {
            margin-bottom: 30px;
        }

        .discovery-books-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            padding: 20px 0;
            align-items: stretch;
        }

        .discovery-book-card {
            background: linear-gradient(135deg, #23242a, #1E1F23);
            border-radius: 16px;
            border: 1px solid rgba(120,130,150,0.1);
            transition: all 0.3s ease;
            overflow: hidden;
            cursor: pointer;
            position: relative;
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .discovery-book-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.3);
            border-color: rgba(59, 183, 251, 0.3);
        }

        .discovery-book-cover {
            width: 100%;
            height: 160px;
            object-fit: cover;
            background: linear-gradient(135deg, #3BB7FB, #667eea);
            border-radius: 10px;
            box-shadow: 0 6px 20px rgba(0,0,0,0.4);
            transition: transform 0.3s ease;
        }

        .discovery-book-card:hover .discovery-book-cover {
            transform: scale(1.05);
        }

        .discovery-book-info {
            padding: 16px;
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }

        .discovery-book-title {
            font-size: 0.95rem;
            font-weight: 600;
            color: #ffffff;
            margin-bottom: 4px;
            line-height: 1.3;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .discovery-book-author {
            color: #B0B3B8;
            font-size: 0.8rem;
            margin-bottom: 8px;
        }

        .discovery-book-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }

        .discovery-genre-badge {
            background: rgba(59, 183, 251, 0.15);
            color: #3BB7FB;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.7rem;
            font-weight: 500;
        }

        .discovery-condition {
            color: #28A745;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .discovery-owner {
            color: #B0B3B8;
            font-size: 0.75rem;
            margin-bottom: 8px;
        }

        .discovery-swap-btn {
            width: 100%;
            background: linear-gradient(135deg, #3BB7FB, #667eea);
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 0.8rem;
            transition: all 0.3s ease;
            margin-top: auto;
        }

        .discovery-swap-btn:hover {
            background: linear-gradient(135deg, #2A9FE8, #5A6DD8);
            transform: translateY(-1px);
            color: white;
        }

        /* Loading State */
        .loading-state {
            text-align: center;
            padding: 80px 20px;
            color: #B0B3B8;
        }

        .loading-spinner {
            margin-bottom: 20px;
        }

        /* Modern Swap Request Modal */
        .modal-modern {
            background: #1E1E1E;
            border: 1px solid #3a3b40;
            border-radius: 16px;
            box-shadow: 0 25px 50px rgba(0,0,0,0.5);
        }

        .modal-header-modern {
            background: linear-gradient(135deg, #23242a, #1E1F23);
            border-bottom: 1px solid rgba(59, 183, 251, 0.2);
            padding: 24px 30px;
            border-radius: 16px 16px 0 0;
        }

        .modal-title-section h4 {
            color: #ffffff;
            font-weight: 700;
            margin: 0;
        }

        .modal-subtitle {
            color: #B0B3B8;
            font-size: 0.9rem;
            margin: 0;
        }

        .btn-close-modern {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: #ffffff;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .btn-close-modern:hover {
            background: rgba(220, 53, 69, 0.2);
            color: #DC3545;
        }

        .modal-body-modern {
            padding: 30px;
        }

        /* Step Indicator */
        .swap-steps {
            margin-bottom: 30px;
        }

        .step-indicator {
            display: flex;
            align-items: center;
            justify-content: center;
            max-width: 600px;
            margin: 0 auto;
        }

        .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            opacity: 0.5;
            transition: all 0.3s ease;
        }

        .step.active {
            opacity: 1;
        }

        .step-number {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(59, 183, 251, 0.2);
            border: 2px solid rgba(59, 183, 251, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            color: #3BB7FB;
            margin-bottom: 8px;
            transition: all 0.3s ease;
        }

        .step.active .step-number {
            background: linear-gradient(135deg, #3BB7FB, #667eea);
            border-color: transparent;
            color: white;
            box-shadow: 0 6px 20px rgba(59, 183, 251, 0.3);
        }

        .step-label {
            font-size: 0.8rem;
            color: #B0B3B8;
            font-weight: 500;
            text-align: center;
        }

        .step.active .step-label {
            color: #ffffff;
            font-weight: 600;
        }

        .step-line {
            flex: 1;
            height: 2px;
            background: rgba(59, 183, 251, 0.2);
            margin: 0 20px;
            position: relative;
            top: -16px;
        }

        /* Swap Steps */
        .swap-step {
            display: none;
        }

        .swap-step.active {
            display: block;
            animation: fadeIn 0.4s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Book Display Card */
        .book-display-card {
            background: linear-gradient(135deg, #23242a, #1E1F23);
            border-radius: 16px;
            border: 1px solid rgba(59, 183, 251, 0.2);
            padding: 20px;
            height: 100%;
        }

        .book-display-header h6 {
            color: #ffffff;
            font-weight: 600;
            margin-bottom: 16px;
        }

        /* Library Selection */
        .library-selection-card {
            background: linear-gradient(135deg, #23242a, #1E1F23);
            border-radius: 16px;
            border: 1px solid rgba(120,130,150,0.1);
            padding: 20px;
            height: 100%;
        }

        .library-header h6 {
            color: #ffffff;
            font-weight: 600;
            margin-bottom: 4px;
        }

        .search-input-group {
            position: relative;
        }

        .search-icon {
            position: absolute;
            left: 16px;
            top: 50%;
            transform: translateY(-50%);
            color: #B0B3B8;
        }

        .search-input-group .form-control-modern {
            padding-left: 45px;
        }

        /* User Books Grid */
        .user-books-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
            gap: 16px;
            max-height: 400px;
            overflow-y: auto;
            padding: 16px 0;
        }

        .user-book-card {
            background: rgba(30, 30, 30, 0.6);
            border: 2px solid rgba(120,130,150,0.1);
            border-radius: 12px;
            padding: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .user-book-card:hover {
            border-color: rgba(59, 183, 251, 0.3);
            background: rgba(30, 30, 30, 0.8);
            transform: translateY(-2px);
        }

        .user-book-card.selected {
            border-color: #3BB7FB;
            background: linear-gradient(135deg, rgba(59, 183, 251, 0.15), rgba(102, 126, 234, 0.15));
            box-shadow: 0 6px 20px rgba(59, 183, 251, 0.2);
        }

        .book-cover-container {
            text-align: center;
            margin-bottom: 12px;
        }

        .user-book-cover {
            width: 100%;
            max-width: 80px;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            transition: transform 0.3s ease;
        }

        .user-book-card:hover .user-book-cover {
            transform: scale(1.05);
        }

        /* Requested Book Display (You Want section) */
        #requested-book-display .book-cover-professional:hover {
            transform: scale(1.05);
        }

        .book-display-content {
            min-height: 300px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Swap Preview Books Hover Effects */
        .swap-book-preview .book-cover-professional:hover {
            transform: scale(1.05);
        }

        .user-book-info {
            text-align: center;
        }

        .user-book-info .book-title {
            font-size: 0.85rem;
            color: #ffffff;
            font-weight: 600;
            margin-bottom: 4px;
            line-height: 1.2;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .user-book-info .book-author {
            font-size: 0.75rem;
            color: #B0B3B8;
            margin-bottom: 8px;
        }

        .book-meta {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .genre-badge {
            background: rgba(59, 183, 251, 0.15);
            color: #3BB7FB;
            padding: 2px 6px;
            border-radius: 8px;
            font-size: 0.65rem;
            font-weight: 500;
        }

        .condition-text {
            color: #28A745;
            font-size: 0.7rem;
            font-weight: 500;
        }

        .selection-indicator {
            position: absolute;
            top: -8px;
            right: -8px;
            width: 24px;
            height: 24px;
            background: #3BB7FB;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 0.7rem;
            opacity: 0;
            transform: scale(0.8);
            transition: all 0.3s ease;
        }

        .user-book-card.selected .selection-indicator {
            opacity: 1;
            transform: scale(1);
        }

        /* Step 2 Styles */
        .swap-preview-section {
            max-width: 800px;
            margin: 0 auto;
        }

        .swap-book-preview {
            text-align: center;
        }

        .preview-label {
            color: #B0B3B8;
            font-size: 0.9rem;
            font-weight: 600;
            margin-bottom: 16px;
        }

        .swap-arrow {
            font-size: 2rem;
            color: #3BB7FB;
        }

        .message-section {
            max-width: 600px;
            margin: 0 auto;
        }

        .form-label {
            color: #ffffff;
            font-weight: 600;
            margin-bottom: 8px;
        }

        /* Modal Footer */
        .modal-footer-modern {
            background: rgba(30, 30, 30, 0.5);
            border-top: 1px solid rgba(59, 183, 251, 0.2);
            padding: 24px 30px;
            border-radius: 0 0 16px 16px;
        }

        .footer-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
        }

        .primary-actions {
            display: flex;
            gap: 12px;
            align-items: center;
        }

        .btn-outline-modern {
            background: transparent;
            border: 2px solid rgba(120,130,150,0.3);
            color: #B0B3B8;
            padding: 10px 20px;
            border-radius: 10px;
            font-weight: 600;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }

        .btn-outline-modern:hover {
            border-color: rgba(59, 183, 251, 0.5);
            color: #3BB7FB;
        }

        .btn-chat-modern {
            background: linear-gradient(135deg, #28A745, #20C997);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 10px;
            font-weight: 600;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }

        .btn-chat-modern:hover {
            background: linear-gradient(135deg, #218838, #1FA085);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(40, 167, 69, 0.3);
            color: white;
        }

        .btn-success-modern {
            background: linear-gradient(135deg, #28A745, #20C997);
            border: none;
            color: white;
            padding: 12px 24px;
            border-radius: 10px;
            font-weight: 700;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .btn-success-modern:hover {
            background: linear-gradient(135deg, #218838, #1FA085);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(40, 167, 69, 0.4);
            color: white;
        }

        /* Empty States */
        .empty-library {
            text-align: center;
            padding: 60px 20px;
            color: #B0B3B8;
        }

        .empty-library i {
            font-size: 3rem;
            margin-bottom: 16px;
            opacity: 0.5;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .discovery-books-grid {
                grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
                gap: 16px;
            }
            
            .user-books-grid {
                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
                gap: 12px;
            }
            
            .modal-header-modern,
            .modal-body-modern,
            .modal-footer-modern {
                padding: 20px;
            }
            
            .step-indicator {
                flex-direction: column;
                gap: 16px;
            }
            
            .step-line {
                display: none;
            }
            
            .footer-actions {
                flex-direction: column;
                gap: 16px;
            }
            
            .primary-actions {
                width: 100%;
                justify-content: space-between;
            }
        }
    </style>
</head>
<body>
    <!-- Include Standard Navbar -->
    <%- include('partials/navbar') %>

    <!-- Swap Matcher Main Content -->
    <main class="container-fluid py-4">
    <div class="dashboard-content">
    <!-- Swap Matcher Hero Section -->
    <section class="welcome-hero">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-8">
                    <h1 class="display-4 font-weight-bold mb-3">
                        <i class="bi bi-arrow-left-right"></i> Smart Book Swap Matcher
                    </h1>
                    <p class="lead mb-4">
                        Discover perfect matches for your books using our intelligent algorithm. 
                        Connect with readers in your area and expand your literary horizons.
                    </p>
                    <div class="d-flex flex-wrap gap-3">
                        <button class="btn-professional" onclick="quickMatchAll()">
                            <i class="bi bi-lightning-charge"></i> Quick Match All
                        </button>
                        <button class="btn-outline-professional" onclick="showMatchPreferences()">
                            <i class="bi bi-sliders"></i> Match Preferences
                        </button>
                    </div>
                </div>
                <div class="col-lg-4 text-center">
                    <div class="swap-stats">
                        <div class="row text-center">
                            <div class="col-6">
                                <h3 class="mb-1"><%= myPendingRequests || 0 %></h3>
                                <small>My Requests</small>
                            </div>
                            <div class="col-6">
                                <h3 class="mb-1"><%= incomingRequests || 0 %></h3>
                                <small>Incoming</small>
                            </div>
                        </div>
                        <hr class="bg-white my-3">
                        <div class="row text-center">
                            <div class="col-6">
                                <h3 class="mb-1"><%= activeSwaps || 0 %></h3>
                                <small>Active Swaps</small>
                            </div>
                            <div class="col-6">
                                <h3 class="mb-1"><%= userStats?.swapsCompleted || 0 %></h3>
                                <small>Completed</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Swap Navigation Tabs -->
    <div class="container">
        <div class="card-dark mb-4">
            <div class="card-body p-3">
            <ul class="nav nav-pills justify-content-center" id="swapTabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="find-matches-tab" data-toggle="pill" href="#find-matches" role="tab">
                        <i class="bi bi-search"></i> Find Matches
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="my-requests-tab" data-toggle="pill" href="#my-requests" role="tab">
                        <i class="bi bi-arrow-up-right"></i> My Requests 
                        <% if (myPendingRequests > 0) { %>
                            <span class="badge badge-warning ml-1"><%= myPendingRequests %></span>
                        <% } %>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="incoming-requests-tab" data-toggle="pill" href="#incoming-requests" role="tab">
                        <i class="bi bi-arrow-down-left"></i> Incoming Requests
                        <% if (incomingRequests > 0) { %>
                            <span class="badge badge-success ml-1"><%= incomingRequests %></span>
                        <% } %>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="active-swaps-tab" data-toggle="pill" href="#active-swaps" role="tab">
                        <i class="bi bi-hourglass-split"></i> Active Swaps
                        <% if (activeSwaps > 0) { %>
                            <span class="badge badge-info ml-1"><%= activeSwaps %></span>
                        <% } %>
                    </a>
                </li>
            </ul>
            </div>
        </div>

        <!-- Tab Content -->
        <div class="tab-content" id="swapTabsContent">
            <!-- Find Matches Tab -->
            <div class="tab-pane fade show active" id="find-matches" role="tabpanel">
                <!-- Available Books Discovery Section -->
                <div class="discovery-section mb-4">
                    <div class="card-dark">
                        <div class="card-header border-0">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h5 class="mb-1 text-white">
                                        <i class="bi bi-compass text-primary"></i> Discover Books to Swap
                                    </h5>
                                    <p class="text-muted mb-0">Find amazing books available for swap in your area</p>
                                </div>
                                <div class="discovery-controls">
                                    <!-- Global/Local Toggle -->
                                    <div class="location-toggle-wrapper mr-3">
                                        <div class="location-toggle">
                                            <button class="toggle-btn active" id="local-toggle" onclick="setLocationMode('local')">
                                                <i class="bi bi-geo-alt"></i> Local
                                            </button>
                                            <button class="toggle-btn" id="global-toggle" onclick="setLocationMode('global')">
                                                <i class="bi bi-globe"></i> Global
                                            </button>
                                        </div>
                                        <small class="location-mode-info text-muted">
                                            <span id="location-info">Showing books in your area • Swap available</span>
                                        </small>
                                    </div>
                                    <button class="btn-modern-outline btn-sm mr-2" onclick="showAdvancedFilters()">
                                        <i class="bi bi-funnel"></i> Filters
                                    </button>
                                    <button class="btn-modern btn-sm" onclick="refreshDiscovery()">
                                        <i class="bi bi-arrow-clockwise"></i> Refresh
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Advanced Filter Panel -->
                <div id="advanced-filters" class="filter-panel mb-4" style="display: none;">
                    <div class="card-dark">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3 mb-3">
                                    <label class="filter-label">Genre</label>
                                    <select id="genre-filter" class="form-control-modern">
                                        <option value="">All Genres</option>
                                        <option value="Fiction">Fiction</option>
                                        <option value="Science Fiction">Science Fiction</option>
                                        <option value="Romance">Romance</option>
                                        <option value="Mystery">Mystery</option>
                                        <option value="Fantasy">Fantasy</option>
                                        <option value="Biography">Biography</option>
                                        <option value="History">History</option>
                                        <option value="Non-Fiction">Non-Fiction</option>
                                        <option value="Thriller">Thriller</option>
                                        <option value="Self-Help">Self-Help</option>
                                    </select>
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label class="filter-label">Condition</label>
                                    <select id="condition-filter" class="form-control-modern">
                                        <option value="">All Conditions</option>
                                        <option value="New">New</option>
                                        <option value="Like New">Like New</option>
                                        <option value="Very Good">Very Good</option>
                                        <option value="Good">Good</option>
                                        <option value="Fair">Fair</option>
                                    </select>
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label class="filter-label">Sort by</label>
                                    <select id="sort-filter" class="form-control-modern">
                                        <option value="title">Title A-Z</option>
                                        <option value="author">Author A-Z</option>
                                        <option value="condition">Best Condition First</option>
                                        <option value="newest">Recently Added</option>
                                    </select>
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label class="filter-label">&nbsp;</label>
                                    <button id="clear-filters" class="btn-danger-outline form-control-modern" style="height: auto; padding: 10px 16px;">
                                        <i class="bi bi-x-circle"></i> Clear Filters
                                    </button>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-12">
                                    <div class="results-info">
                                        <span id="matches-count" class="matches-counter">Loading books...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Books Discovery Grid -->
                <div class="books-discovery-grid">
                    <div class="card-dark">
                        <div class="card-body p-4">
                            <div id="books-container">
                                <div class="loading-state">
                                    <div class="loading-spinner">
                                        <div class="spinner-border text-primary" role="status"></div>
                                    </div>
                                    <h6 class="mt-3">Discovering Amazing Books...</h6>
                                    <p class="text-muted">Finding the perfect books for you to swap</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- My Requests Tab -->
            <div class="tab-pane fade" id="my-requests" role="tabpanel">
                <div class="card-dark">
                    <div class="card-header">
                        <h5 class="mb-0 text-white">
                            <i class="bi bi-arrow-up-right text-primary"></i> Your Swap Requests
                        </h5>
                        <small class="text-muted">Track the status of your swap proposals</small>
                    </div>
                    <div class="card-body">
                        <% const myRequests = userSwaps?.filter(swap => (swap.requester._id || swap.requester).toString() === user._id.toString()); %>
                        <% if (myRequests && myRequests.length > 0) { %>
                            <% myRequests.forEach(swap => { %>
                                <div class="book-swap-item">
                                    <div class="row align-items-center">
                                        <div class="col-md-2">
                                            <img src="<%= swap.requestedBook ? (swap.requestedBook.coverImage || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                 alt="<%= swap.requestedBook ? swap.requestedBook.title : 'Book' %>" class="img-fluid rounded">
                                        </div>
                                        <div class="col-md-4">
                                            <h6 class="text-white">You want: <%= swap.requestedBook ? swap.requestedBook.title : 'Unknown Book' %></h6>
                                            <small class="text-muted">by <%= swap.requestedBook ? swap.requestedBook.author : 'Unknown Author' %></small>
                                            <br>
                                            <small class="text-info">From: <%= swap.owner ? (swap.owner.username || swap.owner.fullname) : 'Unknown User' %></small>
                                        </div>
                                        <div class="col-md-2 text-center">
                                            <i class="bi bi-arrow-left-right text-primary" style="font-size: 1.5rem;"></i>
                                        </div>
                                        <div class="col-md-2">
                                            <img src="<%= swap.offeredBook ? (swap.offeredBook.coverImage || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                 alt="<%= swap.offeredBook ? swap.offeredBook.title : 'Book' %>" class="img-fluid rounded">
                                        </div>
                                        <div class="col-md-2 text-right">
                                            <span class="swap-status-badge status-<%= swap.status.toLowerCase().replace(' ', '-') %>">
                                                <%= swap.status %>
                                            </span>
                                            <% if (swap.status === 'Pending') { %>
                                                <br>
                                                <button class="btn btn-sm btn-outline-danger mt-2" onclick="cancelSwapRequest('<%= swap._id %>')">
                                                    Cancel
                                                </button>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="empty-state">
                                <i class="bi bi-arrow-up-right"></i>
                                <h6>No Requests Sent</h6>
                                <p class="text-muted">You haven't made any swap requests yet. Start browsing to find great books!</p>
                                <button class="btn btn-gradient" onclick="$('#find-matches-tab').tab('show')">Find Books to Swap</button>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Incoming Requests Tab -->
            <div class="tab-pane fade" id="incoming-requests" role="tabpanel">
                <div class="card-dark">
                    <div class="card-header">
                        <h5 class="mb-0 text-white">
                            <i class="bi bi-arrow-down-left text-success"></i> Incoming Swap Requests
                        </h5>
                        <small class="text-muted">Review and respond to swap proposals from other readers</small>
                    </div>
                    <div class="card-body">
                        <% const incomingRequestsFiltered = userSwaps?.filter(swap => (swap.owner._id || swap.owner).toString() === user._id.toString() && swap.status === 'Pending'); %>
                        <% if (incomingRequestsFiltered && incomingRequestsFiltered.length > 0) { %>
                            <% incomingRequestsFiltered.forEach(swap => { %>
                                <div class="book-swap-item">
                                    <div class="row align-items-center">
                                        <div class="col-md-2">
                                            <img src="<%= swap.requestedBook ? (swap.requestedBook.coverImage || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                 alt="<%= swap.requestedBook ? swap.requestedBook.title : 'Book' %>" class="img-fluid rounded">
                                        </div>
                                        <div class="col-md-3">
                                            <h6 class="text-white">They want: <%= swap.requestedBook ? swap.requestedBook.title : 'Unknown Book' %></h6>
                                            <small class="text-muted">by <%= swap.requestedBook ? swap.requestedBook.author : 'Unknown Author' %></small>
                                            <br>
                                            <small class="text-success">Your book</small>
                                        </div>
                                        <div class="col-md-1 text-center">
                                            <i class="bi bi-arrow-left-right text-warning" style="font-size: 1.5rem;"></i>
                                        </div>
                                        <div class="col-md-2">
                                            <img src="<%= swap.offeredBook ? (swap.offeredBook.coverImage || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                 alt="<%= swap.offeredBook ? swap.offeredBook.title : 'Book' %>" class="img-fluid rounded">
                                        </div>
                                        <div class="col-md-2">
                                            <h6 class="text-white">They offer: <%= swap.offeredBook ? swap.offeredBook.title : 'Unknown Book' %></h6>
                                            <small class="text-muted">by <%= swap.offeredBook ? swap.offeredBook.author : 'Unknown Author' %></small>
                                            <br>
                                            <small class="text-info">From: <%= swap.requester ? (swap.requester.username || swap.requester.fullname) : 'Unknown User' %></small>
                                        </div>
                                        <div class="col-md-2 text-right">
                                            <button class="btn btn-success btn-sm mb-2 d-block" onclick="acceptSwapRequest('<%= swap._id %>')">
                                                <i class="bi bi-check"></i> Accept
                                            </button>
                                            <button class="btn btn-outline-danger btn-sm d-block" onclick="rejectSwapRequest('<%= swap._id %>')">
                                                <i class="bi bi-x"></i> Decline
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="empty-state">
                                <i class="bi bi-arrow-down-left"></i>
                                <h6>No Incoming Requests</h6>
                                <p class="text-muted">No one has requested your books yet. Make sure your library is visible to other readers!</p>
                                <a href="/library" class="btn btn-gradient">Manage My Library</a>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Active Swaps Tab -->
            <div class="tab-pane fade" id="active-swaps" role="tabpanel">
                <div class="card-dark">
                    <div class="card-header">
                        <h5 class="mb-0 text-white">
                            <i class="bi bi-hourglass-split text-warning"></i> Active Swaps
                        </h5>
                        <small class="text-muted">Confirm completion when you receive your books</small>
                    </div>
                    <div class="card-body">
                        <% const activeSwapsFiltered = userSwaps?.filter(swap => swap.status === 'Accepted' || swap.status === 'Pending Confirmation'); %>
                        <% if (activeSwapsFiltered && activeSwapsFiltered.length > 0) { %>
                            <% activeSwapsFiltered.forEach(swap => { %>
                                <div class="book-swap-item">
                                    <div class="row align-items-center">
                                        <div class="col-md-8">
                                            <div class="row">
                                                <div class="col-6">
                                                    <div class="d-flex align-items-center">
                                                        <img src="<%= swap.requestedBook ? (swap.requestedBook.coverImage || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                             alt="<%= swap.requestedBook ? swap.requestedBook.title : 'Book' %>" 
                                                             class="book-cover-small mr-3">
                                                        <div>
                                                            <h6 class="mb-1 text-white"><%= swap.requestedBook ? swap.requestedBook.title : 'Unknown Book' %></h6>
                                                            <small class="text-muted"><%= swap.requestedBook ? swap.requestedBook.author : 'Unknown Author' %></small>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-6">
                                                    <div class="d-flex align-items-center">
                                                        <img src="<%= swap.offeredBook ? (swap.offeredBook.coverImage || '/images/placeholder-book.jpg') : '/images/placeholder-book.jpg' %>" 
                                                             alt="<%= swap.offeredBook ? swap.offeredBook.title : 'Book' %>" 
                                                             class="book-cover-small mr-3">
                                                        <div>
                                                            <h6 class="mb-1 text-white"><%= swap.offeredBook ? swap.offeredBook.title : 'Unknown Book' %></h6>
                                                            <small class="text-muted"><%= swap.offeredBook ? swap.offeredBook.author : 'Unknown Author' %></small>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <hr class="bg-secondary">
                                            <div class="row">
                                                <div class="col-6">
                                                    <strong class="text-white">Partner:</strong> 
                                                    <span class="text-info">
                                                        <%= (swap.requester._id.toString() === user._id.toString()) ? (swap.owner.username || swap.owner.fullname) : (swap.requester.username || swap.requester.fullname) %>
                                                    </span>
                                                </div>
                                                <div class="col-6">
                                                    <strong class="text-white">Status:</strong> 
                                                    <span class="swap-status-badge status-<%= swap.status.toLowerCase().replace(' ', '-') %>">
                                                        <%= swap.status %>
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-4 text-right">
                                            <% if (swap.status === 'Accepted') { %>
                                                <button class="btn swap-action-btn btn-block mb-2" onclick="confirmSwapCompletion('<%= swap._id %>')">
                                                    <i class="bi bi-check-circle"></i> Confirm Received
                                                </button>
                                                <small class="text-muted">Both parties must confirm</small>
                                            <% } else if (swap.status === 'Pending Confirmation') { %>
                                                <div class="alert alert-info mb-0">
                                                    <i class="bi bi-hourglass"></i>
                                                    <small>Waiting for confirmation...</small>
                                                </div>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="empty-state">
                                <i class="bi bi-hourglass-split"></i>
                                <h6>No Active Swaps</h6>
                                <p class="text-muted">You don't have any active swaps at the moment. Start by finding books you'd like to read!</p>
                                <button class="btn btn-gradient" onclick="$('#find-matches-tab').tab('show')">Start Swapping</button>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</main>

<!-- Modern Swap Request Modal -->
<div class="modal fade" id="swapRequestModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content modal-modern">
            <div class="modal-header modal-header-modern">
                <div class="modal-title-section">
                    <h4 class="modal-title mb-1">
                        <i class="bi bi-arrow-left-right text-primary"></i> Complete Your Swap
                    </h4>
                    <p class="modal-subtitle">Choose a book from your library to offer in exchange</p>
                </div>
                <button type="button" class="btn-close-modern" data-dismiss="modal">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            
            <div class="modal-body modal-body-modern">
                <!-- Step Indicator -->
                <div class="swap-steps mb-4">
                    <div class="step-indicator">
                        <div class="step active" data-step="1">
                            <div class="step-number">1</div>
                            <div class="step-label">Select Your Book</div>
                        </div>
                        <div class="step-line"></div>
                        <div class="step" data-step="2">
                            <div class="step-number">2</div>
                            <div class="step-label">Review & Send</div>
                        </div>
                        <div class="step-line"></div>
                        <div class="step" data-step="3">
                            <div class="step-number">3</div>
                            <div class="step-label">Chat & Arrange</div>
                        </div>
                    </div>
                </div>

                <!-- Step 1: Book Selection -->
                <div id="step-1" class="swap-step active">
                    <div class="row">
                        <!-- Requested Book Display -->
                        <div class="col-lg-4">
                            <div class="book-display-card">
                                <div class="book-display-header">
                                    <h6><i class="bi bi-star text-warning"></i> You Want</h6>
                                </div>
                                <div id="requested-book-display" class="book-display-content">
                                    <!-- Will be populated by JavaScript -->
                                </div>
                            </div>
                        </div>

                        <!-- Your Library -->
                        <div class="col-lg-8">
                            <div class="library-selection-card">
                                <div class="library-header">
                                    <h6><i class="bi bi-book text-primary"></i> Choose from Your Library</h6>
                                    <p class="text-muted mb-0">Select a book to offer in exchange</p>
                                </div>
                                <div class="library-search mb-3">
                                    <div class="search-input-group">
                                        <i class="bi bi-search search-icon"></i>
                                        <input type="text" id="library-search" class="form-control-modern" placeholder="Search your books...">
                                    </div>
                                </div>
                                <div id="user-books-grid" class="user-books-grid">
                                    <% if (user.books && user.books.length > 0) { %>
                                        <% user.books.forEach(book => { %>
                                            <div class="user-book-card" data-book-id="<%= book._id %>" onclick="selectUserBook('<%= book._id %>')">
                                                <div class="book-cover-container">
                                                    <img src="<%= book.image || book.coverImage || '/images/placeholder-book.jpg' %>" 
                                                         alt="<%= book.title %>" class="book-cover-professional user-book-cover"
                                                         style="width: 100%; height: 120px; object-fit: cover; border-radius: 8px; box-shadow: 0 4px 15px rgba(0,0,0,0.3); transition: transform 0.3s ease;"
                                                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                                    <div class="user-book-cover" style="display: none; align-items: center; justify-content: center; height: 120px; background: linear-gradient(135deg, #3BB7FB, #667eea); border-radius: 8px;">
                                                        <i class="bi bi-book text-white" style="font-size: 1.5rem;"></i>
                                                    </div>
                                                </div>
                                                <div class="user-book-info">
                                                    <h6 class="book-title"><%= book.title %></h6>
                                                    <p class="book-author">by <%= book.author %></p>
                                                    <div class="book-meta">
                                                        <span class="genre-badge"><%= book.genre %></span>
                                                        <span class="condition-text"><%= book.condition || 'Good' %></span>
                                                    </div>
                                                </div>
                                                <div class="selection-indicator">
                                                    <i class="bi bi-check-circle"></i>
                                                </div>
                                            </div>
                                        <% }); %>
                                    <% } else { %>
                                        <div class="empty-library">
                                            <i class="bi bi-book"></i>
                                            <h6>No Books Available</h6>
                                            <p class="text-muted">Add books to your library to start swapping</p>
                                            <a href="/library" class="btn-modern">Add Books</a>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Step 2: Review & Message -->
                <div id="step-2" class="swap-step">
                    <div class="swap-preview-section">
                        <div class="row">
                            <div class="col-md-5">
                                <div class="swap-book-preview">
                                    <h6 class="preview-label">You're Offering</h6>
                                    <div id="selected-book-preview"></div>
                                </div>
                            </div>
                            <div class="col-md-2 text-center d-flex align-items-center justify-content-center">
                                <div class="swap-arrow">
                                    <i class="bi bi-arrow-left-right text-primary"></i>
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="swap-book-preview">
                                    <h6 class="preview-label">You're Getting</h6>
                                    <div id="target-book-preview"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="message-section mt-4">
                            <label class="form-label">Personal Message (Optional)</label>
                            <textarea id="swap-message" class="form-control-modern" rows="4" 
                                      placeholder="Introduce yourself and let them know why you're interested in this book..."></textarea>
                            <small class="text-muted">A friendly message increases your chances of a successful swap!</small>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer modal-footer-modern">
                <div class="footer-actions">
                    <button type="button" class="btn-outline-modern" data-dismiss="modal">Cancel</button>
                    
                    <div class="primary-actions">
                        <button type="button" id="chat-before-swap" class="btn-chat-modern" onclick="startChatConversation()" style="display: none;">
                            <i class="bi bi-chat-dots"></i> Chat First
                        </button>
                        
                        <button type="button" id="prev-step-btn" class="btn-outline-modern" onclick="previousStep()" style="display: none;">
                            <i class="bi bi-arrow-left"></i> Previous
                        </button>
                        
                        <button type="button" id="next-step-btn" class="btn-modern" onclick="nextStep()" disabled>
                            Next <i class="bi bi-arrow-right"></i>
                        </button>
                        
                        <button type="button" id="send-request-btn" class="btn-success-modern" onclick="submitSwapRequest()" style="display: none;">
                            <i class="bi bi-send"></i> Send Swap Request
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Match Preferences Modal -->
<div class="modal fade" id="matchPreferencesModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content card-dark">
            <div class="modal-header card-header">
                <h5 class="modal-title">
                    <i class="bi bi-sliders text-primary"></i> Match Preferences
                </h5>
                <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body card-body">
                <div class="form-group">
                    <div class="pref-section-title">Preferred Genres</div>
                    <div class="pref-hint">Pick a few genres you enjoy</div>
                    <div id="genre-chips" class="d-flex flex-wrap"></div>
                </div>
                <hr class="bg-secondary">
                <div class="form-group">
                    <div class="pref-section-title">Match Distance <span id="distanceValue" class="range-value"></span></div>
                    <input type="range" min="5" max="100" step="5" id="match-distance-range" class="pref-range">
                    <div class="pref-hint">Set maximum distance for matches</div>
                </div>
                <hr class="bg-secondary">
                <div class="form-group">
                    <div class="pref-section-title">Book Condition</div>
                    <div class="pref-btn-group" id="condition-group">
                        <button type="button" data-cond="Any" class="btn btn-outline-professional btn-sm">Any</button>
                        <button type="button" data-cond="Excellent" class="btn btn-outline-professional btn-sm">Excellent</button>
                        <button type="button" data-cond="Good" class="btn btn-outline-professional btn-sm">Good</button>
                        <button type="button" data-cond="Fair" class="btn btn-outline-professional btn-sm">Fair</button>
                    </div>
                </div>
            </div>
            <div class="modal-footer card-header" style="border-top:1px solid #2A2D35">
                <button type="button" class="btn btn-outline-professional" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-professional" onclick="saveMatchPreferences()">Save Preferences</button>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.bundle.min.js"></script>
<script>
// ========== MODERN SWAP MATCHER JAVASCRIPT ==========

let selectedUserBook = null;
let targetBook = null;
let targetBookData = null;
let currentStep = 1;
let allBooks = [];
let filteredBooks = [];
let discoveryState = { items: [], page: 1, pageSize: 12 };
let currentLocationMode = 'local'; // 'local' or 'global'
let userLocation = '<%= user.location || "" %>';

// Initialize the page
function initializeSwapMatcher() {
    console.log('🚀 Initializing Modern Swap Matcher');
    loadAllAvailableBooks();
    setupEventListeners();
}

// Load all available books for swapping
function loadAllAvailableBooks() {
    showBooksLoadingState();
    
    // Load all available books using the search endpoint
    $.get('/api/books/search', {
        limit: 100, // Get more books initially
        sortBy: 'createdAt'
    })
        .done(function(response) {
            console.log('📚 Available books loaded:', response);
            const books = response.books || response || [];
            displayAvailableBooks(books);
        })
        .fail(function(xhr) {
            console.error('❌ Failed to load books:', xhr);
            showBooksErrorState();
        });
}

// Show loading state for books
function showBooksLoadingState() {
    $('#books-container').html(`
        <div class="loading-state">
            <div class="loading-spinner">
                <div class="spinner-border text-primary" role="status"></div>
            </div>
            <h6 class="mt-3">Discovering Amazing Books...</h6>
            <p class="text-muted">Finding the perfect books for you to swap</p>
        </div>
    `);
}

// Show error state for books
function showBooksErrorState() {
    $('#books-container').html(`
        <div class="loading-state">
            <i class="bi bi-exclamation-triangle text-warning" style="font-size: 3rem; margin-bottom: 20px;"></i>
            <h6>Unable to Load Books</h6>
            <p class="text-muted">Please check your connection and try again</p>
            <button class="btn-modern" onclick="loadAllAvailableBooks()">
                <i class="bi bi-arrow-clockwise"></i> Retry
            </button>
        </div>
    `);
}

// Display available books in the discovery grid
function displayAvailableBooks(books) {
    allBooks = books;
    filteredBooks = [...books];
    
    // Apply initial location filter
    applyLocationFilter();
}

// Render the books grid
function renderBooksGrid() {
    const start = (discoveryState.page - 1) * discoveryState.pageSize;
    const end = start + discoveryState.pageSize;
    const pageBooks = filteredBooks.slice(start, end);
    
    if (pageBooks.length === 0) {
        $('#books-container').html(`
            <div class="loading-state">
                <i class="bi bi-search text-muted" style="font-size: 3rem; margin-bottom: 20px;"></i>
                <h6>No Books Found</h6>
                <p class="text-muted">Try adjusting your filters or check back later for new books</p>
            </div>
        `);
        return;
    }
    
    let html = '<div class="discovery-books-grid">';
    
    pageBooks.forEach(book => {
        const imageSrc = getBookImageSrc(book);
        const ownerName = book.owner?.username || book.owner?.fullname || 'Unknown User';
        
        html += `
            <div class="discovery-book-card" onclick="selectBookForSwap('${book._id}')">
                <img src="${imageSrc}" class="book-cover-professional discovery-book-cover" alt="${book.title}" 
                     style="width: 100%; height: 160px; object-fit: cover; border-radius: 10px; box-shadow: 0 6px 20px rgba(0,0,0,0.4); transition: transform 0.3s ease;"
                     onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                <div class="discovery-book-cover" style="display: none; align-items: center; justify-content: center; height: 160px; background: linear-gradient(135deg, #3BB7FB, #667eea); border-radius: 10px;">
                    <i class="bi bi-book text-white" style="font-size: 2rem;"></i>
                </div>
                <div class="discovery-book-info">
                    <h6 class="discovery-book-title">${book.title}</h6>
                    <p class="discovery-book-author">by ${book.author}</p>
                    <div class="discovery-book-meta">
                        <span class="discovery-genre-badge">${book.genre}</span>
                        <span class="discovery-condition">${book.condition || 'Good'}</span>
                    </div>
                    <p class="discovery-owner">
                        <i class="bi bi-person"></i> ${ownerName}
                    </p>
                    ${currentLocationMode === 'local' ? 
                        `<button class="discovery-swap-btn btn-primary" onclick="event.stopPropagation(); selectBookForSwap('${book._id}')">
                            <i class="bi bi-arrow-left-right"></i> Start Swap
                        </button>` :
                        `<button class="discovery-swap-btn btn-secondary" disabled>
                            <i class="bi bi-eye"></i> View Only
                        </button>`
                    }
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    html += renderBooksPagination();
    
    $('#books-container').html(html);
}

// Get book image source with fallback
function getBookImageSrc(book) {
    // Priority order: Google Books API image, custom image, cover image, fallback
    const hasImage = book.image || book.coverImage || book.imageUrl || book.coverUrl;
    let imageSrc = '/images/placeholder-book.jpg';
    
    if (hasImage) {
        if (hasImage.startsWith('http')) {
            // Google Books API URLs or other external images
            imageSrc = hasImage;
        } else if (hasImage.startsWith('/')) {
            // Local server images
            imageSrc = hasImage;
        } else {
            // Relative paths
            imageSrc = '/' + hasImage;
        }
    }
    
    return imageSrc;
}

// Render pagination for books
function renderBooksPagination() {
    const total = filteredBooks.length;
    const totalPages = Math.max(1, Math.ceil(total / discoveryState.pageSize));
    
    if (totalPages <= 1) return '';
    
    let html = '<div class="d-flex justify-content-center mt-4">';
    html += '<nav aria-label="Books pagination"><ul class="pagination pagination-custom">';
    
    const prevDisabled = discoveryState.page === 1 ? 'disabled' : '';
    const nextDisabled = discoveryState.page === totalPages ? 'disabled' : '';
    
    html += `<li class="page-item ${prevDisabled}">
                <a class="page-link" href="#" onclick="changeBooksPage(${discoveryState.page - 1}); return false;">
                    <i class="bi bi-chevron-left"></i> Prev
                </a>
             </li>`;
    
    for (let p = 1; p <= totalPages; p++) {
        const active = discoveryState.page === p ? 'active' : '';
        html += `<li class="page-item ${active}">
                    <a class="page-link" href="#" onclick="changeBooksPage(${p}); return false;">${p}</a>
                 </li>`;
    }
    
    html += `<li class="page-item ${nextDisabled}">
                <a class="page-link" href="#" onclick="changeBooksPage(${discoveryState.page + 1}); return false;">
                    Next <i class="bi bi-chevron-right"></i>
                </a>
             </li>`;
    
    html += '</ul></nav></div>';
    return html;
}

// Change books page
function changeBooksPage(page) {
    const totalPages = Math.max(1, Math.ceil(filteredBooks.length / discoveryState.pageSize));
    if (page < 1 || page > totalPages) return;
    
    discoveryState.page = page;
    renderBooksGrid();
}

// Select a book for swap (opens the modal)
function selectBookForSwap(bookId) {
    console.log('📖 Selected book for swap:', bookId);
    
    // Check if we're in global mode
    if (currentLocationMode === 'global') {
        showErrorMessage('Swapping is only available in Local mode. Switch to Local to swap books in your area.');
        return;
    }
    
    // Store the target book
    targetBook = bookId;
    
    // Get book details
    $.get(`/api/books/${bookId}`)
        .done(function(response) {
            targetBookData = response.book || response;
            console.log('📚 Target book data:', targetBookData);
            
            // Reset modal state
            currentStep = 1;
            selectedUserBook = null;
            
            // Show the swap modal
            showSwapModal();
        })
        .fail(function(xhr) {
            console.error('❌ Failed to load book details:', xhr);
            showErrorMessage('Failed to load book details. Please try again.');
        });
}

// Show the modern swap modal
function showSwapModal() {
    // Reset step state
    updateStepIndicator(1);
    showStep(1);
    
    // Display the requested book
    displayRequestedBook();
    
    // Reset user book selection
    $('.user-book-card').removeClass('selected');
    $('#next-step-btn').prop('disabled', true);
    
    // Show the modal
    $('#swapRequestModal').modal('show');
}

// Display the requested book in the modal
function displayRequestedBook() {
    if (!targetBookData) return;
    
    const imageSrc = getBookImageSrc(targetBookData);
    const ownerName = targetBookData.owner?.username || targetBookData.owner?.fullname || 'Unknown User';
    
    const bookHtml = `
        <div class="text-center">
            <img src="${imageSrc}" class="book-cover-professional img-fluid mb-3" 
                 alt="${targetBookData.title}" 
                 style="max-height: 180px; width: 100%; max-width: 140px; object-fit: cover; border-radius: 12px; box-shadow: 0 8px 25px rgba(0,0,0,0.3); transition: transform 0.3s ease;"
                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div style="display: none; align-items: center; justify-content: center; height: 180px; width: 100%; max-width: 140px; background: linear-gradient(135deg, #3BB7FB, #667eea); border-radius: 12px; margin: 0 auto 1rem; box-shadow: 0 8px 25px rgba(0,0,0,0.3);">
                <i class="bi bi-book text-white" style="font-size: 2rem;"></i>
            </div>
            <h5 class="text-white mb-2">${targetBookData.title}</h5>
            <p class="text-muted mb-2">by ${targetBookData.author}</p>
            <div class="d-flex justify-content-center gap-2 mb-2">
                <span class="badge badge-info">${targetBookData.genre}</span>
                <span class="badge badge-success">${targetBookData.condition || 'Good'}</span>
            </div>
            <small class="text-muted">
                <i class="bi bi-person"></i> Available from ${ownerName}
            </small>
        </div>
    `;
    
    $('#requested-book-display').html(bookHtml);
}

// Select user book in the modal
function selectUserBook(bookId) {
    selectedUserBook = bookId;
    
    // Update visual selection
    $('.user-book-card').removeClass('selected');
    $(`.user-book-card[data-book-id="${bookId}"]`).addClass('selected');
    
    // Enable next button
    $('#next-step-btn').prop('disabled', false);
    
    console.log('✅ Selected user book:', bookId);
}

function renderPagination() {
    const total = matchesState.items.length;
    const totalPages = Math.max(1, Math.ceil(total / matchesState.pageSize));
    if (totalPages <= 1) return '';
    let pager = '<div class="d-flex justify-content-center mt-4">';
    pager += `<nav aria-label="Matches pagination"><ul class="pagination pagination-custom">`;
    const prevDisabled = matchesState.page === 1 ? 'disabled' : '';
    const nextDisabled = matchesState.page === totalPages ? 'disabled' : '';
    pager += `<li class="page-item ${prevDisabled}"><a class="page-link" href="#" onclick="changeMatchesPage(${matchesState.page - 1}); return false;"><i class="bi bi-chevron-left"></i> Prev</a></li>`;
    for (let p = 1; p <= totalPages; p++) {
        const active = matchesState.page === p ? 'active' : '';
        pager += `<li class="page-item ${active}"><a class="page-link" href="#" onclick="changeMatchesPage(${p}); return false;">${p}</a></li>`;
    }
    pager += `<li class="page-item ${nextDisabled}"><a class="page-link" href="#" onclick="changeMatchesPage(${matchesState.page + 1}); return false;">Next <i class="bi bi-chevron-right"></i></a></li>`;
    pager += `</ul></nav>`;
    pager += '</div>';
    return pager;
}

function changeMatchesPage(p) {
    const totalPages = Math.max(1, Math.ceil(matchesState.items.length / matchesState.pageSize));
    if (p < 1 || p > totalPages) return;
    matchesState.page = p;
    renderMatchesPage();
}

// Step navigation functions
function nextStep() {
    if (currentStep === 1) {
        if (!selectedUserBook) {
            showErrorMessage('Please select a book from your library first');
            return;
        }
        
        // Load selected book data and move to step 2
        $.get(`/api/books/${selectedUserBook}`)
            .done(function(response) {
                const selectedBookData = response.book || response;
                displaySwapPreview(selectedBookData, targetBookData);
                
                currentStep = 2;
                updateStepIndicator(2);
                showStep(2);
            })
            .fail(function() {
                showErrorMessage('Failed to load book details');
            });
    }
}

function previousStep() {
    if (currentStep === 2) {
        currentStep = 1;
        updateStepIndicator(1);
        showStep(1);
    }
}

// Update step indicator
function updateStepIndicator(step) {
    $('.step').removeClass('active');
    $(`.step[data-step="${step}"]`).addClass('active');
}

// Show specific step
function showStep(step) {
    $('.swap-step').removeClass('active');
    $(`#step-${step}`).addClass('active');
    
    // Update button visibility
    $('#prev-step-btn').toggle(step > 1);
    $('#next-step-btn').toggle(step === 1);
    $('#send-request-btn').toggle(step === 2);
    $('#chat-before-swap').toggle(step === 2);
}

// Display swap preview in step 2
function displaySwapPreview(offeredBook, requestedBook) {
    const offeredImageSrc = getBookImageSrc(offeredBook);
    const requestedImageSrc = getBookImageSrc(requestedBook);
    
    $('#selected-book-preview').html(`
        <div class="text-center">
            <img src="${offeredImageSrc}" class="book-cover-professional img-fluid mb-3" 
                 alt="${offeredBook.title}"
                 style="max-height: 150px; width: 100%; max-width: 120px; object-fit: cover; border-radius: 12px; box-shadow: 0 6px 20px rgba(0,0,0,0.3); transition: transform 0.3s ease;"
                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div style="display: none; align-items: center; justify-content: center; height: 150px; width: 100%; max-width: 120px; background: linear-gradient(135deg, #3BB7FB, #667eea); border-radius: 12px; margin: 0 auto 1rem; box-shadow: 0 6px 20px rgba(0,0,0,0.3);">
                <i class="bi bi-book text-white" style="font-size: 1.5rem;"></i>
            </div>
            <h6 class="text-white mb-2">${offeredBook.title}</h6>
            <p class="text-muted mb-2">by ${offeredBook.author}</p>
            <div class="d-flex justify-content-center gap-2">
                <span class="badge badge-info">${offeredBook.genre}</span>
                <span class="badge badge-success">${offeredBook.condition || 'Good'}</span>
            </div>
        </div>
    `);
    
    $('#target-book-preview').html(`
        <div class="text-center">
            <img src="${requestedImageSrc}" class="book-cover-professional img-fluid mb-3" 
                 alt="${requestedBook.title}"
                 style="max-height: 150px; width: 100%; max-width: 120px; object-fit: cover; border-radius: 12px; box-shadow: 0 6px 20px rgba(0,0,0,0.3); transition: transform 0.3s ease;"
                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div style="display: none; align-items: center; justify-content: center; height: 150px; width: 100%; max-width: 120px; background: linear-gradient(135deg, #3BB7FB, #667eea); border-radius: 12px; margin: 0 auto 1rem; box-shadow: 0 6px 20px rgba(0,0,0,0.3);">
                <i class="bi bi-book text-white" style="font-size: 1.5rem;"></i>
            </div>
            <h6 class="text-white mb-2">${requestedBook.title}</h6>
            <p class="text-muted mb-2">by ${requestedBook.author}</p>
            <div class="d-flex justify-content-center gap-2">
                <span class="badge badge-info">${requestedBook.genre}</span>
                <span class="badge badge-success">${requestedBook.condition || 'Good'}</span>
            </div>
        </div>
    `);
}

// Filter and search functionality
function showAdvancedFilters() {
    $('#advanced-filters').slideToggle(300);
}

function applyFilters() {
    const genreFilter = $('#genre-filter').val();
    const conditionFilter = $('#condition-filter').val();
    const sortBy = $('#sort-filter').val();
    
    // Start with all books
    filteredBooks = [...allBooks];
    
    // Apply genre filter
    if (genreFilter) {
        filteredBooks = filteredBooks.filter(book => book.genre === genreFilter);
    }
    
    // Apply condition filter
    if (conditionFilter) {
        filteredBooks = filteredBooks.filter(book => book.condition === conditionFilter);
    }
    
    // Apply sorting
    switch (sortBy) {
        case 'title':
            filteredBooks.sort((a, b) => a.title.localeCompare(b.title));
            break;
        case 'author':
            filteredBooks.sort((a, b) => a.author.localeCompare(b.author));
            break;
        case 'condition':
            const conditionOrder = ['New', 'Like New', 'Very Good', 'Good', 'Fair'];
            filteredBooks.sort((a, b) => {
                const aIndex = conditionOrder.indexOf(a.condition || 'Good');
                const bIndex = conditionOrder.indexOf(b.condition || 'Good');
                return aIndex - bIndex;
            });
            break;
        case 'newest':
            filteredBooks.sort((a, b) => new Date(b.createdAt || 0) - new Date(a.createdAt || 0));
            break;
        default:
            filteredBooks.sort((a, b) => a.title.localeCompare(b.title));
            break;
    }
    
    // Reset page and re-render
    discoveryState.page = 1;
    updateBooksCount();
    renderBooksGrid();
}

function clearFilters() {
    $('#genre-filter').val('');
    $('#condition-filter').val('');
    $('#sort-filter').val('title');
    applyFilters();
}

function updateBooksCount() {
    const count = filteredBooks.length;
    const total = allBooks.length;
    $('#matches-count').text(`${count} of ${total} books available`);
}

function refreshDiscovery() {
    loadAllAvailableBooks();
}

// Location mode functions
function setLocationMode(mode) {
    console.log('📍 Setting location mode to:', mode);
    currentLocationMode = mode;
    
    // Update UI
    $('.toggle-btn').removeClass('active');
    $(`#${mode}-toggle`).addClass('active');
    
    // Update info text
    const infoText = mode === 'local' 
        ? 'Showing books in your area • Swap available' 
        : 'Browsing all books globally • View only';
    $('#location-info').text(infoText);
    
    // Apply location filtering
    applyLocationFilter();
}

function applyLocationFilter() {
    if (currentLocationMode === 'local') {
        // Filter books by user's location
        if (userLocation && userLocation.trim()) {
            filteredBooks = allBooks.filter(book => {
                if (!book.owner || !book.owner.location) return false;
                return book.owner.location.toLowerCase().includes(userLocation.toLowerCase());
            });
        } else {
            // If user has no location set, show all books but with warning
            filteredBooks = [...allBooks];
            console.warn('⚠️ User location not set, showing all books');
        }
        
        // Enable swap buttons for local mode
        $('.discovery-swap-btn').prop('disabled', false).text('Swap').removeClass('btn-secondary').addClass('btn-primary');
    } else {
        // Global mode - show all books but disable swap functionality
        filteredBooks = [...allBooks];
        
        // Disable swap buttons for global mode
        $('.discovery-swap-btn').prop('disabled', true).text('View Only').removeClass('btn-primary').addClass('btn-secondary');
    }
    
    // Re-apply other filters
    const currentGenre = $('#genre-filter').val();
    const currentCondition = $('#condition-filter').val();
    
    if (currentGenre) {
        filteredBooks = filteredBooks.filter(book => book.genre === currentGenre);
    }
    
    if (currentCondition) {
        filteredBooks = filteredBooks.filter(book => book.condition === currentCondition);
    }
    
    // Update display
    updateBooksCount();
    renderBooksGrid();
}

// Setup event listeners
function setupEventListeners() {
    // Filter change events
    $('#genre-filter, #condition-filter, #sort-filter').on('change', applyFilters);
    $('#clear-filters').on('click', clearFilters);
    
    // Library search
    $('#library-search').on('input', function() {
        const searchTerm = $(this).val().toLowerCase();
        $('.user-book-card').each(function() {
            const title = $(this).find('.book-title').text().toLowerCase();
            const author = $(this).find('.book-author').text().toLowerCase();
            const isVisible = title.includes(searchTerm) || author.includes(searchTerm);
            $(this).toggle(isVisible);
        });
    });
}

// Start chat conversation before sending swap request
function startChatConversation() {
    if (!targetBookData || !targetBookData.owner) {
        showErrorMessage('Unable to find book owner information');
        return;
    }
    
    console.log('💬 Starting chat conversation with book owner');
    
    // Close the swap modal first
    $('#swapRequestModal').modal('hide');
    
    // Get owner information
    const ownerUserId = targetBookData.owner._id || targetBookData.owner.id;
    const ownerUsername = targetBookData.owner.username || targetBookData.owner.fullname || targetBookData.owner.email || 'Book Owner';
    
    // First try to use the real-time chat system from navbar
    if (window.realTimeChat) {
        try {
            // Expand chat widget if minimized
            const chatWidget = document.getElementById('real-chat-widget');
            if (chatWidget && chatWidget.classList.contains('minimized')) {
                chatWidget.classList.remove('minimized');
            }
            
            // Start the chat
            window.realTimeChat.startChat(ownerUserId, ownerUsername);
            
            showSuccessMessage('Chat started! You can now discuss the book swap.');
            return;
            
        } catch (error) {
            console.error('❌ Real-time chat failed:', error);
        }
    }
    
    // Fallback: Use the navbar chat system directly
    if (typeof openUserChat === 'function') {
        try {
            openUserChat(ownerUserId, ownerUsername);
            showSuccessMessage('Chat opened! You can now discuss the book swap.');
            return;
        } catch (error) {
            console.error('❌ Navbar chat failed:', error);
        }
    }
    
    // Final fallback: Show the built-in chat modal with book context
    try {
        $('#chat-title').text(`Chat with ${ownerUsername}`);
        $('#chat-swap-summary').html(`
            <div class="d-flex align-items-center">
                <img src="${getBookImageSrc(targetBookData)}" style="width: 40px; height: 40px; object-fit: cover; border-radius: 8px;" class="me-3">
                <div>
                    <h6 class="mb-1">About: ${targetBookData.title}</h6>
                    <small class="text-muted">by ${targetBookData.author}</small>
                </div>
            </div>
        `);
        $('#chat-messages').html(`
            <div class="text-center text-muted py-4">
                <i class="bi bi-chat-dots text-primary" style="font-size: 2rem;"></i>
                <h6 class="mt-2">Start Your Conversation</h6>
                <p>Discuss the book swap with ${ownerUsername}</p>
            </div>
        `);
        $('#chatModal').modal('show');
        
        // Focus on input
        setTimeout(() => {
            $('#chat-message-input').focus();
        }, 500);
        
        showSuccessMessage('Chat opened! Start the conversation below.');
        
    } catch (error) {
        console.error('❌ All chat methods failed:', error);
        showErrorMessage('Chat system temporarily unavailable. Please try sending a swap request with a message instead.');
    }
}

// Submit swap request
function submitSwapRequest() {
    if (!selectedUserBook || !targetBook) {
        showErrorMessage('Please complete all steps before sending the request');
        return;
    }
    
    const message = $('#swap-message').val();
    const sendButton = $('#send-request-btn');
    
    // Show loading state
    sendButton.prop('disabled', true).html('<div class="spinner-border spinner-border-sm me-2"></div>Sending...');
    
    $.post('/api/swaps', {
        offeredBookId: selectedUserBook,
        requestedBookId: targetBook,
        message: message
    })
    .done(function(response) {
        console.log('✅ Swap request sent successfully:', response);
        $('#swapRequestModal').modal('hide');
        
        // Show success message with animation
        showSuccessMessage('🎉 Swap request sent successfully! You can send additional requests with the same book to other people. If one request is accepted, all others will be automatically cancelled.');
        
        // Refresh the page to update the UI
        setTimeout(() => {
            location.reload();
        }, 2000);
    })
    .fail(function(xhr) {
        console.error('❌ Failed to send swap request:', xhr);
        const errorMessage = xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
        showErrorMessage('Failed to send swap request: ' + errorMessage);
    })
    .always(function() {
        // Reset button state
        sendButton.prop('disabled', false).html('<i class="bi bi-send"></i> Send Swap Request');
    });
}

// Utility functions for success/error messages
function showSuccessMessage(message) {
    // Create a modern toast notification
    const toast = $(`
        <div class="success-toast">
            <div class="toast-content">
                <i class="bi bi-check-circle-fill text-success"></i>
                <span>${message}</span>
            </div>
        </div>
    `);
    
    // Add toast styles if not already added
    if (!$('#toast-styles').length) {
        $('head').append(`
            <style id="toast-styles">
                .success-toast, .error-toast {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: #1E1E1E;
                    border: 1px solid #28A745;
                    border-left: 4px solid #28A745;
                    border-radius: 12px;
                    padding: 16px 20px;
                    z-index: 10000;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                    transform: translateX(400px);
                    transition: all 0.4s ease;
                    max-width: 400px;
                }
                .error-toast {
                    border-color: #DC3545;
                    border-left-color: #DC3545;
                }
                .toast-content {
                    display: flex;
                    align-items: center;
                    gap: 12px;
                    color: white;
                    font-weight: 500;
                }
                .success-toast.show, .error-toast.show {
                    transform: translateX(0);
                }
            </style>
        `);
    }
    
    $('body').append(toast);
    
    // Animate in
    setTimeout(() => toast.addClass('show'), 100);
    
    // Remove after delay
    setTimeout(() => {
        toast.removeClass('show');
        setTimeout(() => toast.remove(), 400);
    }, 4000);
}

function showErrorMessage(message) {
    // Create error toast
    const toast = $(`
        <div class="error-toast">
            <div class="toast-content">
                <i class="bi bi-exclamation-triangle-fill text-danger"></i>
                <span>${message}</span>
            </div>
        </div>
    `);
    
    $('body').append(toast);
    
    // Animate in
    setTimeout(() => toast.addClass('show'), 100);
    
    // Remove after delay
    setTimeout(() => {
        toast.removeClass('show');
        setTimeout(() => toast.remove(), 400);
    }, 5000);
}

// Real-time chat integration function
function openSimpleChat() {
    console.log('🔵 openSimpleChat called');
    console.log('📚 selectedUserBook:', selectedUserBook);
    console.log('📖 targetBook:', targetBook);
    
    if (!selectedUserBook || !targetBook) {
        console.error('❌ Missing book selection');
        showErrorMessage('Please select books for the swap first');
        return;
    }
    
    console.log('🔄 Loading book information...');
    // Get book information for the chat
    Promise.all([
        $.get(`/api/books/${selectedUserBook}`),
        $.get(`/api/books/${targetBook}`)
    ]).then(([offeredBookData, requestedBookData]) => {
        console.log('📋 Book data loaded:', { offeredBookData, requestedBookData });
        const offeredBook = offeredBookData.book || offeredBookData;
        const requestedBook = requestedBookData.book || requestedBookData;
        
        // Hide the swap modal
        $('#swapRequestModal').modal('hide');
        
        // Get the book owner's user ID and username
        const ownerUserId = requestedBook.owner?._id || requestedBook.owner?.id;
        const ownerUsername = requestedBook.owner?.username || requestedBook.owner?.fullname || requestedBook.owner?.name || 'Book Owner';
        
        if (!ownerUserId) {
            console.error('❌ Missing owner user ID');
            showErrorMessage('Unable to find book owner information');
            return;
        }
        
        console.log('📋 Starting direct chat with owner:', ownerUserId, ownerUsername);
        console.log('🔧 realTimeChat available:', !!window.realTimeChat);
        
        // Use the real-time chat widget to create and open the conversation directly
        if (window.realTimeChat) {
            try {
                // Expand the chat widget if minimized
                const chatWidget = document.getElementById('real-chat-widget');
                if (chatWidget && chatWidget.classList.contains('minimized')) {
                    chatWidget.classList.remove('minimized');
                }
                
                // Start chat with the book owner directly
                window.realTimeChat.startChat(ownerUserId, ownerUsername);
                
                console.log('✅ Direct chat opened with', ownerUsername);
                
            } catch (error) {
                console.error('❌ Failed to start chat:', error);
                showErrorMessage('Failed to start chat conversation. Please try again.');
            }
        } else {
            console.error('❌ Real-time chat widget not available');
            showErrorMessage('Chat system not available. Please refresh the page.');
        }
        
    }).catch((error) => {
        console.error('❌ Failed to load book information:', error);
        showErrorMessage('Failed to load book information for chat');
    });
}

// Test chat system function
function testChatSystem() {
    console.log('🧪 Testing chat system...');
    console.log('📊 Chat system status:');
    console.log('  - realTimeChat available:', !!window.realTimeChat);
    console.log('  - Socket available:', !!window.io);
    console.log('  - jQuery available:', !!window.$);
    
    if (window.realTimeChat) {
        console.log('  - Chat widget:', document.getElementById('real-chat-widget'));
        console.log('  - Current room:', window.realTimeChat.currentRoom);
        console.log('  - Current user:', window.realTimeChat.currentUser);
        
        // Test API endpoint
        $.get('/api/chat/rooms')
            .done(function(response) {
                console.log('✅ Chat API working:', response);
            })
            .fail(function(xhr, status, error) {
                console.error('❌ Chat API failed:', { status, error, response: xhr.responseText });
            });
    } else {
        console.error('❌ realTimeChat not available - check if realTimeChat.js is loaded');
    }
    
    // Check if books are selected
    console.log('📚 Book selection status:');
    console.log('  - selectedUserBook:', selectedUserBook);
    console.log('  - targetBook:', targetBook);
    
    alert('Check console for chat system debug info');
}

// Test authentication function
function testAuth() {
    console.log('🔐 Testing authentication...');
    $.get('/api/users/profile')
        .done(function(response) {
            console.log('✅ Auth test success:', response);
        })
        .fail(function(xhr) {
            console.error('❌ Auth test failed:', {
                status: xhr.status,
                response: xhr.responseJSON,
                responseText: xhr.responseText
            });
        });
}

// Legacy functions for compatibility (some might be referenced elsewhere)
function quickMatchAll() {
    showSuccessMessage('🔍 Smart discovery is already active! All available books are shown above.');
}

function showMatchPreferences() {
    // Toggle the advanced filters instead
    showAdvancedFilters();
}

function loadMatchPreferences() {
    // Legacy compatibility - no longer needed with new design
    return { genres: [], distance: 10, condition: 'Any' };
}

// Legacy function for old modal system - redirect to new flow
function proposeSwap(bookId, ownerId) {
    selectBookForSwap(bookId);
}

// Accept swap request
function acceptSwapRequest(swapId) {
    if (confirm('Accept this swap request?')) {
        $.ajax({
            url: `/api/swaps/${swapId}/accept`,
            method: 'PUT'
        })
        .done(function() {
            showSuccessMessage('Swap request accepted!');
            setTimeout(() => location.reload(), 1500);
        })
        .fail(function(xhr) {
            showErrorMessage('Failed to accept swap: ' + (xhr.responseJSON?.message || 'Unknown error'));
        });
    }
}

// Reject swap request
function rejectSwapRequest(swapId) {
    if (confirm('Reject this swap request?')) {
        $.ajax({
            url: `/api/swaps/${swapId}/reject`,
            method: 'PUT'
        })
        .done(function() {
            showSuccessMessage('Swap request rejected');
            setTimeout(() => location.reload(), 1500);
        })
        .fail(function(xhr) {
            showErrorMessage('Failed to reject swap: ' + (xhr.responseJSON?.message || 'Unknown error'));
        });
    }
}

// Cancel swap request
function cancelSwapRequest(swapId) {
    if (confirm('Cancel this swap request?')) {
        $.ajax({
            url: `/api/swaps/${swapId}`,
            method: 'DELETE'
        })
        .done(function() {
            showSuccessMessage('Swap request cancelled');
            setTimeout(() => location.reload(), 1500);
        })
        .fail(function(xhr) {
            showErrorMessage('Failed to cancel swap: ' + (xhr.responseJSON?.message || 'Unknown error'));
        });
    }
}

// Confirm swap completion
function confirmSwapCompletion(swapId) {
    if (confirm('Have you received the book and want to confirm completion?')) {
        $.post(`/api/swaps/${swapId}/confirm`)
            .done(function(response) {
                if (response.completed) {
                    showSuccessMessage('Swap completed! You earned 10 reward points!');
                } else {
                    showSuccessMessage('Completion confirmed! Waiting for other party.');
                }
                setTimeout(() => location.reload(), 2000);
            })
            .fail(function(xhr) {
                showErrorMessage('Failed to confirm completion: ' + (xhr.responseJSON?.message || 'Unknown error'));
            });
    }
}

// Utility functions for messages
function showSuccessMessage(message) {
    // Simple alert for now - could be enhanced with toast notifications
    alert('✅ ' + message);
}

function showErrorMessage(message) {
    // Simple alert for now - could be enhanced with toast notifications
    alert('❌ ' + message);
}

// Initialize when document is ready
$(document).ready(function() {
    console.log('🚀 Modern Swap Matcher - Page Ready');
    console.log('jQuery version:', $.fn.jquery);
    
    // Initialize the swap matcher
    initializeSwapMatcher();
    
    // Initialize tooltips
    $('[data-toggle="tooltip"]').tooltip();
    
    // Modal event handlers
    $('#swapRequestModal').on('hidden.bs.modal', function() {
        // Reset modal state when closed
        currentStep = 1;
        selectedUserBook = null;
        targetBook = null;
        targetBookData = null;
        $('.user-book-card').removeClass('selected');
        $('#swap-message').val('');
    });
    
    // Debug: Test authentication
    console.log('🔐 Testing user authentication...');
    $.get('/api/users/profile')
        .done(function(data) {
            console.log('✅ User authenticated:', data);
        })
        .fail(function(xhr) {
            console.error('❌ Authentication failed:', xhr.status, xhr.responseText);
            if (xhr.status === 401) {
                console.log('🚨 User not logged in - redirecting to login');
                window.location.href = '/login';
            }
        });
});

// Chat functionality
let currentChatSwapId = null;

function openChat(swapId) {
    currentChatSwapId = swapId;
    loadChat(swapId);
}

function loadChat(swapId) {
    $('#chat-messages').html('<div class="text-center"><div class="spinner-border spinner-border-sm text-primary"></div> Loading chat...</div>');
    $('#chatModal').modal('show');
    
    $.get(`/api/chat/swap/${swapId}`)
        .done(function(data) {
            displayChat(data.chat, data.swap);
        })
        .fail(function(xhr) {
            $('#chat-messages').html('<div class="text-center text-danger">Failed to load chat</div>');
        });
}

function displayChat(chat, swap) {
    // Update modal title
    $('#chat-title').text(`Chat - ${swap.requestedBook.title}`);
    
    // Display swap summary
    $('#chat-swap-summary').html(`
        <div class="row">
            <div class="col-6">
                <small class="text-muted">You're offering:</small>
                <div class="font-weight-bold">${swap.offeredBook ? swap.offeredBook.title : 'Unknown Book'}</div>
            </div>
            <div class="col-6">
                <small class="text-muted">Requesting:</small>
                <div class="font-weight-bold">${swap.requestedBook ? swap.requestedBook.title : 'Unknown Book'}</div>
            </div>
        </div>
    `);
    
    // Display messages
    let messagesHtml = '';
    if (chat.messages.length === 0) {
        messagesHtml = '<div class="text-center text-muted"><i class="bi bi-chat-dots"></i> No messages yet. Start the conversation!</div>';
    } else {
        chat.messages.forEach(message => {
            const isOwn = message.sender._id === '<%= user._id %>';
            const time = new Date(message.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
            
            messagesHtml += `
                <div class="message ${isOwn ? 'own-message' : 'other-message'} mb-3">
                    <div class="message-header">
                        <small class="text-muted">${isOwn ? 'You' : (message.sender.fullname || message.sender.username)} • ${time}</small>
                    </div>
                    <div class="message-content">${escapeHtml(message.content)}</div>
                </div>
            `;
        });
    }
    
    $('#chat-messages').html(messagesHtml);
    scrollToBottom();
}

function sendMessage() {
    const content = $('#chat-input').val().trim();
    if (!content || !currentChatSwapId) return;
    
    $('#send-message-btn').prop('disabled', true);
    
    $.post(`/api/chat/swap/${currentChatSwapId}/message`, { content })
        .done(function(data) {
            $('#chat-input').val('');
            loadChat(currentChatSwapId); // Reload chat to show new message
        })
        .fail(function(xhr) {
            alert('Failed to send message');
        })
        .always(function() {
            $('#send-message-btn').prop('disabled', false);
        });
}

function scrollToBottom() {
    $('#chat-messages').scrollTop($('#chat-messages')[0].scrollHeight);
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Enter key to send message
$(document).on('keypress', '#chat-input', function(e) {
    if (e.which === 13 && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
    }
});
</script>

<!-- Chat Modal -->
<div class="modal fade" id="chatModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-secondary">
                <h5 class="modal-title">
                    <i class="bi bi-chat-dots text-primary"></i> 
                    <span id="chat-title">Chat</span>
                </h5>
                <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body p-0">
                <!-- Swap Summary -->
                <div id="chat-swap-summary" class="p-3 bg-secondary border-bottom"></div>
                
                <!-- Messages Container -->
                <div id="chat-messages" class="p-3" style="height: 400px; overflow-y: auto; background: #1a1a1a;">
                    <div class="text-center text-muted">
                        <div class="spinner-border spinner-border-sm text-primary"></div>
                        Loading chat...
                    </div>
                </div>
                
                <!-- Message Input -->
                <div class="p-3 border-top border-secondary">
                    <div class="message-input-container">
                        <div class="message-input-wrapper">
                            <button class="attach-btn">
                                <i class="bi bi-paperclip"></i>
                            </button>
                            <div class="message-input-field">
                                <input type="text" id="chat-input" placeholder="Type your message..." autocomplete="off" maxlength="1000">
                                <button class="emoji-btn">
                                    <i class="bi bi-emoji-smile"></i>
                                </button>
                            </div>
                            <button id="send-message-btn" class="send-btn" type="button" onclick="sendMessage()">
                                <i class="bi bi-send"></i>
                            </button>
                        </div>
                    </div>
                    <small class="text-muted">Press Enter to send</small>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.message {
    max-width: 80%;
}

.own-message {
    margin-left: auto;
    text-align: right;
}

.own-message .message-content {
    background: #3BB7FB;
    color: white;
    padding: 8px 12px;
    border-radius: 18px 18px 4px 18px;
    display: inline-block;
}

.other-message .message-content {
    background: #333;
    color: white;
    padding: 8px 12px;
    border-radius: 18px 18px 18px 4px;
    display: inline-block;
}

.message-header {
    margin-bottom: 4px;
}

#chat-messages {
    scrollbar-width: thin;
    scrollbar-color: #666 #1a1a1a;
}

#chat-messages::-webkit-scrollbar {
    width: 6px;
}

#chat-messages::-webkit-scrollbar-track {
    background: #1a1a1a;
}

#chat-messages::-webkit-scrollbar-thumb {
    background: #666;
    border-radius: 3px;
}
</style>

<!-- Chat Modal -->
<div class="modal fade" id="chatModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-secondary">
                <h5 class="modal-title">
                    <i class="bi bi-chat-dots text-primary"></i> 
                    <span id="chat-title">Chat</span>
                </h5>
                <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body p-0">
                <!-- Swap Summary -->
                <div id="chat-swap-summary" class="p-3 bg-secondary border-bottom"></div>
                
                <!-- Messages Container -->
                <div id="chat-messages" class="p-3" style="height: 400px; overflow-y: auto; background: #1a1a1a;">
                    <div class="text-center text-muted">
                        <div class="spinner-border spinner-border-sm me-2"></div>
                        Loading chat...
                    </div>
                </div>
                
                <!-- Message Input -->
                <div class="p-3 border-top border-secondary">
                    <div class="message-input-container">
                        <div class="message-input-wrapper">
                            <button class="attach-btn">
                                <i class="bi bi-paperclip"></i>
                            </button>
                            <div class="message-input-field">
                                <input type="text" id="chat-message-input" placeholder="Type your message..." autocomplete="off" maxlength="1000">
                                <button class="emoji-btn">
                                    <i class="bi bi-emoji-smile"></i>
                                </button>
                            </div>
                            <button id="send-message-btn" class="send-btn" type="button">
                                <i class="bi bi-send"></i>
                            </button>
                        </div>
                    </div>
                    <small class="text-muted">Press Enter to send</small>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Chat functionality
let currentChat = null;
let currentSwapId = null;

function openChat(swapId) {
    currentSwapId = swapId;
    $('#chatModal').modal('show');
    loadChat(swapId);
}

function loadChat(swapId) {
    $('#chat-messages').html(`
        <div class="text-center text-muted">
            <div class="spinner-border spinner-border-sm me-2"></div>
            Loading chat...
        </div>
    `);
    
    $.get(`/api/chat/swap/${swapId}`)
        .done(function(data) {
            currentChat = data.chat;
            displaySwapSummary(data.swap);
            displayMessages(data.chat.messages);
            scrollToBottom();
        })
        .fail(function(xhr) {
            $('#chat-messages').html(`
                <div class="text-center text-danger">
                    <i class="bi bi-exclamation-triangle"></i>
                    Failed to load chat: ${xhr.responseJSON?.message || 'Unknown error'}
                </div>
            `);
        });
}

function displaySwapSummary(swap) {
    $('#chat-swap-summary').html(`
        <div class="row">
            <div class="col-6">
                <h6 class="text-info mb-1">Your Book</h6>
                <small><strong>${swap.offeredBook ? swap.offeredBook.title : 'Unknown Book'}</strong> by ${swap.offeredBook ? swap.offeredBook.author : 'Unknown Author'}</small>
            </div>
            <div class="col-6">
                <h6 class="text-warning mb-1">Requested Book</h6>
                <small><strong>${swap.requestedBook ? swap.requestedBook.title : 'Unknown Book'}</strong> by ${swap.requestedBook ? swap.requestedBook.author : 'Unknown Author'}</small>
            </div>
        </div>
        <div class="mt-2">
            <span class="badge badge-${getStatusColor(swap.status)}">${swap.status}</span>
        </div>
    `);
    
    $('#chat-title').text(`Chat - ${swap.requestedBook.title}`);
}

function displayMessages(messages) {
    if (messages.length === 0) {
        $('#chat-messages').html(`
            <div class="text-center text-muted">
                <i class="bi bi-chat"></i>
                <p class="mt-2">No messages yet. Start the conversation!</p>
            </div>
        `);
        return;
    }
    
    const currentUserId = '<%= user._id %>';
    let html = '';
    
    messages.forEach(message => {
        const isOwn = message.sender._id === currentUserId;
        const time = new Date(message.timestamp).toLocaleTimeString();
        
        html += `
            <div class="mb-3 ${isOwn ? 'text-right' : 'text-left'}">
                <div class="d-inline-block max-width-70 ${isOwn ? 'bg-primary' : 'bg-secondary'} p-2 rounded">
                    <div class="message-content">${escapeHtml(message.content)}</div>
                    <small class="text-muted d-block mt-1" style="font-size: 0.7rem;">
                        ${isOwn ? 'You' : message.sender.username || message.sender.fullname} • ${time}
                    </small>
                </div>
            </div>
        `;
    });
    
    $('#chat-messages').html(html);
}

function sendMessage() {
    const input = $('#chat-message-input');
    const content = input.val().trim();
    
    if (!content || !currentSwapId) return;
    
    const sendBtn = $('#send-message-btn');
    sendBtn.prop('disabled', true).html('<div class="spinner-border spinner-border-sm"></div>');
    
    $.post(`/api/chat/swap/${currentSwapId}/message`, { content })
        .done(function(data) {
            input.val('');
            loadChat(currentSwapId); // Reload to show new message
        })
        .fail(function(xhr) {
            alert('Failed to send message: ' + (xhr.responseJSON?.message || 'Unknown error'));
        })
        .always(function() {
            sendBtn.prop('disabled', false).html('<i class="bi bi-send"></i> Send');
        });
}

function scrollToBottom() {
    const container = $('#chat-messages');
    container.scrollTop(container[0].scrollHeight);
}

function getStatusColor(status) {
    switch(status) {
        case 'pending': return 'warning';
        case 'accepted': return 'success';
        case 'rejected': return 'danger';
        case 'completed': return 'info';
        default: return 'secondary';
    }
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Event listeners
$(document).ready(function() {
    $('#send-message-btn').click(sendMessage);
    
    $('#chat-message-input').keypress(function(e) {
        if (e.which === 13) { // Enter key
            sendMessage();
        }
    });
    
    // Add max-width class for chat messages
    $('<style>').text(`
        .max-width-70 { max-width: 70% !important; }
        #chat-messages { 
            scrollbar-width: thin;
            scrollbar-color: #666 #2a2a2a;
        }
        #chat-messages::-webkit-scrollbar {
            width: 6px;
        }
        #chat-messages::-webkit-scrollbar-track {
            background: #2a2a2a;
        }
        #chat-messages::-webkit-scrollbar-thumb {
            background: #666;
            border-radius: 3px;
        }
    `).appendTo('head');
});

// LinkedIn-style Chat System
let currentChatId = null;
let currentChatData = null;

function showLinkedInChat(chatData) {
    currentChatData = chatData;
    
    // Create chat HTML if it doesn't exist
    if ($('#linkedin-chat').length === 0) {
        const chatHTML = `
            <div id="linkedin-chat" class="linkedin-chat">
                <div class="chat-header">
                    <div class="chat-info">
                        <div class="chat-avatar">
                            <i class="fas fa-user"></i>
                        </div>
                        <div class="chat-details">
                            <h6 class="chat-name">${chatData.user2}</h6>
                            <small class="chat-subtitle">Book Swap Chat</small>
                        </div>
                    </div>
                    <div class="chat-controls">
                        <button class="btn-minimize" onclick="minimizeChat()">
                            <i class="fas fa-minus"></i>
                        </button>
                        <button class="btn-close" onclick="closeChat()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                
                <div class="chat-body">
                    <div class="swap-context">
                        <div class="swap-info">
                            <small><strong>Your book:</strong> "${chatData.offeredBook}"</small>
                            <i class="fas fa-exchange-alt"></i>
                            <small><strong>Their book:</strong> "${chatData.requestedBook}"</small>
                        </div>
                    </div>
                    
                    <div class="chat-messages" id="chat-messages">
                        <div class="system-message">
                            💬 Chat started! Discuss your book swap here.
                        </div>
                    </div>
                </div>
                
                <div class="chat-footer">
                    <div class="message-input-container">
                        <input type="text" id="chat-input" placeholder="Type a message..." maxlength="500">
                        <button id="send-btn" onclick="sendChatMessage()" disabled>
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        $('body').append(chatHTML);
    } else {
        // Update existing chat with new data
        $('.chat-name').text(chatData.user2);
        $('.swap-info').html(`
            <small><strong>Your book:</strong> "${chatData.offeredBook}"</small>
            <i class="fas fa-exchange-alt"></i>
            <small><strong>Their book:</strong> "${chatData.requestedBook}"</small>
        `);
        $('#chat-messages').html(`
            <div class="system-message">
                💬 Chat started! Discuss your book swap here.
            </div>
        `);
    }
    
    // Show the chat
    $('#linkedin-chat').addClass('show');
    
    // Create the chat on the server
    createLinkedInChat(chatData);
    
    // Focus on input
    setTimeout(() => {
        $('#chat-input').focus();
    }, 300);
}

function createLinkedInChat(chatData) {
    $.post('/api/simple-chat/create', {
        user1: chatData.user1,
        user2: chatData.user2,
        offeredBook: chatData.offeredBook,
        requestedBook: chatData.requestedBook
    })
    .done(function(response) {
        currentChatId = response.chatId;
        console.log('Chat created:', currentChatId);
        
        // Enable input
        $('#chat-input').prop('disabled', false);
        $('#send-btn').prop('disabled', false);
        
        // Load existing messages
        loadChatMessages();
    })
    .fail(function(xhr) {
        console.error('Failed to create chat:', xhr);
        addSystemMessage('❌ Failed to create chat. Please try again.');
    });
}

function loadChatMessages() {
    if (!currentChatId) return;
    
    $.get(`/api/simple-chat/${currentChatId}/messages`)
    .done(function(response) {
        const messages = response.messages || [];
        $('#chat-messages').html('<div class="system-message">💬 Chat started! Discuss your book swap here.</div>');
        
        messages.forEach(msg => {
            addChatMessage(msg.sender, msg.content, msg.sender === currentChatData.user1);
        });
        
        scrollToBottom();
    })
    .fail(function(xhr) {
        console.error('Failed to load messages:', xhr);
    });
}

function sendChatMessage() {
    const input = $('#chat-input');
    const message = input.val().trim();
    
    if (!message || !currentChatId) return;
    
    // Disable send button temporarily
    const sendBtn = $('#send-btn');
    sendBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i>');
    
    $.post(`/api/simple-chat/${currentChatId}/message`, {
        sender: currentChatData.user1,
        content: message
    })
    .done(function() {
        addChatMessage(currentChatData.user1, message, true);
        input.val('');
        scrollToBottom();
        
        // Simulate other user response (for demo)
        setTimeout(() => {
            const responses = [
                "Thanks for reaching out! I'm interested in this swap.",
                "That sounds great! When would be good for you?",
                "Perfect! I've been wanting to read that book.",
                "Awesome! Should we arrange the exchange?",
                "I'm excited about this swap!"
            ];
            const randomResponse = responses[Math.floor(Math.random() * responses.length)];
            addChatMessage(currentChatData.user2, randomResponse, false);
            scrollToBottom();
        }, 1500);
    })
    .fail(function(xhr) {
        console.error('Failed to send message:', xhr);
        addSystemMessage('❌ Failed to send message. Please try again.');
    })
    .always(function() {
        sendBtn.prop('disabled', false).html('<i class="fas fa-paper-plane"></i>');
    });
}

function addChatMessage(sender, content, isSent) {
    const messageHTML = `
        <div class="chat-message ${isSent ? 'sent' : 'received'}">
            <div class="message-content">${content}</div>
            <div class="message-time">${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>
        </div>
    `;
    
    $('#chat-messages').append(messageHTML);
}

function addSystemMessage(content) {
    const messageHTML = `<div class="system-message">${content}</div>`;
    $('#chat-messages').append(messageHTML);
}

function scrollToBottom() {
    const messagesContainer = $('#chat-messages');
    messagesContainer.scrollTop(messagesContainer[0].scrollHeight);
}

function minimizeChat() {
    $('#linkedin-chat').toggleClass('minimized');
}

function closeChat() {
    $('#linkedin-chat').removeClass('show');
    currentChatId = null;
    currentChatData = null;
}

// Handle Enter key in chat input
$(document).on('keypress', '#chat-input', function(e) {
    if (e.which === 13 && !e.shiftKey) {
        e.preventDefault();
        sendChatMessage();
    }
});

// Enable/disable send button based on input
$(document).on('input', '#chat-input', function() {
    const hasText = $(this).val().trim().length > 0;
    $('#send-btn').prop('disabled', !hasText || !currentChatId);
});

</script>

<!-- LinkedIn-style Chat CSS -->
<style>
.linkedin-chat {
    position: fixed;
    bottom: 0;
    right: 20px;
    width: 360px;
    height: 500px;
    background: #fff;
    border: 1px solid #d4d4d4;
    border-bottom: none;
    border-radius: 8px 8px 0 0;
    box-shadow: 0 -2px 20px rgba(0,0,0,0.15);
    z-index: 9999;
    transform: translateY(100%);
    transition: transform 0.3s ease-in-out;
    display: flex;
    flex-direction: column;
}

.linkedin-chat.show {
    transform: translateY(0);
}

.linkedin-chat.minimized {
    height: 60px;
}

.linkedin-chat.minimized .chat-body,
.linkedin-chat.minimized .chat-footer {
    display: none;
}

.chat-header {
    background: #0a66c2;
    color: white;
    padding: 12px 16px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-radius: 8px 8px 0 0;
    cursor: pointer;
}

.chat-info {
    display: flex;
    align-items: center;
    gap: 12px;
    flex: 1;
}

.chat-avatar {
    width: 36px;
    height: 36px;
    background: rgba(255,255,255,0.2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
}

.chat-details h6 {
    margin: 0;
    font-size: 14px;
    font-weight: 600;
}

.chat-subtitle {
    font-size: 12px;
    opacity: 0.9;
}

.chat-controls {
    display: flex;
    gap: 8px;
}

.btn-minimize, .btn-close {
    background: none;
    border: none;
    color: white;
    width: 28px;
    height: 28px;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.2s;
}

.btn-minimize:hover, .btn-close:hover {
    background: rgba(255,255,255,0.1);
}

.chat-body {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

.swap-context {
    background: #f8f9fa;
    padding: 12px 16px;
    border-bottom: 1px solid #e9ecef;
}

.swap-info {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 12px;
    color: #666;
}

.swap-info i {
    color: #0a66c2;
}

.chat-messages {
    flex: 1;
    padding: 16px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.chat-message {
    max-width: 80%;
    word-wrap: break-word;
}

.chat-message.sent {
    align-self: flex-end;
}

.chat-message.received {
    align-self: flex-start;
}

.message-content {
    background: #f1f3f4;
    padding: 8px 12px;
    border-radius: 16px;
    font-size: 14px;
    line-height: 1.4;
}

.chat-message.sent .message-content {
    background: #0a66c2;
    color: white;
}

.message-time {
    font-size: 11px;
    color: #999;
    margin-top: 4px;
    text-align: center;
}

.system-message {
    text-align: center;
    font-size: 12px;
    color: #666;
    font-style: italic;
    background: rgba(10, 102, 194, 0.1);
    padding: 8px 12px;
    border-radius: 12px;
    margin: 8px 0;
}

.chat-footer {
    border-top: 1px solid #e9ecef;
    padding: 12px 16px;
}

.message-input-container {
    display: flex;
    gap: 8px;
    align-items: center;
}

#chat-input {
    flex: 1;
    border: 1px solid #d4d4d4;
    border-radius: 20px;
    padding: 8px 16px;
    font-size: 14px;
    outline: none;
    resize: none;
}

#chat-input:focus {
    border-color: #0a66c2;
    box-shadow: 0 0 0 2px rgba(10, 102, 194, 0.1);
}

#send-btn {
    width: 36px;
    height: 36px;
    border: none;
    background: #0a66c2;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s;
}

#send-btn:hover:not(:disabled) {
    background: #004182;
    transform: scale(1.05);
}

#send-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
    transform: none;
}

.chat-messages::-webkit-scrollbar {
    width: 4px;
}

.chat-messages::-webkit-scrollbar-track {
    background: #f1f1f1;
}

.chat-messages::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 2px;
}

.chat-messages::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

@media (max-width: 768px) {
    .linkedin-chat {
        width: calc(100vw - 40px);
        right: 20px;
        left: 20px;
    }
}
</style>

<!-- Include Real-Time Chat System -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<!-- Include Navbar Chat System -->
<script src="/socket.io/socket.io.js"></script>
<script src="/js/navbar-chat.js"></script>

</body>
</html>

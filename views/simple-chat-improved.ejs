<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SwapShelf Chat</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .chat-container {
            max-width: 900px;
            margin: 0 auto;
            background: #1a1d29;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            border: 1px solid #2d3748;
        }
        .chat-header {
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            color: white;
            padding: 25px;
            text-align: center;
            position: relative;
        }
        .chat-header h2 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 600;
        }
        .chat-info {
            background: #2d3748;
            padding: 20px;
            border-bottom: 1px solid #4a5568;
            color: #e2e8f0;
        }
        .swap-details {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
        }
        .book-info {
            background: #1a202c;
            padding: 12px 16px;
            border-radius: 8px;
            border: 1px solid #4a5568;
            min-width: 150px;
            text-align: center;
        }
        .swap-arrow {
            color: #4f46e5;
            font-size: 1.5rem;
            font-weight: bold;
        }
        .chat-messages {
            height: 450px;
            overflow-y: auto;
            padding: 20px;
            background: #1a1d29;
        }
        .message {
            margin-bottom: 15px;
            padding: 12px 16px;
            border-radius: 18px;
            max-width: 75%;
            word-wrap: break-word;
        }
        .message.sent {
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 6px;
        }
        .message.received {
            background: #2d3748;
            color: #e2e8f0;
            border: 1px solid #4a5568;
            border-bottom-left-radius: 6px;
        }
        .message-sender {
            font-size: 0.85rem;
            opacity: 0.8;
            margin-bottom: 4px;
            font-weight: 500;
        }
        .message-content {
            line-height: 1.4;
        }
        .system-message {
            text-align: center;
            color: #a0aec0;
            font-style: italic;
            margin: 20px 0;
            padding: 10px;
            background: rgba(79, 70, 229, 0.1);
            border-radius: 10px;
            border: 1px solid rgba(79, 70, 229, 0.2);
        }
        .chat-input {
            padding: 20px;
            background: #2d3748;
            border-top: 1px solid #4a5568;
        }
        .input-group {
            display: flex;
            gap: 12px;
            align-items: center;
        }
        .input-group input {
            flex: 1;
            padding: 12px 16px;
            border: 1px solid #4a5568;
            border-radius: 25px;
            background: #1a202c;
            color: #e2e8f0;
            font-size: 14px;
            outline: none;
            transition: border-color 0.2s;
        }
        .input-group input:focus {
            border-color: #4f46e5;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }
        .input-group input::placeholder {
            color: #a0aec0;
        }
        .send-button {
            padding: 12px 24px;
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 500;
            transition: transform 0.2s, box-shadow 0.2s;
            min-width: 80px;
        }
        .send-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(79, 70, 229, 0.3);
        }
        .send-button:active {
            transform: translateY(0);
        }
        .online-indicator {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 12px;
            height: 12px;
            background: #10b981;
            border-radius: 50%;
            border: 2px solid white;
        }
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        .chat-messages::-webkit-scrollbar {
            width: 6px;
        }
        .chat-messages::-webkit-scrollbar-track {
            background: #1a202c;
        }
        .chat-messages::-webkit-scrollbar-thumb {
            background: #4a5568;
            border-radius: 3px;
        }
        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: #718096;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h2>üìö Book Swap Chat</h2>
            <div class="online-indicator"></div>
        </div>
        
        <div class="chat-info" id="chat-info">
            <div class="swap-details" id="swap-details">
                <div class="loading"></div>
                <span style="margin-left: 10px;">Initializing chat...</span>
            </div>
        </div>
        
        <div class="chat-messages" id="messages">
            <div class="system-message">
                üí¨ Welcome to SwapShelf Chat! Start your conversation about the book swap.
            </div>
        </div>
        
        <div class="chat-input">
            <div class="input-group">
                <input type="text" id="messageInput" placeholder="Type your message...">
                <button class="send-button" onclick="sendMessage()" id="sendBtn">Send</button>
            </div>
        </div>
    </div>

    <script>
        let currentChatId = null;
        let chatData = null;
        
        // Listen for chat data from parent window
        window.addEventListener('message', function(event) {
            console.log('Received message from parent:', event.data);
            
            if (event.data && event.data.user1 && event.data.user2) {
                chatData = event.data;
                updateChatInfo(chatData);
                createChat(chatData);
            }
        });
        
        // Update chat info display
        function updateChatInfo(data) {
            document.getElementById('swap-details').innerHTML = `
                <div class="book-info">
                    <strong>${data.user1}</strong><br>
                    <small>"${data.offeredBook}"</small>
                </div>
                <div class="swap-arrow">‚ü∑</div>
                <div class="book-info">
                    <strong>${data.user2}</strong><br>
                    <small>"${data.requestedBook}"</small>
                </div>
            `;
        }
        
        // Create a new chat
        async function createChat(chatData) {
            try {
                const response = await fetch('/api/chats', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        participants: [chatData.user1, chatData.user2],
                        bookContext: `${chatData.offeredBook} ‚Üî ${chatData.requestedBook}`
                    })
                });
                
                const result = await response.json();
                currentChatId = result.chat._id;
                console.log('Chat created:', currentChatId);
                
                // Add welcome message with context
                addSystemMessage(`Chat started between ${chatData.user1} and ${chatData.user2}`);
                addSystemMessage(`Discussing: "${chatData.offeredBook}" ‚ü∑ "${chatData.requestedBook}"`);
                
                // Enable input
                document.getElementById('messageInput').disabled = false;
                document.getElementById('sendBtn').disabled = false;
                
            } catch (error) {
                console.error('Error creating chat:', error);
                addSystemMessage('‚ùå Error creating chat. Please try again.');
            }
        }
        
        // Send a message
        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (!message || !currentChatId) return;
            
            // Disable button temporarily
            const sendBtn = document.getElementById('sendBtn');
            sendBtn.disabled = true;
            sendBtn.innerHTML = '<div class="loading"></div>';
            
            try {
                const response = await fetch(`/api/chats/${currentChatId}/messages`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        sender: chatData ? chatData.user1 : 'You',
                        content: message
                    })
                });
                
                if (response.ok) {
                    addMessageToUI(chatData ? chatData.user1 : 'You', message, true);
                    input.value = '';
                    
                    // Simulate other user response (for demo)
                    setTimeout(() => {
                        const responses = [
                            "Thanks for reaching out! I'm definitely interested in this swap.",
                            "That sounds great! When would be a good time to exchange books?",
                            "Perfect! I've been wanting to read that book for a while.",
                            "Awesome! Should we meet somewhere or do a mail exchange?",
                            "I'm excited about this swap! Let me know what works for you."
                        ];
                        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
                        addMessageToUI(chatData ? chatData.user2 : 'Other User', randomResponse, false);
                    }, 1500);
                }
            } catch (error) {
                console.error('Error sending message:', error);
                addSystemMessage('‚ùå Failed to send message. Please try again.');
            } finally {
                sendBtn.disabled = false;
                sendBtn.innerHTML = 'Send';
            }
        }
        
        // Add message to UI
        function addMessageToUI(sender, content, isSent) {
            const messagesDiv = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = isSent ? 'message sent' : 'message received';
            messageDiv.innerHTML = `
                <div class="message-sender">${sender}</div>
                <div class="message-content">${content}</div>
            `;
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
        
        // Add system message
        function addSystemMessage(content) {
            const messagesDiv = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'system-message';
            messageDiv.textContent = content;
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
        
        // Handle Enter key in input
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
        
        // Initialize
        document.getElementById('messageInput').disabled = true;
        document.getElementById('sendBtn').disabled = true;
        
        // Request chat data from parent if not received after 2 seconds
        setTimeout(() => {
            if (!chatData) {
                // Default demo data if no parent window
                const demoData = {
                    user1: 'You',
                    user2: 'Book Lover',
                    offeredBook: 'Sample Book',
                    requestedBook: 'Another Book'
                };
                updateChatInfo(demoData);
                chatData = demoData;
                createChat(demoData);
            }
        }, 2000);
    </script>
</body>
</html>
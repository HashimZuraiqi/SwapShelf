<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rewards & Achievements | BookSwap</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/rewards.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
</head>
<body class="rewards-main">

<!-- Badge Unlock Notification -->
<div id="badgeNotification" class="badge-notification">
    <div class="badge-notification-content">
        <div class="badge-notification-icon" id="notificationIcon">üèÜ</div>
        <div class="badge-notification-text">
            <h4 id="notificationTitle">New Badge Unlocked!</h4>
            <p id="notificationMessage">You've earned a new achievement</p>
            <div class="badge-notification-points">+<span id="notificationPoints">0</span> Points</div>
        </div>
        <button class="badge-notification-close" onclick="closeNotification()">√ó</button>
    </div>
</div>

<!-- Navigation -->
<nav class="navbar navbar-expand-lg navbar-dark custom-navbar">
    <div class="container-fluid">
        <a class="navbar-brand d-flex align-items-center" href="/" style="margin-left: 100px; margin-right: 150px; margin-top: 10px;">
            <img src="./images/Untitled design(1).png" alt="BookSwap" class="logo-image" style="
                height: 32px; 
                width: auto; 
                transform: scale(4);
                filter: drop-shadow(0 3px 6px rgba(0,0,0,0.2));
                transition: all 0.3s ease;
                z-index: 10;
                position: relative;
            " onmouseover="this.style.transform='scale(4.3)'" onmouseout="this.style.transform='scale(4)'"/>
        </a>
        
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav mx-auto">
                <li class="nav-item <%= activePage === 'dashboard' ? 'active' : '' %>">
                    <a class="nav-link" href="/dashboard"><i class="bi bi-speedometer2"></i> Dashboard</a>
                </li>
                <li class="nav-item <%= activePage === 'library' ? 'active' : '' %>">
                    <a class="nav-link" href="/library"><i class="bi bi-book"></i> My Library</a>
                </li>
                <li class="nav-item <%= activePage === 'wishlist' ? 'active' : '' %>">
                    <a class="nav-link" href="/wishlist"><i class="bi bi-heart"></i> Wishlist</a>
                </li>
                <li class="nav-item <%= activePage === 'swap-matcher' ? 'active' : '' %>">
                    <a class="nav-link" href="/swap-matcher"><i class="bi bi-arrow-left-right"></i> Swap Matcher</a>
                </li>
                <li class="nav-item <%= activePage === 'rewards' ? 'active' : '' %>">
                    <a class="nav-link" href="/rewards"><i class="bi bi-trophy"></i> Rewards</a>
                </li>
            </ul>
            
            <ul class="navbar-nav ml-auto">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="profileDropdown" role="button" data-toggle="dropdown">
                        <i class="bi bi-person-circle"></i> Profile
                    </a>
                    <div class="dropdown-menu dropdown-menu-right">
                        <a class="dropdown-item" href="/me"><i class="bi bi-person"></i> My Profile</a>
                        <a class="dropdown-item" href="/history"><i class="bi bi-clock-history"></i> Activity History</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="/logout"><i class="bi bi-box-arrow-right"></i> Logout</a>
                    </div>
                </li>
            </ul>
        </div>
    </div>
</nav>

<!-- Main Content -->
<div class="container-fluid px-4 py-4">
    <!-- Loading Spinner -->
    <div id="loadingSpinner" class="loading-spinner-modern">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Loading your achievements...</p>
    </div>

    <!-- Main Content (hidden until loaded) -->
    <div id="mainContent" class="d-none">
        
        <!-- Header Section -->
        <div class="rewards-header-modern">
            <div class="row align-items-center">
                <div class="col-lg-8">
                    <h1 class="page-title-modern">
                        <i class="bi bi-trophy-fill"></i>
                        Rewards Center
                    </h1>
                    <p class="page-subtitle-modern">
                        Track your achievements, earn badges, and level up your BookSwap journey
                    </p>
                </div>
                <div class="col-lg-4 text-lg-end mt-3 mt-lg-0">
                    <button class="btn-refresh-modern" onclick="loadRewardsData()">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                    <a href="/leaderboard" class="btn-leaderboard-modern">
                        <i class="bi bi-trophy-fill"></i> Leaderboard
                    </a>
                </div>
            </div>
        </div>

        <!-- Stats Cards Row -->
        <div class="row g-4 mb-4">
            <div class="col-lg-3 col-md-6">
                <div class="stat-card-modern">
                    <div class="stat-card-icon gold">
                        <i class="bi bi-star-fill"></i>
                    </div>
                    <div class="stat-card-body">
                        <div class="stat-value" id="reputationPoints">0</div>
                        <div class="stat-label">Total Points</div>
                        <div class="stat-rank" id="reputationLevel">Newcomer</div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-card-modern">
                    <div class="stat-card-icon blue">
                        <i class="bi bi-award-fill"></i>
                    </div>
                    <div class="stat-card-body">
                        <div class="stat-value">
                            <span id="badgesUnlocked">0</span>/<span id="totalBadges">0</span>
                        </div>
                        <div class="stat-label">Badges Earned</div>
                        <div class="stat-progress-mini">
                            <div class="stat-progress-bar" id="badgeProgressBar" style="width: 0%"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-card-modern">
                    <div class="stat-card-icon green">
                        <i class="bi bi-arrow-left-right"></i>
                    </div>
                    <div class="stat-card-body">
                        <div class="stat-value" id="completedSwaps">0</div>
                        <div class="stat-label">Swaps Completed</div>
                        <div class="stat-trend positive">
                            <i class="bi bi-arrow-up"></i> <span id="monthlySwaps">0</span> this month
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-card-modern">
                    <div class="stat-card-icon purple">
                        <i class="bi bi-book-fill"></i>
                    </div>
                    <div class="stat-card-body">
                        <div class="stat-value" id="booksAdded">0</div>
                        <div class="stat-label">Books in Library</div>
                        <div class="stat-trend">
                            <i class="bi bi-plus-circle"></i> Keep growing!
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Next Milestone Card -->
        <div class="milestone-card-modern mb-4" id="milestoneCard" style="display: none;">
            <div class="milestone-icon">
                <i class="bi bi-flag-fill"></i>
            </div>
            <div class="milestone-body">
                <h5 class="milestone-title">Next Milestone: <span id="milestoneName">Explorer</span></h5>
                <p class="milestone-desc" id="milestoneDescription">Reach 100 points to level up</p>
                <div class="milestone-progress-container">
                    <div class="milestone-progress-bar">
                        <div class="milestone-progress-fill" id="milestoneProgressBar" style="width: 0%"></div>
                    </div>
                    <div class="milestone-stats-text">
                        <span><span id="milestoneCurrent">0</span> / <span id="milestoneTarget">100</span> points</span>
                        <span><span id="milestonePercentage">0</span>% complete</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Badge Categories Section -->
        <div class="badges-section-modern">
            <div class="section-header-modern">
                <h2 class="section-title-modern">
                    <i class="bi bi-award-fill"></i>
                    Achievement Badges
                </h2>
            </div>

            <!-- Category Filter Tabs -->
            <div class="category-tabs-modern mb-4">
                <button class="category-tab active" data-category="all" onclick="filterBadges('all')">
                    <i class="bi bi-grid-fill"></i> All Badges
                </button>
                <button class="category-tab" data-category="swapping" onclick="filterBadges('swapping')">
                    <i class="bi bi-arrow-left-right"></i> Swapping
                </button>
                <button class="category-tab" data-category="login_visit" onclick="filterBadges('login_visit')">
                    <i class="bi bi-calendar-check"></i> Streaks
                </button>
                <button class="category-tab" data-category="community" onclick="filterBadges('community')">
                    <i class="bi bi-people-fill"></i> Community
                </button>
                <button class="category-tab" data-category="special" onclick="filterBadges('special')">
                    <i class="bi bi-star-fill"></i> Special
                </button>
                <button class="category-tab" data-category="monthly" onclick="filterBadges('monthly')">
                    <i class="bi bi-trophy-fill"></i> Elite
                </button>
            </div>

            <!-- Badges Grid -->
            <div class="badge-grid-modern" id="badgeGrid">
                <!-- Badges will be loaded here dynamically -->
            </div>

            <!-- Empty State -->
            <div id="noBadgesMessage" class="no-badges-message" style="display: none;">
                <i class="bi bi-inbox"></i>
                <p>No badges in this category yet</p>
            </div>
        </div>

    </div>
</div>

<script>
// Inline rewards manager to avoid loading issues
let rewardsData = null;
let currentCategory = 'all';
let allBadges = [];

async function loadRewardsData() {
    try {
        console.log('üîÑ Loading rewards data...');
        
        const response = await fetch('/api/rewards', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
            credentials: 'same-origin'
        });

        console.log('üì° Response status:', response.status);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log('üì¶ Response data:', result);
        
        if (result.success && result.data) {
            rewardsData = result.data;
            allBadges = result.data.badges || [];
            console.log('‚úÖ Data loaded successfully');
            renderRewards();
            hideLoading();
            checkNewBadges();
        } else {
            throw new Error(result.message || 'API returned no data');
        }
    } catch (error) {
        console.error('‚ùå Error loading rewards data:', error);
        hideLoading();
        showError('Failed to load rewards data. Please refresh the page.');
    }
}

function renderRewards() {
    renderStats();
    renderMilestone();
    renderBadges(currentCategory);
}

function renderStats() {
    if (!rewardsData) return;
    
    const { user, stats, monthlyStats } = rewardsData;
    console.log('üìä Rendering stats:', user);
    
    // Update points and level
    document.getElementById('reputationPoints').textContent = (user.totalPoints || 0).toLocaleString();
    document.getElementById('reputationLevel').textContent = user.reputationLevel || 'Newcomer';
    
    // Update badges
    document.getElementById('badgesUnlocked').textContent = user.unlockedBadges || 0;
    document.getElementById('totalBadges').textContent = user.totalBadges || 0;
    
    // Update badge progress bar
    const badgeProgress = user.totalBadges > 0 ? (user.unlockedBadges / user.totalBadges) * 100 : 0;
    document.getElementById('badgeProgressBar').style.width = badgeProgress + '%';
    
    // Update swaps
    document.getElementById('completedSwaps').textContent = stats.completedSwaps || 0;
    document.getElementById('monthlySwaps').textContent = monthlyStats.swapsThisMonth || 0;
    
    // Update books
    document.getElementById('booksAdded').textContent = stats.booksAdded || 0;
    
    console.log('‚úÖ Stats rendered successfully');
}

function renderMilestone() {
    const nextMilestone = rewardsData.nextMilestone;
    
    if (nextMilestone) {
        document.getElementById('milestoneCard').style.display = 'flex';
        document.getElementById('milestoneName').textContent = nextMilestone.name || 'Explorer';
        document.getElementById('milestoneDescription').textContent = nextMilestone.description || 'Reach 100 points';
        document.getElementById('milestoneCurrent').textContent = nextMilestone.progress || 0;
        document.getElementById('milestoneTarget').textContent = nextMilestone.points || 100;
        document.getElementById('milestonePercentage').textContent = nextMilestone.percentage || 0;
        document.getElementById('milestoneProgressBar').style.width = (nextMilestone.percentage || 0) + '%';
    } else {
        document.getElementById('milestoneCard').style.display = 'none';
    }
}

function renderBadges(category = 'all') {
    const badgeGrid = document.getElementById('badgeGrid');
    const noBadgesMessage = document.getElementById('noBadgesMessage');
    badgeGrid.innerHTML = '';
    
    // Filter badges by category
    const filteredBadges = category === 'all' 
        ? allBadges 
        : allBadges.filter(badge => badge.category === category);
    
    if (filteredBadges.length === 0) {
        noBadgesMessage.style.display = 'flex';
        return;
    }
    
    noBadgesMessage.style.display = 'none';
    
    // Sort: unlocked first, then by progress
    const sortedBadges = filteredBadges.sort((a, b) => {
        if (a.isUnlocked && !b.isUnlocked) return -1;
        if (!a.isUnlocked && b.isUnlocked) return 1;
        return b.percentage - a.percentage;
    });
    
    sortedBadges.forEach((badge, index) => {
        const badgeCard = createBadgeCard(badge);
        badgeGrid.appendChild(badgeCard);
        
        // Animate badge appearance
        setTimeout(() => {
            badgeCard.classList.add('fade-in');
        }, index * 50);
    });
}

function createBadgeCard(badge) {
    const card = document.createElement('div');
    card.className = 'badge-card-modern ' + (badge.isUnlocked ? 'unlocked' : 'locked');
    card.dataset.category = badge.category;
    
    // Category colors
    const categoryGradients = {
        swapping: 'linear-gradient(90deg, #3BB7FB 0%, #2a9fd8 100%)',
        login_visit: 'linear-gradient(90deg, #F6B443 0%, #e09f3e 100%)',
        community: 'linear-gradient(90deg, #28a745 0%, #20c997 100%)',
        special: 'linear-gradient(90deg, #9C27B0 0%, #7B1FA2 100%)',
        monthly: 'linear-gradient(90deg, #FFD700 0%, #FFA500 100%)'
    };
    
    const categoryGradient = categoryGradients[badge.category] || 'linear-gradient(90deg, #3BB7FB 0%, #F6B443 100%)';
    
    let progressHtml = '';
    if (!badge.isUnlocked && badge.percentage > 0) {
        progressHtml = `
            <div class="badge-progress-container">
                <div class="progress-bar-slim">
                    <div class="progress-fill-slim" style="width: ${badge.percentage}%; background: ${categoryGradient}"></div>
                </div>
                <div class="progress-text-small">${badge.progress}/${badge.target} (${badge.percentage}%)</div>
            </div>
        `;
    }
    
    card.innerHTML = `
        <div class="badge-card-header">
            <div class="badge-icon-large">${badge.icon}</div>
            <div class="badge-points-tag">+${badge.points}</div>
        </div>
        <div class="badge-card-body">
            <h6 class="badge-name">${badge.name}</h6>
            <p class="badge-desc">${badge.description}</p>
            ${progressHtml}
        </div>
        <div class="badge-card-footer">
            <div class="badge-status-tag ${badge.isUnlocked ? 'unlocked' : 'locked'}">
                ${badge.isUnlocked ? 
                    '<i class="bi bi-check-circle-fill"></i> Unlocked' : 
                    '<i class="bi bi-lock-fill"></i> Locked'}
            </div>
        </div>
    `;
    
    return card;
}

function filterBadges(category) {
    currentCategory = category;
    renderBadges(category);
    
    // Update active tab
    document.querySelectorAll('.category-tab').forEach(tab => {
        tab.classList.remove('active');
        if (tab.dataset.category === category) {
            tab.classList.add('active');
        }
    });
}

function checkNewBadges() {
    const lastCheck = localStorage.getItem('lastBadgeCheck');
    const currentBadges = allBadges.filter(b => b.isUnlocked).map(b => b.id);
    
    if (lastCheck) {
        const previousBadges = JSON.parse(lastCheck);
        const newBadges = currentBadges.filter(id => !previousBadges.includes(id));
        
        if (newBadges.length > 0) {
            const newBadge = allBadges.find(b => b.id === newBadges[0]);
            if (newBadge) {
                showBadgeNotification(newBadge);
            }
        }
    }
    
    localStorage.setItem('lastBadgeCheck', JSON.stringify(currentBadges));
}

function showBadgeNotification(badge) {
    const notification = document.getElementById('badgeNotification');
    document.getElementById('notificationIcon').textContent = badge.icon;
    document.getElementById('notificationTitle').textContent = badge.name + ' Unlocked!';
    document.getElementById('notificationMessage').textContent = badge.description;
    document.getElementById('notificationPoints').textContent = badge.points;
    
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 5000);
}

function closeNotification() {
    document.getElementById('badgeNotification').classList.remove('show');
}

function hideLoading() {
    document.getElementById('loadingSpinner').style.display = 'none';
    document.getElementById('mainContent').classList.remove('d-none');
}

function showError(message) {
    alert(message);
    document.getElementById('mainContent').classList.remove('d-none');
}

// Load data when page loads
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìÑ Page loaded, initializing rewards...');
    loadRewardsData();
});
</script>

<!-- Include Simple Chat Widget -->
<!-- Include Real-Time Chat System -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<link rel="stylesheet" href="/css/realTimeChat.css">
<script src="/socket.io/socket.io.js"></script>
<script src="/js/realTimeChat.js"></script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

</body>
</html>